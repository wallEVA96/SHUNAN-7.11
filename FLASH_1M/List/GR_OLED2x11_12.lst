###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      24/Jun/2014  03:43:01 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\创作室\飞思卡尔智能小车\创作屋\新开张\顺暗2号_不死鸟_ #
#                    6_23\6_23\ShunAn2\GR_OLED2x11_12.c                       #
#    Command line =  D:\创作室\飞思卡尔智能小车\创作屋\新开张\顺暗2号_不死鸟_ #
#                    6_23\6_23\ShunAn2\GR_OLED2x11_12.c -D IAR -D ShunAn2     #
#                    -lCN D:\创作室\飞思卡尔智能小车\创作屋\新开张\顺暗2号_不 #
#                    死鸟_6_23\6_23\FLASH_1M\List\ -lB                        #
#                    D:\创作室\飞思卡尔智能小车\创作屋\新开张\顺暗2号_不死鸟_ #
#                    6_23\6_23\FLASH_1M\List\ -o                              #
#                    D:\创作室\飞思卡尔智能小车\创作屋\新开张\顺暗2号_不死鸟_ #
#                    6_23\6_23\FLASH_1M\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I D:\创作室\飞思卡尔智能小车\创作屋\新开张\顺暗2 #
#                    号_不死鸟_6_23\6_23\ShunAn2\ -I                          #
#                    D:\创作室\飞思卡尔智能小车\创作屋\新开张\顺暗2号_不死鸟_ #
#                    6_23\6_23\Library\ -I D:\创作室\飞思卡尔智能小车\创作屋\ #
#                    新开张\顺暗2号_不死鸟_6_23\6_23\Library\BlessedAlien\    #
#                    -Ol --use_c++_inline                                     #
#    List file    =  D:\创作室\飞思卡尔智能小车\创作屋\新开张\顺暗2号_不死鸟_ #
#                    6_23\6_23\FLASH_1M\List\GR_OLED2x11_12.lst               #
#    Object file  =  D:\创作室\飞思卡尔智能小车\创作屋\新开张\顺暗2号_不死鸟_ #
#                    6_23\6_23\FLASH_1M\Obj\GR_OLED2x11_12.o                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\创作室\飞思卡尔智能小车\创作屋\新开张\顺暗2号_不死鸟_6_23\6_23\ShunAn2\GR_OLED2x11_12.c
      1          #include "GR_OLEDx11_12.h"
      2          #include "BlessedAlien.h"
      3          
      4          
      5          #define XLevelL		0x00
      6          #define XLevelH		0x10
      7          #define XLevel		((XLevelH&0x0F)*16+XLevelL)
      8          #define Max_Column	128
      9          #define Max_Row		  64
     10          #define	Brightness	0xCF 
     11          
     12          
     13          #define X_WIDTH 128
     14          #define Y_WIDTH 64
     15          //======================================

   \                                 In section .bss, align 4
     16          OledInformation OLED = {0};
   \                     OLED:
   \   00000000                      DS8 8
     17          
     18          

   \                                 In section .text, align 2, keep-with-next
     19          void LCD_WrDat(uint8 data)
     20          {
     21            uint8 i=8;
   \                     LCD_WrDat: (+1)
   \   00000000   0x2108             MOVS     R1,#+8
     22            //uint8 j=0;
     23          
     24            GPIOC_PDOR |= (1<<19);//PTC19=1 DC=1
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x400ff080
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0xF452 0x2200      ORRS     R2,R2,#0x80000
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable5  ;; 0x400ff080
   \   00000010   0x601A             STR      R2,[R3, #+0]
     25            //for(j=0;j<=1;j++);//延时
     26            GPIOC_PDOR &= ~(1<<16);//PTC16=0 CLK/D0=0
   \   00000012   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x400ff080
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0xF432 0x3280      BICS     R2,R2,#0x10000
   \   0000001C   0x.... 0x....      LDR.W    R3,??DataTable5  ;; 0x400ff080
   \   00000020   0x601A             STR      R2,[R3, #+0]
   \   00000022   0xE018             B.N      ??LCD_WrDat_0
     27            //for(j=0;j<=1;j++);//延时
     28          
     29            while(i--)
     30            {
     31              if(data&0x80){GPIOC_PDOR |= (1<<17);}//PTC17=1 SDA/D1=1
     32              else{GPIOC_PDOR &= ~(1<<17);}//PTC17=0 SDA/D1=0
   \                     ??LCD_WrDat_1: (+1)
   \   00000024   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x400ff080
   \   00000028   0x6812             LDR      R2,[R2, #+0]
   \   0000002A   0xF432 0x3200      BICS     R2,R2,#0x20000
   \   0000002E   0x.... 0x....      LDR.W    R3,??DataTable5  ;; 0x400ff080
   \   00000032   0x601A             STR      R2,[R3, #+0]
     33              //for(j=0;j<=1;j++);//延时
     34              GPIOC_PDOR |= (1<<16);//PTC16=1 CLK/D0=1
   \                     ??LCD_WrDat_2: (+1)
   \   00000034   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x400ff080
   \   00000038   0x6812             LDR      R2,[R2, #+0]
   \   0000003A   0xF452 0x3280      ORRS     R2,R2,#0x10000
   \   0000003E   0x.... 0x....      LDR.W    R3,??DataTable5  ;; 0x400ff080
   \   00000042   0x601A             STR      R2,[R3, #+0]
     35              //for(j=0;j<=1;j++);//延时            
     36              GPIOC_PDOR &= ~(1<<16);//PTC16=0 CLK/D0=0 
   \   00000044   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x400ff080
   \   00000048   0x6812             LDR      R2,[R2, #+0]
   \   0000004A   0xF432 0x3280      BICS     R2,R2,#0x10000
   \   0000004E   0x.... 0x....      LDR.W    R3,??DataTable5  ;; 0x400ff080
   \   00000052   0x601A             STR      R2,[R3, #+0]
     37              data<<=1;    
   \   00000054   0x0040             LSLS     R0,R0,#+1
   \                     ??LCD_WrDat_0: (+1)
   \   00000056   0x000A             MOVS     R2,R1
   \   00000058   0x1E51             SUBS     R1,R2,#+1
   \   0000005A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000005C   0x2A00             CMP      R2,#+0
   \   0000005E   0xD00A             BEQ.N    ??LCD_WrDat_3
   \   00000060   0x0602             LSLS     R2,R0,#+24
   \   00000062   0xD5DF             BPL.N    ??LCD_WrDat_1
   \   00000064   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x400ff080
   \   00000068   0x6812             LDR      R2,[R2, #+0]
   \   0000006A   0xF452 0x3200      ORRS     R2,R2,#0x20000
   \   0000006E   0x.... 0x....      LDR.W    R3,??DataTable5  ;; 0x400ff080
   \   00000072   0x601A             STR      R2,[R3, #+0]
   \   00000074   0xE7DE             B.N      ??LCD_WrDat_2
     38            }
     39          }
   \                     ??LCD_WrDat_3: (+1)
   \   00000076   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     40          void LCD_WrCmd(uint8 cmd)
     41          {
     42            uint8 i=8;
   \                     LCD_WrCmd: (+1)
   \   00000000   0x2108             MOVS     R1,#+8
     43            //uint8 j=0;
     44            
     45            GPIOC_PDOR &= ~(1<<19);//PTC19=1 DC=0
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x400ff080
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0xF432 0x2200      BICS     R2,R2,#0x80000
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable5  ;; 0x400ff080
   \   00000010   0x601A             STR      R2,[R3, #+0]
     46            //for(j=0;j<=1;j++);//延时
     47            GPIOC_PDOR &= ~(1<<16);//PTC16=0 CLK/D0=0
   \   00000012   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x400ff080
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0xF432 0x3280      BICS     R2,R2,#0x10000
   \   0000001C   0x.... 0x....      LDR.W    R3,??DataTable5  ;; 0x400ff080
   \   00000020   0x601A             STR      R2,[R3, #+0]
   \   00000022   0xE018             B.N      ??LCD_WrCmd_0
     48            //for(j=0;j<=1;j++);//延时
     49            
     50            while(i--)
     51            {
     52              if(cmd&0x80){GPIOC_PDOR |= (1<<17);}//PTC17=1 SDA/D1=1
     53              else{GPIOC_PDOR &= ~(1<<17);}//PTC17=0 SDA/D1=0
   \                     ??LCD_WrCmd_1: (+1)
   \   00000024   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x400ff080
   \   00000028   0x6812             LDR      R2,[R2, #+0]
   \   0000002A   0xF432 0x3200      BICS     R2,R2,#0x20000
   \   0000002E   0x.... 0x....      LDR.W    R3,??DataTable5  ;; 0x400ff080
   \   00000032   0x601A             STR      R2,[R3, #+0]
     54              //for(j=0;j<=1;j++);//延时
     55              GPIOC_PDOR |= (1<<16);//PTC16=1 CLK/D0=1
   \                     ??LCD_WrCmd_2: (+1)
   \   00000034   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x400ff080
   \   00000038   0x6812             LDR      R2,[R2, #+0]
   \   0000003A   0xF452 0x3280      ORRS     R2,R2,#0x10000
   \   0000003E   0x.... 0x....      LDR.W    R3,??DataTable5  ;; 0x400ff080
   \   00000042   0x601A             STR      R2,[R3, #+0]
     56              //for(j=0;j<=1;j++);//延时
     57              GPIOC_PDOR &= ~(1<<16);//PTC16=0 CLK/D0=0 
   \   00000044   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x400ff080
   \   00000048   0x6812             LDR      R2,[R2, #+0]
   \   0000004A   0xF432 0x3280      BICS     R2,R2,#0x10000
   \   0000004E   0x.... 0x....      LDR.W    R3,??DataTable5  ;; 0x400ff080
   \   00000052   0x601A             STR      R2,[R3, #+0]
     58              cmd<<=1;  
   \   00000054   0x0040             LSLS     R0,R0,#+1
   \                     ??LCD_WrCmd_0: (+1)
   \   00000056   0x000A             MOVS     R2,R1
   \   00000058   0x1E51             SUBS     R1,R2,#+1
   \   0000005A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000005C   0x2A00             CMP      R2,#+0
   \   0000005E   0xD00A             BEQ.N    ??LCD_WrCmd_3
   \   00000060   0x0602             LSLS     R2,R0,#+24
   \   00000062   0xD5DF             BPL.N    ??LCD_WrCmd_1
   \   00000064   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x400ff080
   \   00000068   0x6812             LDR      R2,[R2, #+0]
   \   0000006A   0xF452 0x3200      ORRS     R2,R2,#0x20000
   \   0000006E   0x.... 0x....      LDR.W    R3,??DataTable5  ;; 0x400ff080
   \   00000072   0x601A             STR      R2,[R3, #+0]
   \   00000074   0xE7DE             B.N      ??LCD_WrCmd_2
     59            }
     60          
     61          }
   \                     ??LCD_WrCmd_3: (+1)
   \   00000076   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     62          void LCD_Set_Pos(uint8 x, uint8 y)
     63          { 
   \                     LCD_Set_Pos: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     64            LCD_WrCmd(0xb0+y);
   \   00000004   0xF1B1 0x0050      SUBS     R0,R1,#+80
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       LCD_WrCmd
     65            LCD_WrCmd(((x&0xf0)>>4)|0x10);
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x0920             LSRS     R0,R4,#+4
   \   00000012   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LCD_WrCmd
     66            LCD_WrCmd((x&0x0f)|0x01); 
   \   0000001C   0xF014 0x000F      ANDS     R0,R4,#0xF
   \   00000020   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       LCD_WrCmd
     67          } 
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     68          void LCD_Fill(uint8 bmp_data)
     69          {
   \                     LCD_Fill: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     70          	uint8 y,x;
     71          	
     72          	for(y=0;y<8;y++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE008             B.N      ??LCD_Fill_0
     73          	{
     74          		LCD_WrCmd(0xb0+y);
     75          		LCD_WrCmd(0x01);
     76          		LCD_WrCmd(0x10);
     77          		for(x=0;x<X_WIDTH;x++)
     78          			LCD_WrDat(bmp_data);
   \                     ??LCD_Fill_1: (+1)
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       LCD_WrDat
   \   00000010   0x1C76             ADDS     R6,R6,#+1
   \                     ??LCD_Fill_2: (+1)
   \   00000012   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000014   0x2E80             CMP      R6,#+128
   \   00000016   0xDBF7             BLT.N    ??LCD_Fill_1
   \   00000018   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_Fill_0: (+1)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D08             CMP      R5,#+8
   \   0000001E   0xDA0C             BGE.N    ??LCD_Fill_3
   \   00000020   0xF1B5 0x0050      SUBS     R0,R5,#+80
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       LCD_WrCmd
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       LCD_WrCmd
   \   00000030   0x2010             MOVS     R0,#+16
   \   00000032   0x.... 0x....      BL       LCD_WrCmd
   \   00000036   0x2600             MOVS     R6,#+0
   \   00000038   0xE7EB             B.N      ??LCD_Fill_2
     79          	}
     80          }
   \                     ??LCD_Fill_3: (+1)
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
     81          void LCD_CLS(void)
     82          {
   \                     LCD_CLS: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     83          	uint8 y,x;	
     84          	for(y=0;y<8;y++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE007             B.N      ??LCD_CLS_0
     85          	{
     86          		LCD_WrCmd(0xb0+y);
     87          		LCD_WrCmd(0x01);
     88          		LCD_WrCmd(0x10); 
     89          		for(x=0;x<X_WIDTH;x++)
     90          			LCD_WrDat(0);
   \                     ??LCD_CLS_1: (+1)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       LCD_WrDat
   \   0000000C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_CLS_2: (+1)
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x2D80             CMP      R5,#+128
   \   00000012   0xDBF8             BLT.N    ??LCD_CLS_1
   \   00000014   0x1C64             ADDS     R4,R4,#+1
   \                     ??LCD_CLS_0: (+1)
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C08             CMP      R4,#+8
   \   0000001A   0xDA0C             BGE.N    ??LCD_CLS_3
   \   0000001C   0xF1B4 0x0050      SUBS     R0,R4,#+80
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x.... 0x....      BL       LCD_WrCmd
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       LCD_WrCmd
   \   0000002C   0x2010             MOVS     R0,#+16
   \   0000002E   0x.... 0x....      BL       LCD_WrCmd
   \   00000032   0x2500             MOVS     R5,#+0
   \   00000034   0xE7EB             B.N      ??LCD_CLS_2
     91          	}
     92          }
   \                     ??LCD_CLS_3: (+1)
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     93          
     94          

   \                                 In section .text, align 2, keep-with-next
     95          void LCD_Init(void)        
     96          {            
   \                     LCD_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     97            SIM_SCGC5 |= 0x00000800u;//使能PORTC时钟 
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable5_1  ;; 0x40048038
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable5_1  ;; 0x40048038
   \   00000010   0x6008             STR      R0,[R1, #+0]
     98            PORTC_PCR19 |= 0x00000100u;//PTA24引脚复用选择普通IO(//DC-A24-DC)
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0x4004b04c
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable5_2  ;; 0x4004b04c
   \   00000020   0x6008             STR      R0,[R1, #+0]
     99            PORTC_PCR18 |= 0x00000100u;//PTA25引脚复用选择普通IO(//RST-A25-RST)
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable5_3  ;; 0x4004b048
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable5_3  ;; 0x4004b048
   \   00000030   0x6008             STR      R0,[R1, #+0]
    100            PORTC_PCR17 |= 0x00000100u;//PTA26引脚复用选择普通IO(//D1-A26-SDA)
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable5_4  ;; 0x4004b044
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable5_4  ;; 0x4004b044
   \   00000040   0x6008             STR      R0,[R1, #+0]
    101            PORTC_PCR16 |= 0x00000100u;//PTA27引脚复用选择普通IO(//CLK/D0-A27-SCL)
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable5_5  ;; 0x4004b040
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable5_5  ;; 0x4004b040
   \   00000050   0x6008             STR      R0,[R1, #+0]
    102                  
    103            GPIOC_PDDR |= (1<<19);//PTA24引脚选择输出方向
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x400ff094
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable5_6  ;; 0x400ff094
   \   00000060   0x6008             STR      R0,[R1, #+0]
    104            GPIOC_PDDR |= (1<<18);//PTA25引脚选择输出方向
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x400ff094
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable5_6  ;; 0x400ff094
   \   00000070   0x6008             STR      R0,[R1, #+0]
    105            GPIOC_PDDR |= (1<<17);//PTA26引脚选择输出方向
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x400ff094
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable5_6  ;; 0x400ff094
   \   00000080   0x6008             STR      R0,[R1, #+0]
    106            GPIOC_PDDR |= (1<<16);//PTA27引脚选择输出方向
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x400ff094
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable5_6  ;; 0x400ff094
   \   00000090   0x6008             STR      R0,[R1, #+0]
    107                  
    108            GPIOC_PDOR |= (1<<19);//PTC19=1 DC=1
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable5  ;; 0x400ff080
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable5  ;; 0x400ff080
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    109            GPIOC_PDOR &= ~(1<<18);//PTC18=0 RST=0
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable5  ;; 0x400ff080
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0xF430 0x2080      BICS     R0,R0,#0x40000
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable5  ;; 0x400ff080
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    110            GPIOC_PDOR |= (1<<17);//PTC17=1 SDA/D1=1
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable5  ;; 0x400ff080
   \   000000B6   0x6800             LDR      R0,[R0, #+0]
   \   000000B8   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable5  ;; 0x400ff080
   \   000000C0   0x6008             STR      R0,[R1, #+0]
    111            GPIOC_PDOR |= (1<<16);//PTC16=1 CLK/D0=1
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable5  ;; 0x400ff080
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable5  ;; 0x400ff080
   \   000000D0   0x6008             STR      R0,[R1, #+0]
    112          
    113            for(unsigned short int i = 0;i<1000;i++);//延时
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0xE000             B.N      ??LCD_Init_0
   \                     ??LCD_Init_1: (+1)
   \   000000D6   0x1C40             ADDS     R0,R0,#+1
   \                     ??LCD_Init_0: (+1)
   \   000000D8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DA   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000000DE   0xDBFA             BLT.N    ??LCD_Init_1
    114            //DELAY_MS(50);
    115            GPIOC_PDOR |= (1<<18);//PTC18=1 RST=1
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable5  ;; 0x400ff080
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable5  ;; 0x400ff080
   \   000000EE   0x6008             STR      R0,[R1, #+0]
    116          
    117            LCD_WrCmd(0xae);//--turn off oled panel
   \   000000F0   0x20AE             MOVS     R0,#+174
   \   000000F2   0x.... 0x....      BL       LCD_WrCmd
    118            LCD_WrCmd(0x00);//---set low column address
   \   000000F6   0x2000             MOVS     R0,#+0
   \   000000F8   0x.... 0x....      BL       LCD_WrCmd
    119            LCD_WrCmd(0x10);//---set high column address
   \   000000FC   0x2010             MOVS     R0,#+16
   \   000000FE   0x.... 0x....      BL       LCD_WrCmd
    120            LCD_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
   \   00000102   0x2040             MOVS     R0,#+64
   \   00000104   0x.... 0x....      BL       LCD_WrCmd
    121            LCD_WrCmd(0x81);//--set contrast control register
   \   00000108   0x2081             MOVS     R0,#+129
   \   0000010A   0x.... 0x....      BL       LCD_WrCmd
    122            LCD_WrCmd(0xcf); // Set SEG Output Current Brightness
   \   0000010E   0x20CF             MOVS     R0,#+207
   \   00000110   0x.... 0x....      BL       LCD_WrCmd
    123            LCD_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
   \   00000114   0x20A1             MOVS     R0,#+161
   \   00000116   0x.... 0x....      BL       LCD_WrCmd
    124            LCD_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
   \   0000011A   0x20C8             MOVS     R0,#+200
   \   0000011C   0x.... 0x....      BL       LCD_WrCmd
    125            LCD_WrCmd(0xa6);//--set normal display
   \   00000120   0x20A6             MOVS     R0,#+166
   \   00000122   0x.... 0x....      BL       LCD_WrCmd
    126            LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
   \   00000126   0x20A8             MOVS     R0,#+168
   \   00000128   0x.... 0x....      BL       LCD_WrCmd
    127            LCD_WrCmd(0x3f);//--1/64 duty
   \   0000012C   0x203F             MOVS     R0,#+63
   \   0000012E   0x.... 0x....      BL       LCD_WrCmd
    128            LCD_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
   \   00000132   0x20D3             MOVS     R0,#+211
   \   00000134   0x.... 0x....      BL       LCD_WrCmd
    129            LCD_WrCmd(0x00);//-not offset
   \   00000138   0x2000             MOVS     R0,#+0
   \   0000013A   0x.... 0x....      BL       LCD_WrCmd
    130            LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
   \   0000013E   0x20D5             MOVS     R0,#+213
   \   00000140   0x.... 0x....      BL       LCD_WrCmd
    131            LCD_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
   \   00000144   0x2080             MOVS     R0,#+128
   \   00000146   0x.... 0x....      BL       LCD_WrCmd
    132            LCD_WrCmd(0xd9);//--set pre-charge period
   \   0000014A   0x20D9             MOVS     R0,#+217
   \   0000014C   0x.... 0x....      BL       LCD_WrCmd
    133            LCD_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
   \   00000150   0x20F1             MOVS     R0,#+241
   \   00000152   0x.... 0x....      BL       LCD_WrCmd
    134            LCD_WrCmd(0xda);//--set com pins hardware configuration
   \   00000156   0x20DA             MOVS     R0,#+218
   \   00000158   0x.... 0x....      BL       LCD_WrCmd
    135            LCD_WrCmd(0x12);
   \   0000015C   0x2012             MOVS     R0,#+18
   \   0000015E   0x.... 0x....      BL       LCD_WrCmd
    136            LCD_WrCmd(0xdb);//--set vcomh
   \   00000162   0x20DB             MOVS     R0,#+219
   \   00000164   0x.... 0x....      BL       LCD_WrCmd
    137            LCD_WrCmd(0x40);//Set VCOM Deselect Level
   \   00000168   0x2040             MOVS     R0,#+64
   \   0000016A   0x.... 0x....      BL       LCD_WrCmd
    138            LCD_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
   \   0000016E   0x2020             MOVS     R0,#+32
   \   00000170   0x.... 0x....      BL       LCD_WrCmd
    139            LCD_WrCmd(0x02);//
   \   00000174   0x2002             MOVS     R0,#+2
   \   00000176   0x.... 0x....      BL       LCD_WrCmd
    140            LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
   \   0000017A   0x208D             MOVS     R0,#+141
   \   0000017C   0x.... 0x....      BL       LCD_WrCmd
    141            LCD_WrCmd(0x14);//--set(0x10) disable
   \   00000180   0x2014             MOVS     R0,#+20
   \   00000182   0x.... 0x....      BL       LCD_WrCmd
    142            LCD_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
   \   00000186   0x20A4             MOVS     R0,#+164
   \   00000188   0x.... 0x....      BL       LCD_WrCmd
    143            LCD_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
   \   0000018C   0x20A6             MOVS     R0,#+166
   \   0000018E   0x.... 0x....      BL       LCD_WrCmd
    144            LCD_WrCmd(0xaf);//--turn on oled panel
   \   00000192   0x20AF             MOVS     R0,#+175
   \   00000194   0x.... 0x....      BL       LCD_WrCmd
    145            LCD_Fill(0x00);  //初始清屏
   \   00000198   0x2000             MOVS     R0,#+0
   \   0000019A   0x.... 0x....      BL       LCD_Fill
    146            LCD_Set_Pos(0,0);  
   \   0000019E   0x2100             MOVS     R1,#+0
   \   000001A0   0x2000             MOVS     R0,#+0
   \   000001A2   0x.... 0x....      BL       LCD_Set_Pos
    147          	
    148          } 
   \   000001A6   0xBD01             POP      {R0,PC}          ;; return
    149          //==============================================================
    150          //函数名： void LCD_PutPixel(uint8 x,uint8 y)
    151          //功能描述：绘制一个点（x,y）
    152          //参数：真实坐标值(x,y),x的范围0～127，y的范围0～63
    153          //返回：无
    154          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    155          void LCD_PutPixel(uint8 x,uint8 y)
    156          {
   \                     LCD_PutPixel: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    157          	uint8 data1;  //data1当前点的数据 
    158          	data1 = 0x01<<(y%8); 	
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x2208             MOVS     R2,#+8
   \   0000000A   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   0000000E   0xFB03 0x1312      MLS      R3,R3,R2,R1
   \   00000012   0xFA10 0xF503      LSLS     R5,R0,R3
    159          	LCD_WrCmd(0xb0+(y>>3));//设置页号，y右移3位相当于除以8，即由行号得出页号
   \   00000016   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   0x08C8             LSRS     R0,R1,#+3
   \   0000001A   0x3850             SUBS     R0,R0,#+80
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x.... 0x....      BL       LCD_WrCmd
    160          	LCD_WrCmd(((x&0xf0)>>4)|0x10);//设置列号的高4位
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x0920             LSRS     R0,R4,#+4
   \   00000026   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       LCD_WrCmd
    161          	LCD_WrCmd(x&0x0f);//设置列号的低4位
   \   00000030   0xF014 0x000F      ANDS     R0,R4,#0xF
   \   00000034   0x.... 0x....      BL       LCD_WrCmd
    162          	LCD_WrDat(data1); 	 	
   \   00000038   0x0028             MOVS     R0,R5
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x.... 0x....      BL       LCD_WrDat
    163          }
   \   00000040   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    164          //==============================================================
    165          //函数名： void LCD_PutPagePixel(uint8 x,uint8 y,uint8 data1)
    166          //功能描述：填充一个扇区（x,y）
    167          //参数：真实坐标值(x,y),x的范围0～127，y的范围0～63
    168          //返回：无
    169          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    170          void LCD_PutPagePixel(uint8 x,uint8 y,uint8 data1)
    171          { 
   \                     LCD_PutPagePixel: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    172          	LCD_WrCmd(0xb0+(y>>3));//设置页号，y右移3位相当于除以8，即由行号得出页号
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x08C8             LSRS     R0,R1,#+3
   \   0000000A   0x3850             SUBS     R0,R0,#+80
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       LCD_WrCmd
    173          	LCD_WrCmd(((x&0xf0)>>4)|0x10);//设置列号的高4位
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x0920             LSRS     R0,R4,#+4
   \   00000016   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       LCD_WrCmd
    174          	LCD_WrCmd(x&0x0f);//设置列号的低4位
   \   00000020   0xF014 0x000F      ANDS     R0,R4,#0xF
   \   00000024   0x.... 0x....      BL       LCD_WrCmd
    175          	LCD_WrDat(data1); 	 	
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       LCD_WrDat
    176          }
   \   00000030   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    177          //==============================================================
    178          //函数名： void LCD_Rectangle(uint8 x1,uint8 y1,
    179          //                   uint8 x2,uint8 y2,uint8 color,uint8 gif)
    180          //功能描述：绘制一个实心矩形
    181          //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
    182          //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
    183          //返回：无
    184          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    185          void LCD_Rectangle(uint8 x1,uint8 y1,uint8 x2,uint8 y2,uint8 gif)
    186          {
   \                     LCD_Rectangle: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x4689             MOV      R9,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    187          	uint8 n,m; 
    188          	for(m=y1;m<=y2;m++)
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
   \   0000000E   0xE01A             B.N      ??LCD_Rectangle_0
    189                  {
    190                    LCD_Set_Pos(x1,m>>3);
    191                    for(n=x1;n<=x2;n++)
    192                    {
    193          		LCD_WrDat(0x01<<(m%8)); 			
   \                     ??LCD_Rectangle_1: (+1)
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000016   0x2108             MOVS     R1,#+8
   \   00000018   0xFB99 0xF2F1      SDIV     R2,R9,R1
   \   0000001C   0xFB02 0x9211      MLS      R2,R2,R1,R9
   \   00000020   0x4090             LSLS     R0,R0,R2
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x.... 0x....      BL       LCD_WrDat
    194          		if(gif == 1) 	 
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x2C01             CMP      R4,#+1
   \   0000002C   0xD102             BNE.N    ??LCD_Rectangle_2
    195                           DELAY_MS(10); 
   \   0000002E   0x200A             MOVS     R0,#+10
   \   00000030   0x.... 0x....      BL       dwt_delay_ms
    196                    } 
   \                     ??LCD_Rectangle_2: (+1)
   \   00000034   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LCD_Rectangle_3: (+1)
   \   00000038   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000003E   0x4546             CMP      R6,R8
   \   00000040   0xD2E6             BCS.N    ??LCD_Rectangle_1
   \   00000042   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_Rectangle_0: (+1)
   \   00000046   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000048   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004C   0x454F             CMP      R7,R9
   \   0000004E   0xD309             BCC.N    ??LCD_Rectangle_4
   \   00000050   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000054   0xEA5F 0x01D9      LSRS     R1,R9,#+3
   \   00000058   0x0028             MOVS     R0,R5
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x.... 0x....      BL       LCD_Set_Pos
   \   00000060   0x46A8             MOV      R8,R5
   \   00000062   0xE7E9             B.N      ??LCD_Rectangle_3
    197                  }
    198          	
    199          }  
   \                     ??LCD_Rectangle_4: (+1)
   \   00000064   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    200          //==============================================================
    201          //函数名：LCD_P6x8Str(uint8 x,uint8 y,uint8 *p)
    202          //功能描述：写入一组标准ASCII字符串
    203          //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
    204          //返回：无
    205          //==============================================================  

   \                                 In section .text, align 2, keep-with-next
    206          void LCD_P6x8Str(uint8 x,uint8 y,uint8 ch[])
    207          {
   \                     LCD_P6x8Str: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    208            uint8 c=0,i=0,j=0;      
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
   \   00000014   0xE014             B.N      ??LCD_P6x8Str_0
    209            while (ch[j]!='\0')
    210            {    
    211              c =ch[j]-32;
    212              if(x>126){x=0;y++;}
    213              LCD_Set_Pos(x,y);    
    214            	for(i=0;i<6;i++)     
    215            	  LCD_WrDat(F6x8[c][i]);  
   \                     ??LCD_P6x8Str_1: (+1)
   \   00000016   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000001A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001C   0x2006             MOVS     R0,#+6
   \   0000001E   0x....             LDR.N    R1,??DataTable5_7
   \   00000020   0xFB00 0x1007      MLA      R0,R0,R7,R1
   \   00000024   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   00000028   0x.... 0x....      BL       LCD_WrDat
   \   0000002C   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LCD_P6x8Str_2: (+1)
   \   00000030   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000034   0xF1B8 0x0F06      CMP      R8,#+6
   \   00000038   0xDBED             BLT.N    ??LCD_P6x8Str_1
    216            	x+=6;
   \   0000003A   0x1DA4             ADDS     R4,R4,#+6
    217            	j++;
   \   0000003C   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_P6x8Str_0: (+1)
   \   00000040   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000044   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD013             BEQ.N    ??LCD_P6x8Str_3
   \   0000004C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000050   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   00000054   0xF1B0 0x0720      SUBS     R7,R0,#+32
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x2C7F             CMP      R4,#+127
   \   0000005C   0xDB01             BLT.N    ??LCD_P6x8Str_4
   \   0000005E   0x2400             MOVS     R4,#+0
   \   00000060   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_P6x8Str_4: (+1)
   \   00000062   0x0029             MOVS     R1,R5
   \   00000064   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000066   0x0020             MOVS     R0,R4
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0x.... 0x....      BL       LCD_Set_Pos
   \   0000006E   0xF05F 0x0800      MOVS     R8,#+0
   \   00000072   0xE7DD             B.N      ??LCD_P6x8Str_2
    218            }
    219          }
   \                     ??LCD_P6x8Str_3: (+1)
   \   00000074   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    220          //==============================================================
    221          //函数名：LCD_P8x16Str(uint8 x,uint8 y,uint8 *p)
    222          //功能描述：写入一组标准ASCII字符串
    223          //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
    224          //返回：无
    225          //==============================================================  

   \                                 In section .text, align 2, keep-with-next
    226          void LCD_P8x16Str(uint8 x,uint8 y,uint8 ch[])
    227          {
   \                     LCD_P8x16Str: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    228            uint8 c=0,i=0,j=0;
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
   \   00000014   0xE012             B.N      ??LCD_P8x16Str_0
    229                  
    230            while (ch[j]!='\0')
    231            {    
    232              c =ch[j]-32;
    233              if(x>120){x=0;y++;}
    234              LCD_Set_Pos(x,y);    
    235            	for(i=0;i<8;i++)     
    236            	  LCD_WrDat(F8X16[c*16+i]);
    237            	LCD_Set_Pos(x,y+1);    
    238            	for(i=0;i<8;i++)     
    239            	  LCD_WrDat(F8X16[c*16+i+8]);  
   \                     ??LCD_P8x16Str_1: (+1)
   \   00000016   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000018   0x0138             LSLS     R0,R7,#+4
   \   0000001A   0xFA50 0xF088      UXTAB    R0,R0,R8
   \   0000001E   0x....             LDR.N    R1,??DataTable5_8
   \   00000020   0x1840             ADDS     R0,R0,R1
   \   00000022   0x7A00             LDRB     R0,[R0, #+8]
   \   00000024   0x.... 0x....      BL       LCD_WrDat
   \   00000028   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LCD_P8x16Str_2: (+1)
   \   0000002C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000030   0xF1B8 0x0F08      CMP      R8,#+8
   \   00000034   0xDBEF             BLT.N    ??LCD_P8x16Str_1
    240            	x+=8;
   \   00000036   0x3408             ADDS     R4,R4,#+8
    241            	j++;
   \   00000038   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_P8x16Str_0: (+1)
   \   0000003C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000040   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD02B             BEQ.N    ??LCD_P8x16Str_3
   \   00000048   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004C   0xF819 0x0006      LDRB     R0,[R9, R6]
   \   00000050   0xF1B0 0x0720      SUBS     R7,R0,#+32
   \   00000054   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000056   0x2C79             CMP      R4,#+121
   \   00000058   0xDB01             BLT.N    ??LCD_P8x16Str_4
   \   0000005A   0x2400             MOVS     R4,#+0
   \   0000005C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_P8x16Str_4: (+1)
   \   0000005E   0x0029             MOVS     R1,R5
   \   00000060   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x.... 0x....      BL       LCD_Set_Pos
   \   0000006A   0xF05F 0x0800      MOVS     R8,#+0
   \   0000006E   0xE009             B.N      ??LCD_P8x16Str_5
   \                     ??LCD_P8x16Str_6: (+1)
   \   00000070   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000072   0x0138             LSLS     R0,R7,#+4
   \   00000074   0xFA50 0xF088      UXTAB    R0,R0,R8
   \   00000078   0x....             LDR.N    R1,??DataTable5_8
   \   0000007A   0x5C40             LDRB     R0,[R0, R1]
   \   0000007C   0x.... 0x....      BL       LCD_WrDat
   \   00000080   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LCD_P8x16Str_5: (+1)
   \   00000084   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000088   0xF1B8 0x0F08      CMP      R8,#+8
   \   0000008C   0xDBF0             BLT.N    ??LCD_P8x16Str_6
   \   0000008E   0x1C69             ADDS     R1,R5,#+1
   \   00000090   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000092   0x0020             MOVS     R0,R4
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x.... 0x....      BL       LCD_Set_Pos
   \   0000009A   0xF05F 0x0800      MOVS     R8,#+0
   \   0000009E   0xE7C5             B.N      ??LCD_P8x16Str_2
    242            }
    243          }
   \                     ??LCD_P8x16Str_3: (+1)
   \   000000A0   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    244          //输出汉字字符串

   \                                 In section .text, align 2, keep-with-next
    245          void LCD_P14x16Str(uint8 x,uint8 y,uint8 ch[])
    246          {
   \                     LCD_P14x16Str: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
    247          	uint8 wm=0,ii = 0;
   \   0000000A   0xF05F 0x0900      MOVS     R9,#+0
   \   0000000E   0x2700             MOVS     R7,#+0
    248          	uint16 adder=1; 
   \   00000010   0xF05F 0x0801      MOVS     R8,#+1
   \   00000014   0xE00B             B.N      ??LCD_P14x16Str_0
    249          	
    250          	while(ch[ii] != '\0')
    251          	{
    252            	wm = 0;
    253            	adder = 1;
    254            	while(F14x16_Idx[wm] > 127)
    255            	{
    256            		if(F14x16_Idx[wm] == ch[ii])
    257            		{
    258            			if(F14x16_Idx[wm + 1] == ch[ii + 1])
    259            			{
    260            				adder = wm * 14;
    261            				break;
    262            			}
    263            		}
    264            		wm += 2;			
    265            	}
    266            	if(x>118){x=0;y++;}
    267            	LCD_Set_Pos(x , y); 
    268            	if(adder != 1)// 显示汉字					
    269            	{
    270            		LCD_Set_Pos(x , y);
    271            		for(wm = 0;wm < 14;wm++)               
    272            		{
    273            			LCD_WrDat(F14x16[adder]);	
    274            			adder += 1;
    275            		}      
    276            		LCD_Set_Pos(x,y + 1); 
    277            		for(wm = 0;wm < 14;wm++)          
    278            		{
    279            			LCD_WrDat(F14x16[adder]);
    280            			adder += 1;
    281            		}   		
    282            	}
    283            	else			  //显示空白字符			
    284            	{
    285            		ii += 1;
    286                LCD_Set_Pos(x,y);
    287            		for(wm = 0;wm < 16;wm++)
    288            		{
    289            				LCD_WrDat(0);
    290            		}
    291            		LCD_Set_Pos(x,y + 1);
    292            		for(wm = 0;wm < 16;wm++)
    293            		{   		
    294            				LCD_WrDat(0);	
   \                     ??LCD_P14x16Str_1: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       LCD_WrDat
    295            		}
   \   0000001C   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_P14x16Str_2: (+1)
   \   00000020   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000024   0xF1B9 0x0F10      CMP      R9,#+16
   \   00000028   0xDBF5             BLT.N    ??LCD_P14x16Str_1
    296            	}
    297            	x += 14;
   \                     ??LCD_P14x16Str_3: (+1)
   \   0000002A   0x360E             ADDS     R6,R6,#+14
    298            	ii += 2;
   \   0000002C   0x1CBF             ADDS     R7,R7,#+2
   \                     ??LCD_P14x16Str_0: (+1)
   \   0000002E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000030   0x5D78             LDRB     R0,[R7, R5]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xF000 0x8086      BEQ.W    ??LCD_P14x16Str_4
   \   00000038   0xF05F 0x0900      MOVS     R9,#+0
   \   0000003C   0xF05F 0x0801      MOVS     R8,#+1
   \   00000040   0xE001             B.N      ??LCD_P14x16Str_5
   \                     ??LCD_P14x16Str_6: (+1)
   \   00000042   0xF119 0x0902      ADDS     R9,R9,#+2
   \                     ??LCD_P14x16Str_5: (+1)
   \   00000046   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004A   0x....             LDR.N    R0,??DataTable5_9
   \   0000004C   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   00000050   0x2880             CMP      R0,#+128
   \   00000052   0xDB18             BLT.N    ??LCD_P14x16Str_7
   \   00000054   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000058   0x....             LDR.N    R0,??DataTable5_9
   \   0000005A   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   0000005E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000060   0x5D79             LDRB     R1,[R7, R5]
   \   00000062   0x4288             CMP      R0,R1
   \   00000064   0xD1ED             BNE.N    ??LCD_P14x16Str_6
   \   00000066   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000006A   0x....             LDR.N    R0,??DataTable5_9
   \   0000006C   0xEB19 0x0000      ADDS     R0,R9,R0
   \   00000070   0x7840             LDRB     R0,[R0, #+1]
   \   00000072   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000074   0x1979             ADDS     R1,R7,R5
   \   00000076   0x7849             LDRB     R1,[R1, #+1]
   \   00000078   0x4288             CMP      R0,R1
   \   0000007A   0xD1E2             BNE.N    ??LCD_P14x16Str_6
   \   0000007C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000080   0x200E             MOVS     R0,#+14
   \   00000082   0xFB19 0xF800      SMULBB   R8,R9,R0
   \                     ??LCD_P14x16Str_7: (+1)
   \   00000086   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000088   0x2E77             CMP      R6,#+119
   \   0000008A   0xDB01             BLT.N    ??LCD_P14x16Str_8
   \   0000008C   0x2600             MOVS     R6,#+0
   \   0000008E   0x1C64             ADDS     R4,R4,#+1
   \                     ??LCD_P14x16Str_8: (+1)
   \   00000090   0x0021             MOVS     R1,R4
   \   00000092   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000094   0x0030             MOVS     R0,R6
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0x.... 0x....      BL       LCD_Set_Pos
   \   0000009C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000A0   0xF1B8 0x0F01      CMP      R8,#+1
   \   000000A4   0xD031             BEQ.N    ??LCD_P14x16Str_9
   \   000000A6   0x0021             MOVS     R1,R4
   \   000000A8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000AA   0x0030             MOVS     R0,R6
   \   000000AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AE   0x.... 0x....      BL       LCD_Set_Pos
   \   000000B2   0xF05F 0x0900      MOVS     R9,#+0
   \   000000B6   0xE00A             B.N      ??LCD_P14x16Str_10
   \                     ??LCD_P14x16Str_11: (+1)
   \   000000B8   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000BC   0x....             LDR.N    R0,??DataTable5_10
   \   000000BE   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   000000C2   0x.... 0x....      BL       LCD_WrDat
   \   000000C6   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000CA   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_P14x16Str_10: (+1)
   \   000000CE   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000D2   0xF1B9 0x0F0E      CMP      R9,#+14
   \   000000D6   0xDBEF             BLT.N    ??LCD_P14x16Str_11
   \   000000D8   0x1C61             ADDS     R1,R4,#+1
   \   000000DA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000DC   0x0030             MOVS     R0,R6
   \   000000DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E0   0x.... 0x....      BL       LCD_Set_Pos
   \   000000E4   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??LCD_P14x16Str_12: (+1)
   \   000000E8   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000EC   0xF1B9 0x0F0E      CMP      R9,#+14
   \   000000F0   0xDA9B             BGE.N    ??LCD_P14x16Str_3
   \   000000F2   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000F6   0x....             LDR.N    R0,??DataTable5_10
   \   000000F8   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   000000FC   0x.... 0x....      BL       LCD_WrDat
   \   00000100   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000104   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000108   0xE7EE             B.N      ??LCD_P14x16Str_12
   \                     ??LCD_P14x16Str_9: (+1)
   \   0000010A   0x1C7F             ADDS     R7,R7,#+1
   \   0000010C   0x0021             MOVS     R1,R4
   \   0000010E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000110   0x0030             MOVS     R0,R6
   \   00000112   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000114   0x.... 0x....      BL       LCD_Set_Pos
   \   00000118   0xF05F 0x0900      MOVS     R9,#+0
   \   0000011C   0xE004             B.N      ??LCD_P14x16Str_13
   \                     ??LCD_P14x16Str_14: (+1)
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0x.... 0x....      BL       LCD_WrDat
   \   00000124   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_P14x16Str_13: (+1)
   \   00000128   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000012C   0xF1B9 0x0F10      CMP      R9,#+16
   \   00000130   0xDBF5             BLT.N    ??LCD_P14x16Str_14
   \   00000132   0x1C61             ADDS     R1,R4,#+1
   \   00000134   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000136   0x0030             MOVS     R0,R6
   \   00000138   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013A   0x.... 0x....      BL       LCD_Set_Pos
   \   0000013E   0xF05F 0x0900      MOVS     R9,#+0
   \   00000142   0xE76D             B.N      ??LCD_P14x16Str_2
    299          	}
    300          }
   \                     ??LCD_P14x16Str_4: (+1)
   \   00000144   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    301          //输出汉字和字符混合字符串

   \                                 In section .text, align 2, keep-with-next
    302          void LCD_Print(uint8 x, uint8 y, uint8 ch[])
    303          {
   \                     LCD_Print: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    304          	uint8 ch2[3];
    305          	uint8 ii=0;        
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0xE014             B.N      ??LCD_Print_0
    306          	while(ch[ii] != '\0')
    307          	{
    308          		if(ch[ii] > 127)
    309          		{
    310          			ch2[0] = ch[ii];
   \                     ??LCD_Print_1: (+1)
   \   0000000C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000000E   0x5DB8             LDRB     R0,[R7, R6]
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
    311          	 		ch2[1] = ch[ii + 1];
   \   00000014   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000016   0x19B8             ADDS     R0,R7,R6
   \   00000018   0x7840             LDRB     R0,[R0, #+1]
   \   0000001A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    312          			ch2[2] = '\0';			//汉字为两个字节
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x0002      STRB     R0,[SP, #+2]
    313          			LCD_P14x16Str(x , y, ch2);	//显示汉字
   \   00000024   0xAA00             ADD      R2,SP,#+0
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x.... 0x....      BL       LCD_P14x16Str
    314          			x += 14;
   \   00000032   0x340E             ADDS     R4,R4,#+14
    315          			ii += 2;
   \   00000034   0x1CBF             ADDS     R7,R7,#+2
    316          		}
   \                     ??LCD_Print_0: (+1)
   \   00000036   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000038   0x5DB8             LDRB     R0,[R7, R6]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD014             BEQ.N    ??LCD_Print_2
   \   0000003E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000040   0x5DB8             LDRB     R0,[R7, R6]
   \   00000042   0x2880             CMP      R0,#+128
   \   00000044   0xDAE2             BGE.N    ??LCD_Print_1
    317          		else
    318          		{
    319          			ch2[0] = ch[ii];	
   \   00000046   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000048   0x5DB8             LDRB     R0,[R7, R6]
   \   0000004A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    320          			ch2[1] = '\0';			//字母占一个字节
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xF88D 0x0001      STRB     R0,[SP, #+1]
    321          			LCD_P8x16Str(x , y , ch2);	//显示字母
   \   00000054   0xAA00             ADD      R2,SP,#+0
   \   00000056   0x0029             MOVS     R1,R5
   \   00000058   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x.... 0x....      BL       LCD_P8x16Str
    322          			x += 8;
   \   00000062   0x3408             ADDS     R4,R4,#+8
    323          			ii+= 1;
   \   00000064   0x1C7F             ADDS     R7,R7,#+1
   \   00000066   0xE7E6             B.N      ??LCD_Print_0
    324          		}
    325          	}
    326          } 
   \                     ??LCD_Print_2: (+1)
   \   00000068   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    327          
    328          //==============================================================
    329          //函数名： void Draw_BMP(uint8 x,uint8 y)
    330          //功能描述：显示BMP图片128×64
    331          //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
    332          //返回：无
    333          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    334          void Draw_BMP(uint8 x0,uint8 y0,uint8 x1,uint8 y1,uint8 const bmp[])
    335          { 	
   \                     Draw_BMP: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
    336            uint16 ii=0;
   \   0000000A   0x2700             MOVS     R7,#+0
    337            uint8 x,y;
    338            
    339            if(y1%8==0) y=y1/8;      
   \   0000000C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000E   0x2008             MOVS     R0,#+8
   \   00000010   0xFB96 0xF2F0      SDIV     R2,R6,R0
   \   00000014   0xFB02 0x6210      MLS      R2,R2,R0,R6
   \   00000018   0x2A00             CMP      R2,#+0
   \   0000001A   0xD104             BNE.N    ??Draw_BMP_0
   \   0000001C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001E   0x2008             MOVS     R0,#+8
   \   00000020   0xFB96 0xFAF0      SDIV     R10,R6,R0
   \   00000024   0xE005             B.N      ??Draw_BMP_1
    340            else y=y1/8+1;
   \                     ??Draw_BMP_0: (+1)
   \   00000026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   0x2008             MOVS     R0,#+8
   \   0000002A   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   0000002E   0xF110 0x0A01      ADDS     R10,R0,#+1
    341          	
    342            for(y=y0;y<=y1;y++)
   \                     ??Draw_BMP_1: (+1)
   \   00000032   0x468A             MOV      R10,R1
   \   00000034   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   \   00000038   0xE00E             B.N      ??Draw_BMP_2
    343            {
    344              LCD_Set_Pos(x0,y);				
    345              for(x=x0;x<=x1;x++)
    346              {  
    347                LCD_WrDat(bmp[ii++]);	    	
   \                     ??Draw_BMP_3: (+1)
   \   0000003A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000003C   0xF817 0x0008      LDRB     R0,[R7, R8]
   \   00000040   0x.... 0x....      BL       LCD_WrDat
   \   00000044   0x1C7F             ADDS     R7,R7,#+1
    348              }
   \   00000046   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??Draw_BMP_4: (+1)
   \   0000004A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000050   0x454D             CMP      R5,R9
   \   00000052   0xD2F2             BCS.N    ??Draw_BMP_3
   \   00000054   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \                     ??Draw_BMP_2: (+1)
   \   00000058   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000005E   0x4556             CMP      R6,R10
   \   00000060   0xD307             BCC.N    ??Draw_BMP_5
   \   00000062   0x4651             MOV      R1,R10
   \   00000064   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000066   0x0020             MOVS     R0,R4
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0x.... 0x....      BL       LCD_Set_Pos
   \   0000006E   0x46A1             MOV      R9,R4
   \   00000070   0xE7EB             B.N      ??Draw_BMP_4
    349            }
    350          }
   \                     ??Draw_BMP_5: (+1)
   \   00000072   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x4004B04C         DC32     0x4004b04c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x4004B048         DC32     0x4004b048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x4004B044         DC32     0x4004b044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x4004B040         DC32     0x4004b040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x400FF094         DC32     0x400ff094

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     F6x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     F8X16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     F14x16_Idx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     F14x16

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   Draw_BMP
        32   -> LCD_Set_Pos
        32   -> LCD_WrDat
      16   LCD_CLS
        16   -> LCD_WrCmd
        16   -> LCD_WrDat
      16   LCD_Fill
        16   -> LCD_WrCmd
        16   -> LCD_WrDat
       8   LCD_Init
         8   -> LCD_Fill
         8   -> LCD_Set_Pos
         8   -> LCD_WrCmd
      32   LCD_P14x16Str
        32   -> LCD_Set_Pos
        32   -> LCD_WrDat
      32   LCD_P6x8Str
        32   -> LCD_Set_Pos
        32   -> LCD_WrDat
      32   LCD_P8x16Str
        32   -> LCD_Set_Pos
        32   -> LCD_WrDat
      24   LCD_Print
        24   -> LCD_P14x16Str
        24   -> LCD_P8x16Str
      16   LCD_PutPagePixel
        16   -> LCD_WrCmd
        16   -> LCD_WrDat
      16   LCD_PutPixel
        16   -> LCD_WrCmd
        16   -> LCD_WrDat
      32   LCD_Rectangle
        32   -> LCD_Set_Pos
        32   -> LCD_WrDat
        32   -> dwt_delay_ms
       8   LCD_Set_Pos
         8   -> LCD_WrCmd
       0   LCD_WrCmd
       0   LCD_WrDat


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
     118  Draw_BMP
      56  LCD_CLS
      60  LCD_Fill
     424  LCD_Init
     328  LCD_P14x16Str
     120  LCD_P6x8Str
     164  LCD_P8x16Str
     106  LCD_Print
      50  LCD_PutPagePixel
      66  LCD_PutPixel
     104  LCD_Rectangle
      44  LCD_Set_Pos
     120  LCD_WrCmd
     120  LCD_WrDat
       8  OLED

 
     8 bytes in section .bss
 1 924 bytes in section .text
 
 1 924 bytes of CODE memory
     8 bytes of DATA memory

Errors: none
Warnings: 1
