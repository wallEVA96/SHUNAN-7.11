###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      03/Sep/2014  20:50:19 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\创作室\飞思卡尔智能小车\调试板\遥控器\ShunAn_Panel\GU #
#                    I.c                                                      #
#    Command line =  D:\创作室\飞思卡尔智能小车\调试板\遥控器\ShunAn_Panel\GU #
#                    I.c -D IAR -D TWR_K60F120M -lCN                          #
#                    D:\创作室\飞思卡尔智能小车\调试板\遥控器\RAM_128KB\List\ #
#                     -lB D:\创作室\飞思卡尔智能小车\调试板\遥控器\RAM_128KB\ #
#                    List\ -o D:\创作室\飞思卡尔智能小车\调试板\遥控器\RAM_12 #
#                    8KB\Obj\ --no_cse --no_unroll --no_inline                #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I D:\创作室\飞思卡尔智能小车\调试板\遥控器\ -I   #
#                    D:\创作室\飞思卡尔智能小车\调试板\遥控器\Library\ -I     #
#                    D:\创作室\飞思卡尔智能小车\调试板\遥控器\Library\Blessed #
#                    Alien\ -I D:\创作室\飞思卡尔智能小车\调试板\遥控器\ShunA #
#                    n_Panel\ -Ol --use_c++_inline                            #
#    List file    =  D:\创作室\飞思卡尔智能小车\调试板\遥控器\RAM_128KB\List\ #
#                    GUI.lst                                                  #
#    Object file  =  D:\创作室\飞思卡尔智能小车\调试板\遥控器\RAM_128KB\Obj\G #
#                    UI.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\创作室\飞思卡尔智能小车\调试板\遥控器\ShunAn_Panel\GUI.c
      1          #include "arm_cm4.h"
      2          #include "MK60F15.h"
      3          #include "ShunAn_Lib.h"
      4          #include "start_ShunAn.h"
      5          #include "BlessedAlien.h"
      6          #include "TFT.h"
      7          #include "BIOS.h"
      8          #include "GUI.h"
      9          #include "ControlPads.h"
     10          

   \                                 In section .text, align 2, keep-with-next
     11          uint8 (_v_Idle)(s_Control **In){return 0;}
   \                     _v_Idle: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     12          /******************************************************************************/
     13          /******************************************************************************/
     14          /******************************************************************************/
     15          /******************************************************************************/
     16          /******************************************************************************/
     17          // 按钮绘制函数

   \                                 In section .text, align 2, keep-with-next
     18          uint8 _v_Cmd_Idle ( s_Control ** gui_Input )
     19          {
   \                     _v_Cmd_Idle: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     20              uint16 BackColor = ((_s_GUI_Window * )((*gui_Input)->Father->Name))->Color;
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x68C9             LDR      R1,[R1, #+12]
   \   00000006   0x6889             LDR      R1,[R1, #+8]
   \   00000008   0x890C             LDRH     R4,[R1, #+8]
     21              _s_GUI_Cmd * gui = (_s_GUI_Cmd *)((*gui_Input)->Name);
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x6885             LDR      R5,[R0, #+8]
     22              LCD_SetPath(0);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       LCD_SetPath
     23              uint16 X_font = gui->Position.x + gui->Position.width + 1;
   \   00000014   0x8828             LDRH     R0,[R5, #+0]
   \   00000016   0x88A9             LDRH     R1,[R5, #+4]
   \   00000018   0x1808             ADDS     R0,R1,R0
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
     24              uint16 Y_font = gui->Position.y + ((gui->Position.height-8)/2);
   \   0000001C   0x8869             LDRH     R1,[R5, #+2]
   \   0000001E   0x88EA             LDRH     R2,[R5, #+6]
   \   00000020   0x3A08             SUBS     R2,R2,#+8
   \   00000022   0x2302             MOVS     R3,#+2
   \   00000024   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   00000028   0x1851             ADDS     R1,R2,R1
     25              v_BIOS_6x8str_Ascii(X_font,
     26                                  Y_font,
     27                                  gui->Color.fontColor,
     28                                  BackColor,
     29                                  "  ");
   \   0000002A   0x....             ADR.N    R2,??DataTable2  ;; 0x20, 0x20, 0x00, 0x00
   \   0000002C   0x9200             STR      R2,[SP, #+0]
   \   0000002E   0x0023             MOVS     R3,R4
   \   00000030   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000032   0x892A             LDRH     R2,[R5, #+8]
   \   00000034   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000036   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000038   0x.... 0x....      BL       v_BIOS_6x8str_Ascii
     30              return 0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     31          }

   \                                 In section .text, align 2, keep-with-next
     32          uint8 _v_Cmd_OnPend ( s_Control ** gui_Input )
     33          {
   \                     _v_Cmd_OnPend: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     34              uint16 BackColor = ((_s_GUI_Window * )((*gui_Input)->Father->Name))->Color;
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x68C9             LDR      R1,[R1, #+12]
   \   00000006   0x6889             LDR      R1,[R1, #+8]
   \   00000008   0x890C             LDRH     R4,[R1, #+8]
     35              _s_GUI_Cmd * gui = (_s_GUI_Cmd *)((*gui_Input)->Name);
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x6885             LDR      R5,[R0, #+8]
     36              LCD_SetPath(0);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       LCD_SetPath
     37              uint16 X_font = gui->Position.x + gui->Position.width + 1;
   \   00000014   0x8828             LDRH     R0,[R5, #+0]
   \   00000016   0x88A9             LDRH     R1,[R5, #+4]
   \   00000018   0x1808             ADDS     R0,R1,R0
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
     38              uint16 Y_font = gui->Position.y + ((gui->Position.height-8)/2);
   \   0000001C   0x8869             LDRH     R1,[R5, #+2]
   \   0000001E   0x88EA             LDRH     R2,[R5, #+6]
   \   00000020   0x3A08             SUBS     R2,R2,#+8
   \   00000022   0x2302             MOVS     R3,#+2
   \   00000024   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   00000028   0x1851             ADDS     R1,R2,R1
     39              v_BIOS_6x8str_Ascii(X_font,
     40                                  Y_font,
     41                                  gui->Color.fontColor,
     42                                  BackColor,
     43                                  "<=");
   \   0000002A   0x....             ADR.N    R2,??DataTable2_1  ;; 0x3C, 0x3D, 0x00, 0x00
   \   0000002C   0x9200             STR      R2,[SP, #+0]
   \   0000002E   0x0023             MOVS     R3,R4
   \   00000030   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000032   0x892A             LDRH     R2,[R5, #+8]
   \   00000034   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000036   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000038   0x.... 0x....      BL       v_BIOS_6x8str_Ascii
     44              return 0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     45          }

   \                                 In section .text, align 2, keep-with-next
     46          uint8 _v_Cmd_Create ( s_Control ** gui_Input )
     47          {
   \                     _v_Cmd_Create: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     48              uint16 BackColor = Black;
   \   00000004   0x2400             MOVS     R4,#+0
     49              if(0 != (*gui_Input)->Father)
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x68C9             LDR      R1,[R1, #+12]
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD003             BEQ.N    ??_v_Cmd_Create_0
     50              {BackColor = ((_s_GUI_Window * )((*gui_Input)->Father->Name))->Color;}//((_s_GUI_Window * )(gui_Input->Father))->Color;
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0x68C9             LDR      R1,[R1, #+12]
   \   00000012   0x6889             LDR      R1,[R1, #+8]
   \   00000014   0x890C             LDRH     R4,[R1, #+8]
     51              _s_GUI_Cmd * gui = (_s_GUI_Cmd *)((*gui_Input)->Name);
   \                     ??_v_Cmd_Create_0: (+1)
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x6885             LDR      R5,[R0, #+8]
     52              LCD_SetSquare(gui->Position.x,
     53                            gui->Position.y,
     54                            gui->Position.width,
     55                            gui->Position.height,
     56                            gui->Color.FrameColor);
   \   0000001A   0x8968             LDRH     R0,[R5, #+10]
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x88EB             LDRH     R3,[R5, #+6]
   \   00000020   0x88AA             LDRH     R2,[R5, #+4]
   \   00000022   0x8869             LDRH     R1,[R5, #+2]
   \   00000024   0x8828             LDRH     R0,[R5, #+0]
   \   00000026   0x.... 0x....      BL       LCD_SetSquare
     57              LCD_SetPath(0);
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       LCD_SetPath
     58              LCD_SetLine(gui->Position.x + 3,
     59                          gui->Position.y,
     60                          gui->Position.height,
     61                          gui->Color.FrameColor);
   \   00000030   0x896B             LDRH     R3,[R5, #+10]
   \   00000032   0x88EA             LDRH     R2,[R5, #+6]
   \   00000034   0x8869             LDRH     R1,[R5, #+2]
   \   00000036   0x8828             LDRH     R0,[R5, #+0]
   \   00000038   0x1CC0             ADDS     R0,R0,#+3
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0x.... 0x....      BL       LCD_SetLine
     62              LCD_SetLine(gui->Position.x + gui->Position.width - 3,
     63                          gui->Position.y,
     64                          gui->Position.height,
     65                          gui->Color.FrameColor);
   \   00000040   0x896B             LDRH     R3,[R5, #+10]
   \   00000042   0x88EA             LDRH     R2,[R5, #+6]
   \   00000044   0x8869             LDRH     R1,[R5, #+2]
   \   00000046   0x8828             LDRH     R0,[R5, #+0]
   \   00000048   0x88AE             LDRH     R6,[R5, #+4]
   \   0000004A   0x1830             ADDS     R0,R6,R0
   \   0000004C   0x1EC0             SUBS     R0,R0,#+3
   \   0000004E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000050   0x.... 0x....      BL       LCD_SetLine
     66              // 绘制 文字
     67              if(0 == gui->Text.Long)
   \   00000054   0x7B68             LDRB     R0,[R5, #+13]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD10F             BNE.N    ??_v_Cmd_Create_1
     68              {
     69                  uint8 fontNumber = 0;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xE001             B.N      ??_v_Cmd_Create_2
     70                  while('\0' != gui->Text.Content[fontNumber])
     71                  {
     72                      if(fontNumber > 50)
     73                      {
     74                          gui->Text.Content = "";
     75                          gui->Text.Long = 0;
     76                          break;
     77                      }
     78                      fontNumber++;
   \                     ??_v_Cmd_Create_3: (+1)
   \   0000005E   0x1C40             ADDS     R0,R0,#+1
     79                      gui->Text.Long = fontNumber;
   \   00000060   0x7368             STRB     R0,[R5, #+13]
   \                     ??_v_Cmd_Create_2: (+1)
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x6929             LDR      R1,[R5, #+16]
   \   00000066   0x5C41             LDRB     R1,[R0, R1]
   \   00000068   0x2900             CMP      R1,#+0
   \   0000006A   0xD006             BEQ.N    ??_v_Cmd_Create_1
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x2833             CMP      R0,#+51
   \   00000070   0xDBF5             BLT.N    ??_v_Cmd_Create_3
   \   00000072   0x....             ADR.N    R0,??DataTable2_2  ;; ""
   \   00000074   0x6128             STR      R0,[R5, #+16]
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x7368             STRB     R0,[R5, #+13]
     80                  }
     81              }
     82              {
     83                  uint16 X_font = 0;uint16 Y_font = 0;
   \                     ??_v_Cmd_Create_1: (+1)
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x2100             MOVS     R1,#+0
     84                  switch(gui->Text.Style&0x03)
   \   0000007E   0x7B2A             LDRB     R2,[R5, #+12]
   \   00000080   0xF012 0x0203      ANDS     R2,R2,#0x3
   \   00000084   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000086   0x2A00             CMP      R2,#+0
   \   00000088   0xD004             BEQ.N    ??_v_Cmd_Create_4
   \   0000008A   0x2A02             CMP      R2,#+2
   \   0000008C   0xD00D             BEQ.N    ??_v_Cmd_Create_5
   \   0000008E   0xD309             BCC.N    ??_v_Cmd_Create_6
   \   00000090   0x2A03             CMP      R2,#+3
   \   00000092   0xD10E             BNE.N    ??_v_Cmd_Create_7
     85                  {
     86                      case 3:
     87                      case 0:
     88                          Y_font = gui->Position.y + ((gui->Position.height-8)/2);
   \                     ??_v_Cmd_Create_4: (+1)
   \   00000094   0x8869             LDRH     R1,[R5, #+2]
   \   00000096   0x88EA             LDRH     R2,[R5, #+6]
   \   00000098   0x3A08             SUBS     R2,R2,#+8
   \   0000009A   0x2302             MOVS     R3,#+2
   \   0000009C   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000000A0   0x1851             ADDS     R1,R2,R1
     89                      break;
   \   000000A2   0xE006             B.N      ??_v_Cmd_Create_7
     90                      case 1:
     91                          Y_font = gui->Position.y + 1;
   \                     ??_v_Cmd_Create_6: (+1)
   \   000000A4   0x8869             LDRH     R1,[R5, #+2]
   \   000000A6   0x1C49             ADDS     R1,R1,#+1
     92                      break;
   \   000000A8   0xE003             B.N      ??_v_Cmd_Create_7
     93                      case 2:
     94                          Y_font = gui->Position.y + (gui->Position.height-8);
   \                     ??_v_Cmd_Create_5: (+1)
   \   000000AA   0x8869             LDRH     R1,[R5, #+2]
   \   000000AC   0x88EA             LDRH     R2,[R5, #+6]
   \   000000AE   0x1851             ADDS     R1,R2,R1
   \   000000B0   0x3908             SUBS     R1,R1,#+8
     95                      break;
     96                  }
     97                  switch((gui->Text.Style&0x0C)>>2)
   \                     ??_v_Cmd_Create_7: (+1)
   \   000000B2   0x7B2A             LDRB     R2,[R5, #+12]
   \   000000B4   0xF3C2 0x0281      UBFX     R2,R2,#+2,#+2
   \   000000B8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000BA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000BC   0x2A00             CMP      R2,#+0
   \   000000BE   0xD004             BEQ.N    ??_v_Cmd_Create_8
   \   000000C0   0x2A02             CMP      R2,#+2
   \   000000C2   0xD00D             BEQ.N    ??_v_Cmd_Create_9
   \   000000C4   0xD30F             BCC.N    ??_v_Cmd_Create_10
   \   000000C6   0x2A03             CMP      R2,#+3
   \   000000C8   0xD115             BNE.N    ??_v_Cmd_Create_11
     98                  {
     99                      case 3:
    100                      case 0:
    101                          X_font = gui->Position.x + ((gui->Position.width-6*gui->Text.Long)/2);
   \                     ??_v_Cmd_Create_8: (+1)
   \   000000CA   0x8828             LDRH     R0,[R5, #+0]
   \   000000CC   0x88AA             LDRH     R2,[R5, #+4]
   \   000000CE   0x7B6B             LDRB     R3,[R5, #+13]
   \   000000D0   0x2606             MOVS     R6,#+6
   \   000000D2   0xFB06 0x2213      MLS      R2,R6,R3,R2
   \   000000D6   0x2302             MOVS     R3,#+2
   \   000000D8   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000000DC   0x1810             ADDS     R0,R2,R0
    102                      break;
   \   000000DE   0xE00A             B.N      ??_v_Cmd_Create_11
    103                      case 2:
    104                          X_font = gui->Position.x + 1;
   \                     ??_v_Cmd_Create_9: (+1)
   \   000000E0   0x8828             LDRH     R0,[R5, #+0]
   \   000000E2   0x1C40             ADDS     R0,R0,#+1
    105                      break;
   \   000000E4   0xE007             B.N      ??_v_Cmd_Create_11
    106                      case 1:
    107                          X_font = gui->Position.x + (gui->Position.width-6*gui->Text.Long);
   \                     ??_v_Cmd_Create_10: (+1)
   \   000000E6   0x8828             LDRH     R0,[R5, #+0]
   \   000000E8   0x88AA             LDRH     R2,[R5, #+4]
   \   000000EA   0xFA12 0xF080      UXTAH    R0,R2,R0
   \   000000EE   0x7B6A             LDRB     R2,[R5, #+13]
   \   000000F0   0x2306             MOVS     R3,#+6
   \   000000F2   0xFB03 0x0012      MLS      R0,R3,R2,R0
    108                      break;
    109                  }
    110                  uint16 show_fontColor = gui->Color.fontColor;
   \                     ??_v_Cmd_Create_11: (+1)
   \   000000F6   0x892A             LDRH     R2,[R5, #+8]
    111                  v_BIOS_6x8str_Ascii(X_font,
    112                                      Y_font,
    113                                      show_fontColor,
    114                                      BackColor,
    115                                      gui->Text.Content);
   \   000000F8   0x692B             LDR      R3,[R5, #+16]
   \   000000FA   0x9300             STR      R3,[SP, #+0]
   \   000000FC   0x0023             MOVS     R3,R4
   \   000000FE   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000100   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000102   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000104   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000106   0x.... 0x....      BL       v_BIOS_6x8str_Ascii
    116              }
    117              return 0;
   \   0000010A   0x2000             MOVS     R0,#+0
   \   0000010C   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    118          }
    119          
    120          
    121          /******************************************************************************/
    122          /******************************************************************************/
    123          /******************************************************************************/
    124          /******************************************************************************/
    125          /******************************************************************************/
    126          // 坐标系控件（一条线）

   \                                 In section .text, align 2, keep-with-next
    127          uint8 (_v_Axis_Create)( void * target_axis_Input ) // 参数修改函数
    128          {
   \                     _v_Axis_Create: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    129              _s_GUI_Axis * target_axis = (_s_GUI_Axis *)(((s_Control*)target_axis_Input)->Name);
   \   00000004   0x6884             LDR      R4,[R0, #+8]
    130              // 绘制箭头
    131              if(0 == target_axis->Position.angle) // 角度为零，以x方向为正方向
   \   00000006   0x88A0             LDRH     R0,[R4, #+4]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD142             BNE.N    ??_v_Axis_Create_0
    132              {
    133                  LCD_SetPath(4); // 设定方向
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0x.... 0x....      BL       LCD_SetPath
    134                  LCD_SetArrow(target_axis->Position.start_x,
    135                               target_axis->Position.start_y,
    136                               3,
    137                               target_axis->Color.axisColor); // ++
   \   00000012   0x8923             LDRH     R3,[R4, #+8]
   \   00000014   0x2203             MOVS     R2,#+3
   \   00000016   0x8861             LDRH     R1,[R4, #+2]
   \   00000018   0x8820             LDRH     R0,[R4, #+0]
   \   0000001A   0x.... 0x....      BL       LCD_SetArrow
    138                  LCD_SetArrow(target_axis->Position.start_x,
    139                               target_axis->Position.start_y,
    140                               2,
    141                               target_axis->Color.axisColor); // +-
   \   0000001E   0x8923             LDRH     R3,[R4, #+8]
   \   00000020   0x2202             MOVS     R2,#+2
   \   00000022   0x8861             LDRH     R1,[R4, #+2]
   \   00000024   0x8820             LDRH     R0,[R4, #+0]
   \   00000026   0x.... 0x....      BL       LCD_SetArrow
    142              }
    143              else if(90 == target_axis->Position.angle)
    144              {
    145                  LCD_SetPath(1);
    146                  LCD_SetArrow(target_axis->Position.start_x,
    147                               target_axis->Position.start_y,
    148                               1,
    149                               target_axis->Color.axisColor); // -+
    150                  LCD_SetArrow(target_axis->Position.start_x,
    151                               target_axis->Position.start_y,
    152                               3,
    153                               target_axis->Color.axisColor); // ++
    154              }
    155              else if(180 == target_axis->Position.angle)
    156              {
    157                  LCD_SetPath(6);
    158                  LCD_SetArrow(target_axis->Position.start_x,
    159                               target_axis->Position.start_y,
    160                               0,
    161                               target_axis->Color.axisColor); // --
    162                  LCD_SetArrow(target_axis->Position.start_x,
    163                               target_axis->Position.start_y,
    164                               1,
    165                               target_axis->Color.axisColor); // -+
    166              }
    167              else if(270 == target_axis->Position.angle)
    168              {
    169                  LCD_SetPath(3);
    170                  LCD_SetArrow(target_axis->Position.start_x,
    171                               target_axis->Position.start_y,
    172                               2,
    173                               target_axis->Color.axisColor); // +-
    174                  LCD_SetArrow(target_axis->Position.start_x,
    175                               target_axis->Position.start_y,
    176                               0,
    177                               target_axis->Color.axisColor); // --
    178              }
    179              else
    180              {
    181                  v_error_axis();return 0xFA;
    182              }
    183              // 绘制直线
    184              LCD_SetLine(target_axis->Position.start_x,
    185                          target_axis->Position.start_y,
    186                          target_axis->Position.width,
    187                          target_axis->Color.axisColor
    188                          );
   \                     ??_v_Axis_Create_1: (+1)
   \   0000002A   0x8923             LDRH     R3,[R4, #+8]
   \   0000002C   0x88E2             LDRH     R2,[R4, #+6]
   \   0000002E   0x8861             LDRH     R1,[R4, #+2]
   \   00000030   0x8820             LDRH     R0,[R4, #+0]
   \   00000032   0x.... 0x....      BL       LCD_SetLine
    189              // 绘制坐标格与数字
    190              if(0 != target_axis->Scale.minScale) // 当最小量程为0时不绘制
   \   00000036   0x69A0             LDR      R0,[R4, #+24]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xF000 0x812C      BEQ.W    ??_v_Axis_Create_2
    191              {
    192                  float Step_K = ((float)(target_axis->Scale.max - target_axis->Scale.zero) // 缩小系数K
    193                                 / (float)target_axis->Position.width);
   \   0000003E   0x6960             LDR      R0,[R4, #+20]
   \   00000040   0x6921             LDR      R1,[R4, #+16]
   \   00000042   0x1A40             SUBS     R0,R0,R1
   \   00000044   0x.... 0x....      BL       __aeabi_i2f
   \   00000048   0x0005             MOVS     R5,R0
   \   0000004A   0x88E0             LDRH     R0,[R4, #+6]
   \   0000004C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000050   0x0001             MOVS     R1,R0
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0x.... 0x....      BL       __aeabi_fdiv
   \   00000058   0x0005             MOVS     R5,R0
    194                  target_axis->Scale.K = Step_K;
   \   0000005A   0x61E5             STR      R5,[R4, #+28]
    195                  uint16 Line_Counter = (target_axis->Scale.max - target_axis->Scale.zero)
    196                                       / target_axis->Scale.minScale; // 计算最小量程数量
   \   0000005C   0x6960             LDR      R0,[R4, #+20]
   \   0000005E   0x6921             LDR      R1,[R4, #+16]
   \   00000060   0x1A40             SUBS     R0,R0,R1
   \   00000062   0x69A1             LDR      R1,[R4, #+24]
   \   00000064   0xFBB0 0xF6F1      UDIV     R6,R0,R1
    197                  if((target_axis->Scale.max - target_axis->Scale.zero) != Line_Counter*target_axis->Scale.minScale )
   \   00000068   0x6960             LDR      R0,[R4, #+20]
   \   0000006A   0x6921             LDR      R1,[R4, #+16]
   \   0000006C   0x1A40             SUBS     R0,R0,R1
   \   0000006E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000070   0x69A1             LDR      R1,[R4, #+24]
   \   00000072   0xFB01 0xF106      MUL      R1,R1,R6
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xD000             BEQ.N    ??_v_Axis_Create_3
    198                  {
    199                      Line_Counter ++;
   \   0000007A   0x1C76             ADDS     R6,R6,#+1
    200                  }
    201                  uint32 minScaleInK = (uint32)(target_axis->Scale.minScale/Step_K);
   \                     ??_v_Axis_Create_3: (+1)
   \   0000007C   0x69A0             LDR      R0,[R4, #+24]
   \   0000007E   0x.... 0x....      BL       __aeabi_ui2f
   \   00000082   0x0029             MOVS     R1,R5
   \   00000084   0x.... 0x....      BL       __aeabi_fdiv
   \   00000088   0x.... 0x....      BL       __aeabi_f2uiz
   \   0000008C   0x0005             MOVS     R5,R0
    202                  for(uint16 loop = 0;loop < Line_Counter;loop++)
   \   0000008E   0x2700             MOVS     R7,#+0
   \   00000090   0xE067             B.N      ??_v_Axis_Create_4
   \                     ??_v_Axis_Create_0: (+1)
   \   00000092   0x88A0             LDRH     R0,[R4, #+4]
   \   00000094   0x285A             CMP      R0,#+90
   \   00000096   0xD10F             BNE.N    ??_v_Axis_Create_5
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x.... 0x....      BL       LCD_SetPath
   \   0000009E   0x8923             LDRH     R3,[R4, #+8]
   \   000000A0   0x2201             MOVS     R2,#+1
   \   000000A2   0x8861             LDRH     R1,[R4, #+2]
   \   000000A4   0x8820             LDRH     R0,[R4, #+0]
   \   000000A6   0x.... 0x....      BL       LCD_SetArrow
   \   000000AA   0x8923             LDRH     R3,[R4, #+8]
   \   000000AC   0x2203             MOVS     R2,#+3
   \   000000AE   0x8861             LDRH     R1,[R4, #+2]
   \   000000B0   0x8820             LDRH     R0,[R4, #+0]
   \   000000B2   0x.... 0x....      BL       LCD_SetArrow
   \   000000B6   0xE7B8             B.N      ??_v_Axis_Create_1
   \                     ??_v_Axis_Create_5: (+1)
   \   000000B8   0x88A0             LDRH     R0,[R4, #+4]
   \   000000BA   0x28B4             CMP      R0,#+180
   \   000000BC   0xD10F             BNE.N    ??_v_Axis_Create_6
   \   000000BE   0x2006             MOVS     R0,#+6
   \   000000C0   0x.... 0x....      BL       LCD_SetPath
   \   000000C4   0x8923             LDRH     R3,[R4, #+8]
   \   000000C6   0x2200             MOVS     R2,#+0
   \   000000C8   0x8861             LDRH     R1,[R4, #+2]
   \   000000CA   0x8820             LDRH     R0,[R4, #+0]
   \   000000CC   0x.... 0x....      BL       LCD_SetArrow
   \   000000D0   0x8923             LDRH     R3,[R4, #+8]
   \   000000D2   0x2201             MOVS     R2,#+1
   \   000000D4   0x8861             LDRH     R1,[R4, #+2]
   \   000000D6   0x8820             LDRH     R0,[R4, #+0]
   \   000000D8   0x.... 0x....      BL       LCD_SetArrow
   \   000000DC   0xE7A5             B.N      ??_v_Axis_Create_1
   \                     ??_v_Axis_Create_6: (+1)
   \   000000DE   0x88A0             LDRH     R0,[R4, #+4]
   \   000000E0   0xF5B0 0x7F87      CMP      R0,#+270
   \   000000E4   0xD10F             BNE.N    ??_v_Axis_Create_7
   \   000000E6   0x2003             MOVS     R0,#+3
   \   000000E8   0x.... 0x....      BL       LCD_SetPath
   \   000000EC   0x8923             LDRH     R3,[R4, #+8]
   \   000000EE   0x2202             MOVS     R2,#+2
   \   000000F0   0x8861             LDRH     R1,[R4, #+2]
   \   000000F2   0x8820             LDRH     R0,[R4, #+0]
   \   000000F4   0x.... 0x....      BL       LCD_SetArrow
   \   000000F8   0x8923             LDRH     R3,[R4, #+8]
   \   000000FA   0x2200             MOVS     R2,#+0
   \   000000FC   0x8861             LDRH     R1,[R4, #+2]
   \   000000FE   0x8820             LDRH     R0,[R4, #+0]
   \   00000100   0x.... 0x....      BL       LCD_SetArrow
   \   00000104   0xE791             B.N      ??_v_Axis_Create_1
   \                     ??_v_Axis_Create_7: (+1)
   \   00000106   0x.... 0x....      BL       v_error_axis
   \   0000010A   0x20FA             MOVS     R0,#+250
   \   0000010C   0xE0C4             B.N      ??_v_Axis_Create_8
    203                  {
    204                      switch(target_axis->Position.angle) // 选定起始方位
    205                      {
    206                          case 0:LCD_SetPath(0); // 右
    207                              LCD_SetLine(target_axis->Position.start_x + target_axis->Position.width - loop*minScaleInK,
    208                                          target_axis->Position.start_y - 3,
    209                                          7,
    210                                          target_axis->Color.axisColor
    211                                          );
    212                              v_BIOS_6x8Num(target_axis->Position.start_x + 1 + target_axis->Position.width - loop*minScaleInK,
    213                                            target_axis->Position.start_y - 10,
    214                                            target_axis->Color.fontColor,
    215                                            target_axis->Color.backColor,
    216                                            (target_axis->Scale.zero + (sint32)(loop*target_axis->Scale.minScale))
    217                                            );
    218                          break;
    219                          case 90:LCD_SetPath(4); // 下
    220                              LCD_SetLine(target_axis->Position.start_x - 3,
    221                                          target_axis->Position.start_y + target_axis->Position.width - loop*minScaleInK,
    222                                          7,
    223                                          target_axis->Color.axisColor
    224                                          );
    225                              v_BIOS_6x8Num(target_axis->Position.start_x - 10,
    226                                            target_axis->Position.start_y + 1 + target_axis->Position.width - loop*minScaleInK,
    227                                            target_axis->Color.fontColor,
    228                                            target_axis->Color.backColor,
    229                                            (target_axis->Scale.zero + (sint32)(loop*target_axis->Scale.minScale))
    230                                            );
    231                          break;
    232                          case 180:LCD_SetPath(0); // 右
    233                              LCD_SetLine(target_axis->Position.start_x - target_axis->Position.width + loop*minScaleInK,
    234                                          target_axis->Position.start_y - 3,
    235                                          7,
    236                                          target_axis->Color.axisColor
    237                                          );
    238                              v_BIOS_6x8Num(target_axis->Position.start_x + 1 - target_axis->Position.width + loop*minScaleInK,
    239                                            target_axis->Position.start_y - 10,
    240                                            target_axis->Color.fontColor,
    241                                            target_axis->Color.backColor,
    242                                            (target_axis->Scale.zero + (sint32)(loop*target_axis->Scale.minScale))
    243                                            );
    244                          break;
    245                          case 270:LCD_SetPath(4); // 下
   \                     ??_v_Axis_Create_9: (+1)
   \   0000010E   0x2004             MOVS     R0,#+4
   \   00000110   0x.... 0x....      BL       LCD_SetPath
    246                              LCD_SetLine(target_axis->Position.start_x - 3,
    247                                          target_axis->Position.start_y - target_axis->Position.width + loop*minScaleInK,
    248                                          7,
    249                                          target_axis->Color.axisColor
    250                                          );
   \   00000114   0x8923             LDRH     R3,[R4, #+8]
   \   00000116   0x2207             MOVS     R2,#+7
   \   00000118   0x8860             LDRH     R0,[R4, #+2]
   \   0000011A   0x88E1             LDRH     R1,[R4, #+6]
   \   0000011C   0x1A40             SUBS     R0,R0,R1
   \   0000011E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000120   0xFB05 0x0107      MLA      R1,R5,R7,R0
   \   00000124   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000126   0x8820             LDRH     R0,[R4, #+0]
   \   00000128   0x1EC0             SUBS     R0,R0,#+3
   \   0000012A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000012C   0x.... 0x....      BL       LCD_SetLine
    251                              v_BIOS_6x8Num(target_axis->Position.start_x - 10,
    252                                            target_axis->Position.start_y + 1 - target_axis->Position.width + loop*minScaleInK,
    253                                            target_axis->Color.fontColor,
    254                                            target_axis->Color.backColor,
    255                                            (target_axis->Scale.zero + (sint32)(loop*target_axis->Scale.minScale))
    256                                            );
   \   00000130   0x6920             LDR      R0,[R4, #+16]
   \   00000132   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000134   0x69A1             LDR      R1,[R4, #+24]
   \   00000136   0xFB01 0x0007      MLA      R0,R1,R7,R0
   \   0000013A   0x.... 0x....      BL       __aeabi_i2d
   \   0000013E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000142   0x89A3             LDRH     R3,[R4, #+12]
   \   00000144   0x8962             LDRH     R2,[R4, #+10]
   \   00000146   0x8860             LDRH     R0,[R4, #+2]
   \   00000148   0x1C40             ADDS     R0,R0,#+1
   \   0000014A   0x88E1             LDRH     R1,[R4, #+6]
   \   0000014C   0x1A40             SUBS     R0,R0,R1
   \   0000014E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000150   0xFB05 0x0107      MLA      R1,R5,R7,R0
   \   00000154   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000156   0x8820             LDRH     R0,[R4, #+0]
   \   00000158   0x380A             SUBS     R0,R0,#+10
   \   0000015A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000015C   0x.... 0x....      BL       v_BIOS_6x8Num
    257                          break;
   \                     ??_v_Axis_Create_10: (+1)
   \   00000160   0x1C7F             ADDS     R7,R7,#+1
   \                     ??_v_Axis_Create_4: (+1)
   \   00000162   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000164   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000166   0x42B7             CMP      R7,R6
   \   00000168   0xF080 0x8095      BCS.W    ??_v_Axis_Create_2
   \   0000016C   0x88A0             LDRH     R0,[R4, #+4]
   \   0000016E   0x2800             CMP      R0,#+0
   \   00000170   0xD007             BEQ.N    ??_v_Axis_Create_11
   \   00000172   0x285A             CMP      R0,#+90
   \   00000174   0xD034             BEQ.N    ??_v_Axis_Create_12
   \   00000176   0x28B4             CMP      R0,#+180
   \   00000178   0xD05E             BEQ.N    ??_v_Axis_Create_13
   \   0000017A   0xF5B0 0x7F87      CMP      R0,#+270
   \   0000017E   0xD0C6             BEQ.N    ??_v_Axis_Create_9
   \   00000180   0xE7EE             B.N      ??_v_Axis_Create_10
   \                     ??_v_Axis_Create_11: (+1)
   \   00000182   0x2000             MOVS     R0,#+0
   \   00000184   0x.... 0x....      BL       LCD_SetPath
   \   00000188   0x8923             LDRH     R3,[R4, #+8]
   \   0000018A   0x2207             MOVS     R2,#+7
   \   0000018C   0x8860             LDRH     R0,[R4, #+2]
   \   0000018E   0x1EC1             SUBS     R1,R0,#+3
   \   00000190   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000192   0x8820             LDRH     R0,[R4, #+0]
   \   00000194   0xF8B4 0xC006      LDRH     R12,[R4, #+6]
   \   00000198   0xFA1C 0xF080      UXTAH    R0,R12,R0
   \   0000019C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000019E   0xFB05 0x0017      MLS      R0,R5,R7,R0
   \   000001A2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001A4   0x.... 0x....      BL       LCD_SetLine
   \   000001A8   0x6920             LDR      R0,[R4, #+16]
   \   000001AA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000001AC   0x69A1             LDR      R1,[R4, #+24]
   \   000001AE   0xFB01 0x0007      MLA      R0,R1,R7,R0
   \   000001B2   0x.... 0x....      BL       __aeabi_i2d
   \   000001B6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000001BA   0x89A3             LDRH     R3,[R4, #+12]
   \   000001BC   0x8962             LDRH     R2,[R4, #+10]
   \   000001BE   0x8860             LDRH     R0,[R4, #+2]
   \   000001C0   0xF1B0 0x010A      SUBS     R1,R0,#+10
   \   000001C4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001C6   0x8820             LDRH     R0,[R4, #+0]
   \   000001C8   0xF8B4 0xC006      LDRH     R12,[R4, #+6]
   \   000001CC   0xFA1C 0xF080      UXTAH    R0,R12,R0
   \   000001D0   0x1C40             ADDS     R0,R0,#+1
   \   000001D2   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000001D4   0xFB05 0x0017      MLS      R0,R5,R7,R0
   \   000001D8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001DA   0x.... 0x....      BL       v_BIOS_6x8Num
   \   000001DE   0xE7BF             B.N      ??_v_Axis_Create_10
   \                     ??_v_Axis_Create_12: (+1)
   \   000001E0   0x2004             MOVS     R0,#+4
   \   000001E2   0x.... 0x....      BL       LCD_SetPath
   \   000001E6   0x8923             LDRH     R3,[R4, #+8]
   \   000001E8   0x2207             MOVS     R2,#+7
   \   000001EA   0x8860             LDRH     R0,[R4, #+2]
   \   000001EC   0x88E1             LDRH     R1,[R4, #+6]
   \   000001EE   0xFA11 0xF080      UXTAH    R0,R1,R0
   \   000001F2   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000001F4   0xFB05 0x0117      MLS      R1,R5,R7,R0
   \   000001F8   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001FA   0x8820             LDRH     R0,[R4, #+0]
   \   000001FC   0x1EC0             SUBS     R0,R0,#+3
   \   000001FE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000200   0x.... 0x....      BL       LCD_SetLine
   \   00000204   0x6920             LDR      R0,[R4, #+16]
   \   00000206   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000208   0x69A1             LDR      R1,[R4, #+24]
   \   0000020A   0xFB01 0x0007      MLA      R0,R1,R7,R0
   \   0000020E   0x.... 0x....      BL       __aeabi_i2d
   \   00000212   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000216   0x89A3             LDRH     R3,[R4, #+12]
   \   00000218   0x8962             LDRH     R2,[R4, #+10]
   \   0000021A   0x8860             LDRH     R0,[R4, #+2]
   \   0000021C   0x88E1             LDRH     R1,[R4, #+6]
   \   0000021E   0xFA11 0xF080      UXTAH    R0,R1,R0
   \   00000222   0x1C40             ADDS     R0,R0,#+1
   \   00000224   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000226   0xFB05 0x0117      MLS      R1,R5,R7,R0
   \   0000022A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000022C   0x8820             LDRH     R0,[R4, #+0]
   \   0000022E   0x380A             SUBS     R0,R0,#+10
   \   00000230   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000232   0x.... 0x....      BL       v_BIOS_6x8Num
   \   00000236   0xE793             B.N      ??_v_Axis_Create_10
   \                     ??_v_Axis_Create_13: (+1)
   \   00000238   0x2000             MOVS     R0,#+0
   \   0000023A   0x.... 0x....      BL       LCD_SetPath
   \   0000023E   0x8923             LDRH     R3,[R4, #+8]
   \   00000240   0x2207             MOVS     R2,#+7
   \   00000242   0x8860             LDRH     R0,[R4, #+2]
   \   00000244   0x1EC1             SUBS     R1,R0,#+3
   \   00000246   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000248   0x8820             LDRH     R0,[R4, #+0]
   \   0000024A   0xF8B4 0xC006      LDRH     R12,[R4, #+6]
   \   0000024E   0xEBB0 0x000C      SUBS     R0,R0,R12
   \   00000252   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000254   0xFB05 0x0007      MLA      R0,R5,R7,R0
   \   00000258   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000025A   0x.... 0x....      BL       LCD_SetLine
   \   0000025E   0x6920             LDR      R0,[R4, #+16]
   \   00000260   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000262   0x69A1             LDR      R1,[R4, #+24]
   \   00000264   0xFB01 0x0007      MLA      R0,R1,R7,R0
   \   00000268   0x.... 0x....      BL       __aeabi_i2d
   \   0000026C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000270   0x89A3             LDRH     R3,[R4, #+12]
   \   00000272   0x8962             LDRH     R2,[R4, #+10]
   \   00000274   0x8860             LDRH     R0,[R4, #+2]
   \   00000276   0xF1B0 0x010A      SUBS     R1,R0,#+10
   \   0000027A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000027C   0x8820             LDRH     R0,[R4, #+0]
   \   0000027E   0x1C40             ADDS     R0,R0,#+1
   \   00000280   0xF8B4 0xC006      LDRH     R12,[R4, #+6]
   \   00000284   0xEBB0 0x000C      SUBS     R0,R0,R12
   \   00000288   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000028A   0xFB05 0x0007      MLA      R0,R5,R7,R0
   \   0000028E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000290   0x.... 0x....      BL       v_BIOS_6x8Num
   \   00000294   0xE764             B.N      ??_v_Axis_Create_10
    258                      }
    259                  }
    260              }
    261              return 0;
   \                     ??_v_Axis_Create_2: (+1)
   \   00000296   0x2000             MOVS     R0,#+0
   \                     ??_v_Axis_Create_8: (+1)
   \   00000298   0xBDFE             POP      {R1-R7,PC}       ;; return
    262          }
    263          
    264          /******************************************************************************/
    265          /******************************************************************************/
    266          /******************************************************************************/
    267          /******************************************************************************/
    268          /******************************************************************************/
    269          // 窗体设置

   \                                 In section .text, align 2, keep-with-next
    270          uint8 (_v_Window_Create)(s_Control ** Window_Input)
    271          {
   \                     _v_Window_Create: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
    272              _s_GUI_Window * Window = (_s_GUI_Window *)((*Window_Input)->Name);
   \   00000004   0x6828             LDR      R0,[R5, #+0]
   \   00000006   0x6884             LDR      R4,[R0, #+8]
    273              LCD_Clear(Window->Color);
   \   00000008   0x8920             LDRH     R0,[R4, #+8]
   \   0000000A   0x.... 0x....      BL       LCD_Clear
    274              v_BIOS_6x8str_Ascii(0,231,~(Window->Color),Window->Color,Window->Content);
   \   0000000E   0x68E0             LDR      R0,[R4, #+12]
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x8923             LDRH     R3,[R4, #+8]
   \   00000014   0x8920             LDRH     R0,[R4, #+8]
   \   00000016   0x43C2             MVNS     R2,R0
   \   00000018   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001A   0x21E7             MOVS     R1,#+231
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       v_BIOS_6x8str_Ascii
    275              LCD_SetPath(4);
   \   00000022   0x2004             MOVS     R0,#+4
   \   00000024   0x.... 0x....      BL       LCD_SetPath
    276              LCD_SetLine(0,230,320,~(Window->Color));
   \   00000028   0x8920             LDRH     R0,[R4, #+8]
   \   0000002A   0x43C3             MVNS     R3,R0
   \   0000002C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000002E   0xF44F 0x72A0      MOV      R2,#+320
   \   00000032   0x21E6             MOVS     R1,#+230
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       LCD_SetLine
    277              s_Control * Me = *Window_Input;
   \   0000003A   0x682C             LDR      R4,[R5, #+0]
    278              s_Control * Turn = *Window_Input;
   \   0000003C   0x6828             LDR      R0,[R5, #+0]
   \   0000003E   0x9000             STR      R0,[SP, #+0]
    279              do
    280              {
    281                  v_allControl_Create(&Turn);
   \                     ??_v_Window_Create_0: (+1)
   \   00000040   0xA800             ADD      R0,SP,#+0
   \   00000042   0x.... 0x....      BL       v_allControl_Create
    282                  if(GUI_Window != Turn->Tag){Turn->Done(&Turn);}
   \   00000046   0x9800             LDR      R0,[SP, #+0]
   \   00000048   0x7900             LDRB     R0,[R0, #+4]
   \   0000004A   0x2801             CMP      R0,#+1
   \   0000004C   0xD003             BEQ.N    ??_v_Window_Create_1
   \   0000004E   0xA800             ADD      R0,SP,#+0
   \   00000050   0x9900             LDR      R1,[SP, #+0]
   \   00000052   0x6809             LDR      R1,[R1, #+0]
   \   00000054   0x4788             BLX      R1
    283                  Turn->Done = Turn->Idle;
   \                     ??_v_Window_Create_1: (+1)
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x6A00             LDR      R0,[R0, #+32]
   \   0000005A   0x9900             LDR      R1,[SP, #+0]
   \   0000005C   0x6008             STR      R0,[R1, #+0]
    284                  Turn = Turn->RiFriend;
   \   0000005E   0x9800             LDR      R0,[SP, #+0]
   \   00000060   0x6940             LDR      R0,[R0, #+20]
   \   00000062   0x9000             STR      R0,[SP, #+0]
    285              }while(Me != Turn);
   \   00000064   0x9800             LDR      R0,[SP, #+0]
   \   00000066   0x4284             CMP      R4,R0
   \   00000068   0xD1EA             BNE.N    ??_v_Window_Create_0
    286              return 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    287          }
    288          
    289          
    290          /******************************************************************************/
    291          /******************************************************************************/
    292          /******************************************************************************/
    293          /******************************************************************************/
    294          /******************************************************************************/
    295          // 完全控件
    296          

   \                                 In section .text, align 2, keep-with-next
    297          void v_allControl_Create(s_Control ** guiGaia)
    298          {
    299              switch((*guiGaia)->Tag)
   \                     v_allControl_Create: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x7909             LDRB     R1,[R1, #+4]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD006             BEQ.N    ??v_allControl_Create_0
   \   00000008   0x2902             CMP      R1,#+2
   \   0000000A   0xD006             BEQ.N    ??v_allControl_Create_1
   \   0000000C   0xD304             BCC.N    ??v_allControl_Create_2
   \   0000000E   0x2904             CMP      R1,#+4
   \   00000010   0xD008             BEQ.N    ??v_allControl_Create_3
   \   00000012   0xD306             BCC.N    ??v_allControl_Create_4
   \   00000014   0xE006             B.N      ??v_allControl_Create_5
    300              {
    301                  case GUI_None:
    302                  break;
   \                     ??v_allControl_Create_0: (+1)
   \   00000016   0xE005             B.N      ??v_allControl_Create_5
    303                  case GUI_Window:
    304                     // guiGaia->Done = _v_Window_Create;
    305                  break;
   \                     ??v_allControl_Create_2: (+1)
   \   00000018   0xE004             B.N      ??v_allControl_Create_5
    306                  case GUI_Cmd:
    307                      (*guiGaia)->Done = _v_Cmd_Create;
   \                     ??v_allControl_Create_1: (+1)
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x....             LDR.N    R1,??DataTable4_1
   \   0000001E   0x6001             STR      R1,[R0, #+0]
    308                  break;
   \   00000020   0xE000             B.N      ??v_allControl_Create_5
    309                  case GUI_Axis:
    310                     // guiGaia->CreateFcn = _v_Axis_Create;
    311                  break;
   \                     ??v_allControl_Create_4: (+1)
   \   00000022   0xE7FF             B.N      ??v_allControl_Create_5
    312                  case GUI_CoorData:
    313                     // ((_s_GUI_CoorData*)guiGaia->Name)->CreateFcn(((_s_GUI_CoorData*)guiGaia->Name));
    314                  break;
    315              }
    316          }
   \                     ??v_allControl_Create_3: (+1)
   \                     ??v_allControl_Create_5: (+1)
   \   00000024   0x4770             BX       LR               ;; return
    317          /******************************************************************************/
    318          /******************************************************************************/
    319          /******************************************************************************/
    320          /******************************************************************************/
    321          /******************************************************************************/
    322          /******************************************************************************/
    323          /******************************************************************************/
    324          /******************************************************************************/
    325          /******************************************************************************/
    326          /******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    327          uint8 (FCN_NULL) ( s_Control ** guiGaia )
    328          {
    329              /*
    330              switch(guiGaia->Tag)
    331              {
    332                  case GUI_None:
    333                  break;
    334                  case GUI_Window:
    335                      //(_s_GUI_Window * )guiGaia->Name;
    336                  break;
    337                  case GUI_Cmd:
    338                      //(_s_GUI_Cmd * )guiGaia->Name;
    339                  break;
    340                  case GUI_Axis:
    341                      //(_s_GUI_Axis * )guiGaia->Name;
    342                  break;
    343                  case GUI_CoorData:
    344                      //(_s_GUI_CoorData * )guiGaia->Name;
    345                  break;
    346              }
    347              */
    348              return 0;
   \                     FCN_NULL: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    349          }

   \                                 In section .text, align 2, keep-with-next
    350          uint8(CallBack_Back)( s_Control ** guiGaia ) // 标准CallBack函数
    351          {
   \                     CallBack_Back: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    352              (*guiGaia)->Father->Create(&((*guiGaia)->Father));
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x300C             ADDS     R0,R0,#+12
   \   00000008   0x6821             LDR      R1,[R4, #+0]
   \   0000000A   0x68C9             LDR      R1,[R1, #+12]
   \   0000000C   0x6989             LDR      R1,[R1, #+24]
   \   0000000E   0x4788             BLX      R1
    353              (*guiGaia) = (*guiGaia)->Father;
   \   00000010   0x6820             LDR      R0,[R4, #+0]
   \   00000012   0x68C0             LDR      R0,[R0, #+12]
   \   00000014   0x6020             STR      R0,[R4, #+0]
    354              (*guiGaia)->Done = (*guiGaia)->Idle;
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x6A00             LDR      R0,[R0, #+32]
   \   0000001A   0x6821             LDR      R1,[R4, #+0]
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    355              return 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    356          }
    357          /******************************************************************************/

   \                                 In section .bss, align 2
    358          uint16 timer = 0;
   \                     timer:
   \   00000000                      DS8 2

   \                                 In section .text, align 2, keep-with-next
    359          uint8(CallBack_Show)(s_Control ** guiGaia) // 标准CallBack函数
    360          {
   \                     CallBack_Show: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    361              uint16 BackColor = ((_s_GUI_Window * )((*guiGaia)->Father->Name))->Color;
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x68C9             LDR      R1,[R1, #+12]
   \   00000008   0x6889             LDR      R1,[R1, #+8]
   \   0000000A   0x890C             LDRH     R4,[R1, #+8]
    362              _s_GUI_Cmd * gui = (_s_GUI_Cmd *)((*guiGaia)->Name);
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x6885             LDR      R5,[R0, #+8]
    363              LCD_SetPath(0);
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       LCD_SetPath
    364              uint16 X_font = gui->Position.x + gui->Position.width + 1;
   \   00000016   0x8828             LDRH     R0,[R5, #+0]
   \   00000018   0x88A9             LDRH     R1,[R5, #+4]
   \   0000001A   0x1808             ADDS     R0,R1,R0
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
    365              uint16 Y_font = gui->Position.y + ((gui->Position.height-8)/2);
   \   0000001E   0x8869             LDRH     R1,[R5, #+2]
   \   00000020   0x88EA             LDRH     R2,[R5, #+6]
   \   00000022   0x3A08             SUBS     R2,R2,#+8
   \   00000024   0x2302             MOVS     R3,#+2
   \   00000026   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   0000002A   0x1851             ADDS     R1,R2,R1
    366              v_BIOS_6x8str_Ascii(X_font,
    367                                  Y_font,
    368                                  gui->Color.fontColor,
    369                                  BackColor,
    370                                  "OK");
   \   0000002C   0x....             ADR.N    R2,??DataTable4  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000002E   0x9200             STR      R2,[SP, #+0]
   \   00000030   0x0023             MOVS     R3,R4
   \   00000032   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000034   0x892A             LDRH     R2,[R5, #+8]
   \   00000036   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000038   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003A   0x.... 0x....      BL       v_BIOS_6x8str_Ascii
    371              timer ++;
   \   0000003E   0x....             LDR.N    R0,??DataTable4_2
   \   00000040   0x8800             LDRH     R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x....             LDR.N    R1,??DataTable4_2
   \   00000046   0x8008             STRH     R0,[R1, #+0]
    372              v_BIOS_6x8Num(200,200,Red,Black,timer);
   \   00000048   0x....             LDR.N    R0,??DataTable4_2
   \   0000004A   0x8800             LDRH     R0,[R0, #+0]
   \   0000004C   0x.... 0x....      BL       __aeabi_ui2d
   \   00000050   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000054   0x2300             MOVS     R3,#+0
   \   00000056   0xF44F 0x4278      MOV      R2,#+63488
   \   0000005A   0x21C8             MOVS     R1,#+200
   \   0000005C   0x20C8             MOVS     R0,#+200
   \   0000005E   0x.... 0x....      BL       v_BIOS_6x8Num
    373              return 0;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xBD3E             POP      {R1-R5,PC}       ;; return
    374          }
    375          /******************************************************************************/
    376          // Data Scope CallBack

   \                                 In section .text, align 2, keep-with-next
    377          uint8(DataScope_Create)(s_Control ** Topest) // 标准CallBack函数
    378          {
   \                     DataScope_Create: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    379              s_Control * Me_Toper = *Topest;
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0xE000             B.N      ??DataScope_Create_0
    380              while(GUI_Window != Me_Toper->Tag)
    381              {
    382                  Me_Toper = Me_Toper->RiFriend;
   \                     ??DataScope_Create_1: (+1)
   \   00000008   0x6940             LDR      R0,[R0, #+20]
    383              }
   \                     ??DataScope_Create_0: (+1)
   \   0000000A   0x7901             LDRB     R1,[R0, #+4]
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD1FB             BNE.N    ??DataScope_Create_1
    384              if( ((_s_GUI_Window*)(Me_Toper->Name))->SonsNum > 0 )
   \   00000010   0x6881             LDR      R1,[R0, #+8]
   \   00000012   0x7809             LDRB     R1,[R1, #+0]
   \   00000014   0x2900             CMP      R1,#+0
   \   00000016   0xD003             BEQ.N    ??DataScope_Create_2
    385              {
    386                  (*Topest) = (((_s_GUI_Window*)(Me_Toper->Name))->Son_Windows[0]);
   \   00000018   0x6880             LDR      R0,[R0, #+8]
   \   0000001A   0x6840             LDR      R0,[R0, #+4]
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x6020             STR      R0,[R4, #+0]
    387              }
    388              (*Topest)->Create(Topest);
   \                     ??DataScope_Create_2: (+1)
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x6821             LDR      R1,[R4, #+0]
   \   00000024   0x6989             LDR      R1,[R1, #+24]
   \   00000026   0x4788             BLX      R1
    389              (*Topest)->Done = (*Topest)->Idle;
   \   00000028   0x6820             LDR      R0,[R4, #+0]
   \   0000002A   0x6A00             LDR      R0,[R0, #+32]
   \   0000002C   0x6821             LDR      R1,[R4, #+0]
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    390              return 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
    391          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x20 0x20          DC8      0x20, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x3C 0x3D          DC8      0x3C, 0x3D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x4F 0x4B          DC8      0x4F, 0x4B, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     _v_Cmd_Create

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     timer

   \                                 In section .rodata, align 4
   \   00000000   0x20 0x20          DC8 "  "
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x3C 0x3D          DC8 "<="
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \   00000000   0x4F 0x4B          DC8 "OK"
   \              0x00         
   \   00000003   0x00               DC8 0
    392          /******************************************************************************/
    393          /******************************************************************************/
    394          /******************************************************************************/
    395          /******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CallBack_Back
         8   -- Indirect call
      24   CallBack_Show
        24   -> LCD_SetPath
        24   -> __aeabi_ui2d
        24   -> v_BIOS_6x8Num
        24   -> v_BIOS_6x8str_Ascii
       8   DataScope_Create
         8   -- Indirect call
       0   FCN_NULL
      32   _v_Axis_Create
        32   -> LCD_SetArrow
        32   -> LCD_SetLine
        32   -> LCD_SetPath
        32   -> __aeabi_f2uiz
        32   -> __aeabi_fdiv
        32   -> __aeabi_i2d
        32   -> __aeabi_i2f
        32   -> __aeabi_ui2f
        32   -> v_BIOS_6x8Num
        32   -> v_error_axis
      24   _v_Cmd_Create
        24   -> LCD_SetLine
        24   -> LCD_SetPath
        24   -> LCD_SetSquare
        24   -> v_BIOS_6x8str_Ascii
      16   _v_Cmd_Idle
        16   -> LCD_SetPath
        16   -> v_BIOS_6x8str_Ascii
      16   _v_Cmd_OnPend
        16   -> LCD_SetPath
        16   -> v_BIOS_6x8str_Ascii
       0   _v_Idle
      16   _v_Window_Create
        16   -- Indirect call
        16   -> LCD_Clear
        16   -> LCD_SetLine
        16   -> LCD_SetPath
        16   -> v_BIOS_6x8str_Ascii
        16   -> v_allControl_Create
       0   v_allControl_Create


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "  ">
       1  ?<Constant "">
       4  ?<Constant "<=">
       4  ?<Constant "OK">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
      34  CallBack_Back
     102  CallBack_Show
      52  DataScope_Create
       4  FCN_NULL
     666  _v_Axis_Create
     270  _v_Cmd_Create
      64  _v_Cmd_Idle
      64  _v_Cmd_OnPend
       4  _v_Idle
     110  _v_Window_Create
       2  timer
      38  v_allControl_Create

 
     2 bytes in section .bss
    13 bytes in section .rodata
 1 432 bytes in section .text
 
 1 432 bytes of CODE  memory
    13 bytes of CONST memory
     2 bytes of DATA  memory

Errors: none
Warnings: none
