###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      26/Nov/2014  20:35:34 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\´´×÷ÊÒ\·ÉË¼¿¨¶ûÖÇÄÜÐ¡³µ\Ë³°µÈýºÅ\´úÂë\MK60FX512VLQ15\ #
#                    ShunAn_Panel\TFT.c                                       #
#    Command line =  D:\´´×÷ÊÒ\·ÉË¼¿¨¶ûÖÇÄÜÐ¡³µ\Ë³°µÈýºÅ\´úÂë\MK60FX512VLQ15\ #
#                    ShunAn_Panel\TFT.c -D IAR -D TWR_K60F120M -lCN           #
#                    D:\´´×÷ÊÒ\·ÉË¼¿¨¶ûÖÇÄÜÐ¡³µ\Ë³°µÈýºÅ\´úÂë\MK60FX512VLQ15\ #
#                    FLASH_1MB\List\ -lB D:\´´×÷ÊÒ\·ÉË¼¿¨¶ûÖÇÄÜÐ¡³µ\Ë³°µÈýºÅ\ #
#                    ´úÂë\MK60FX512VLQ15\FLASH_1MB\List\ -o                   #
#                    D:\´´×÷ÊÒ\·ÉË¼¿¨¶ûÖÇÄÜÐ¡³µ\Ë³°µÈýºÅ\´úÂë\MK60FX512VLQ15\ #
#                    FLASH_1MB\Obj\ --no_cse --no_unroll --no_inline          #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I D:\´´×÷ÊÒ\·ÉË¼¿¨¶ûÖÇÄÜÐ¡³µ\Ë³°µÈýºÅ\´úÂë\MK60F #
#                    X512VLQ15\ -I D:\´´×÷ÊÒ\·ÉË¼¿¨¶ûÖÇÄÜÐ¡³µ\Ë³°µÈýºÅ\´úÂë\M #
#                    K60FX512VLQ15\Library\ -I D:\´´×÷ÊÒ\·ÉË¼¿¨¶ûÖÇÄÜÐ¡³µ\Ë³° #
#                    µÈýºÅ\´úÂë\MK60FX512VLQ15\Library\BlessedAlien\ -I       #
#                    D:\´´×÷ÊÒ\·ÉË¼¿¨¶ûÖÇÄÜÐ¡³µ\Ë³°µÈýºÅ\´úÂë\MK60FX512VLQ15\ #
#                    ShunAn_Panel\ -Ol --use_c++_inline                       #
#    List file    =  D:\´´×÷ÊÒ\·ÉË¼¿¨¶ûÖÇÄÜÐ¡³µ\Ë³°µÈýºÅ\´úÂë\MK60FX512VLQ15\ #
#                    FLASH_1MB\List\TFT.lst                                   #
#    Object file  =  D:\´´×÷ÊÒ\·ÉË¼¿¨¶ûÖÇÄÜÐ¡³µ\Ë³°µÈýºÅ\´úÂë\MK60FX512VLQ15\ #
#                    FLASH_1MB\Obj\TFT.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\´´×÷ÊÒ\·ÉË¼¿¨¶ûÖÇÄÜÐ¡³µ\Ë³°µÈýºÅ\´úÂë\MK60FX512VLQ15\ShunAn_Panel\TFT.c
      1          /***
      2          /. -----------------------//Íâ²¿Æ÷¼þÇý¶¯//-------------------------
      3          
      4          /. ²âÊÔÓ²¼þÆ½Ì¨£ºMK60FX512VLQ15
      5           . ¹¤×÷ÆµÂÊ£º
      6           . °æÈ¨ËùÓÐ£ºÖì¸ð¾þ ÖÐÄÏ´óÑ§
      7           . ÖÆ×÷Õß£ºÖì¸ð¾þ ÖÐÄÏ´óÑ§
      8           . Çý¶¯Æ÷¼þ£ºSSD1289£¬Æ÷¼þÀ´Ô´£ºÎ¢Ñ©µç×Ó
      9           . ×îºóÐÞ¸ÄÈÕÆÚ: 20140403
     10           
     11          ***/
     12          #include "arm_cm4.h"
     13          #include "MK60F15.h"
     14          #include "ShunAn_Lib.h"
     15          #include "start_ShunAn.h"
     16          #include "TFT.h"
     17          
     18          /* ¼Ä´æÆ÷ÃèÊö by Öì¸ð¾þ 20140403 */
     19          #define Delay50ns()       {asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");\
     20                                     asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");\
     21                                     asm("nop");asm("nop");asm("nop");}
     22          // #define IR(Index)       The index instruction specifies the RAM control indexes (R00h to RFFh).
     23          /* ¶ÁÐ¾Æ¬ */
     24          #define R00_DeviceCodeRead      0x0000u
     25          /* Õñµ´Æ÷ */
     26          #define R00_OSC                 0x0000u
     27          /* ÆÁÄ»¿ØÖÆ */
     28          #define R01_DriverOutC          0x0001u
     29          #define R02_LCDdriveAC          0x0002u
     30          /* ±È½Ï */
     31          #define R05_CmpReg              0x0005u
     32          #define R06_CmpReg              0x0006u
     33          /*  */
     34          #define R07_DisplayC            0x0007u
     35          #define R0B_FrameCycle          0x000Bu
     36          #define R0F_GateScanPos         0x000Fu
     37          /* Ä£Ê½Ñ¡Ôñ */
     38          #define R10_SleepMode           0x0010u
     39          #define R11_EntryMode           0x0011u         //
     40          /* ½Ó¿Ú¿ØÖÆ */
     41          #define R15_GenInterfaceC       0x0015u         // Ò»°ã½Ó¿Ú¿ØÖÆ // 00dx£¬ÉèÖÃÐÅºÅ¼«ÐÔ
     42          #define R16_LinePorch           0x0016u         //
     43          #define R17_VerPorch            0x0017u         // 
     44          /* Power ¿ØÖÆ */
     45          #define R03_PowerC_1            0x0003u
     46          #define R0C_PowerC_2            0x000Cu
     47          #define R0D_PowerC_3            0x000Du
     48          #define R0E_PowerC_4            0x000Eu
     49          #define R1E_PowerC_5            0x001Eu
     50          /* GRAM ²Ù×÷ */
     51          #define DRAWPOINT               0x0022u
     52          #define R22_WdataToGRAM         0x0022u         // SSD1289 selects the grayscale level according to the GDDRAM data.
     53          #define R22_RdataFrGRAM         0x0022u         // RW = W then write ; RW = R then read ;
     54          #define R23_RAMwDataMask        0x0023u
     55          #define R24_RAMwDataMask        0x0024u
     56          /* Gamma ¿ØÖÆ */
     57          // function for the 262,144-color display.
     58          #define R30_GammaC_0            0x0030u
     59          #define R31_GammaC_1            0x0031u
     60          #define R32_GammaC_2            0x0032u
     61          #define R33_GammaC_3            0x0033u
     62          #define R34_GammaC_4            0x0034u
     63          #define R35_GammaC_5            0x0035u
     64          #define R36_GammaC_6            0x0036u
     65          #define R37_GammaC_7            0x0037u
     66          #define R3A_GammaC_8            0x003Au
     67          #define R3B_GammaC_9            0x003Bu
     68          //
     69          /* ´°¿ÚÏÔÊ¾ */
     70          #define R41_VerScrC_1           0x0041u
     71          #define R42_VerScrC_2           0x0042u
     72          #define R44_LineRAMpos          0x0044u
     73          #define R45_VerticalRAMpos      0x0045u
     74          #define R46_VerticalRAMpos      0x0046u
     75          #define R48_1stWindow           0x0048u
     76          #define R49_1stWindowEnd        0x0049u
     77          #define R4A_2ndWindow           0x004Au
     78          #define R4B_2ndWindowEnd        0x004Bu
     79          #define R4E_XAD                 0x004Eu         // Make initial settings for the GDDRAM X address in the AC
     80          #define R4F_YAD                 0x004Fu
     81          /*  */
     82          #define R25_FrameFreC           0x0025u         // ¿ò¼ÜÆµÂÊ¿ØÖÆ
     83          #define R28_VcomOTP_1           0x0028u         // When OTP is access, these registers must be set accordantly.
     84          #define R29_VcomOTP_2           0x0029u 
     85          /* ¼Ä´æÆ÷ÃèÊö½áÊø */
     86          
     87          //#define DC              PTE24_OUT
     88          //#define RS              PTE24_OUT
     89          #define DC(x)           __Pin_Set_(PTE_BASE_PTR->PDOR,24,x)
     90          //#define CS              PTE25_OUT
     91          #define CS(x)           __Pin_Set_(PTE_BASE_PTR->PDOR,25,x)
     92          //#define RD              PTE26_OUT
     93          #define RD(x)           __Pin_Set_(PTE_BASE_PTR->PDOR,26,x)
     94          //#define WR              PTE27_OUT
     95          #define WR(x)           __Pin_Set_(PTE_BASE_PTR->PDOR,27,x)
     96          //#define RESET           PTE28_OUT
     97          #define RESET(x)        __Pin_Set_(PTE_BASE_PTR->PDOR,28,x)
     98          
     99          //#define X_MAX   320
    100          //#define Y_MAX   240
    101          

   \                                 In section .text, align 2, keep-with-next
    102          void LCD_PinInit(uint8 RW)
    103          {
    104              // Êä³ö¶Ë³õÊ¼»¯
    105              PORTD_BASE_PTR->PCR[0] = PORT_PCR_MUX(1);
   \                     LCD_PinInit: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable5  ;; 0x4004c000
   \   00000004   0xF44F 0x7280      MOV      R2,#+256
   \   00000008   0x600A             STR      R2,[R1, #+0]
    106              PORTD_BASE_PTR->PCR[1] = PORT_PCR_MUX(1);
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable5_1  ;; 0x4004c004
   \   0000000E   0xF44F 0x7280      MOV      R2,#+256
   \   00000012   0x600A             STR      R2,[R1, #+0]
    107              PORTD_BASE_PTR->PCR[2] = PORT_PCR_MUX(1);
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable5_2  ;; 0x4004c008
   \   00000018   0xF44F 0x7280      MOV      R2,#+256
   \   0000001C   0x600A             STR      R2,[R1, #+0]
    108              PORTD_BASE_PTR->PCR[3] = PORT_PCR_MUX(1);
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable5_3  ;; 0x4004c00c
   \   00000022   0xF44F 0x7280      MOV      R2,#+256
   \   00000026   0x600A             STR      R2,[R1, #+0]
    109              PORTD_BASE_PTR->PCR[4] = PORT_PCR_MUX(1);
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable5_4  ;; 0x4004c010
   \   0000002C   0xF44F 0x7280      MOV      R2,#+256
   \   00000030   0x600A             STR      R2,[R1, #+0]
    110              PORTD_BASE_PTR->PCR[5] = PORT_PCR_MUX(1);
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable5_5  ;; 0x4004c014
   \   00000036   0xF44F 0x7280      MOV      R2,#+256
   \   0000003A   0x600A             STR      R2,[R1, #+0]
    111              PORTD_BASE_PTR->PCR[6] = PORT_PCR_MUX(1);
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable5_6  ;; 0x4004c018
   \   00000040   0xF44F 0x7280      MOV      R2,#+256
   \   00000044   0x600A             STR      R2,[R1, #+0]
    112              PORTD_BASE_PTR->PCR[7] = PORT_PCR_MUX(1);
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable5_7  ;; 0x4004c01c
   \   0000004A   0xF44F 0x7280      MOV      R2,#+256
   \   0000004E   0x600A             STR      R2,[R1, #+0]
    113              PORTD_BASE_PTR->PCR[8] = PORT_PCR_MUX(1);
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable5_8  ;; 0x4004c020
   \   00000054   0xF44F 0x7280      MOV      R2,#+256
   \   00000058   0x600A             STR      R2,[R1, #+0]
    114              PORTD_BASE_PTR->PCR[9] = PORT_PCR_MUX(1);
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable5_9  ;; 0x4004c024
   \   0000005E   0xF44F 0x7280      MOV      R2,#+256
   \   00000062   0x600A             STR      R2,[R1, #+0]
    115              PORTD_BASE_PTR->PCR[10] = PORT_PCR_MUX(1);
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable5_10  ;; 0x4004c028
   \   00000068   0xF44F 0x7280      MOV      R2,#+256
   \   0000006C   0x600A             STR      R2,[R1, #+0]
    116              PORTD_BASE_PTR->PCR[11] = PORT_PCR_MUX(1);
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable5_11  ;; 0x4004c02c
   \   00000072   0xF44F 0x7280      MOV      R2,#+256
   \   00000076   0x600A             STR      R2,[R1, #+0]
    117              PORTD_BASE_PTR->PCR[12] = PORT_PCR_MUX(1);
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable5_12  ;; 0x4004c030
   \   0000007C   0xF44F 0x7280      MOV      R2,#+256
   \   00000080   0x600A             STR      R2,[R1, #+0]
    118              PORTD_BASE_PTR->PCR[13] = PORT_PCR_MUX(1);
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable5_13  ;; 0x4004c034
   \   00000086   0xF44F 0x7280      MOV      R2,#+256
   \   0000008A   0x600A             STR      R2,[R1, #+0]
    119              PORTD_BASE_PTR->PCR[14] = PORT_PCR_MUX(1);
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable5_14  ;; 0x4004c038
   \   00000090   0xF44F 0x7280      MOV      R2,#+256
   \   00000094   0x600A             STR      R2,[R1, #+0]
    120              PORTD_BASE_PTR->PCR[15] = PORT_PCR_MUX(1);
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable5_15  ;; 0x4004c03c
   \   0000009A   0xF44F 0x7280      MOV      R2,#+256
   \   0000009E   0x600A             STR      R2,[R1, #+0]
    121              if(0 == RW)
   \   000000A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD10A             BNE.N    ??LCD_PinInit_0
    122              {
    123                  PTD_BASE_PTR->PDDR |=  0x0000FFFFu; // ºóÊ®ÁùÎ»ÖÃÎªÊä³ö
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable5_16  ;; 0x400ff0d4
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0xF440 0x407F      ORR      R0,R0,#0xFF00
   \   000000B0   0xF050 0x00FF      ORRS     R0,R0,#0xFF
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable5_16  ;; 0x400ff0d4
   \   000000B8   0x6008             STR      R0,[R1, #+0]
   \   000000BA   0xE007             B.N      ??LCD_PinInit_1
    124              }
    125              else // Pin_READ == RW
    126              {
    127                  PTD_BASE_PTR->PDDR &= ~0x0000FFFFu; // ºóÊ®ÁùÎ»ÖÃÎªÊäÈë
   \                     ??LCD_PinInit_0: (+1)
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable5_16  ;; 0x400ff0d4
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0x0C00             LSRS     R0,R0,#+16
   \   000000C4   0x0400             LSLS     R0,R0,#+16
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable5_16  ;; 0x400ff0d4
   \   000000CA   0x6008             STR      R0,[R1, #+0]
    128              }
    129              // Ð¾Æ¬¿ØÖÆ¶Ë³õÊ¼»¯
    130              PORTE_BASE_PTR->PCR[24] = PORT_PCR_MUX(1); // DC/RS
   \                     ??LCD_PinInit_1: (+1)
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable5_17  ;; 0x4004d060
   \   000000D0   0xF44F 0x7180      MOV      R1,#+256
   \   000000D4   0x6001             STR      R1,[R0, #+0]
    131              PORTE_BASE_PTR->PCR[25] = PORT_PCR_MUX(1); // CS
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable5_18  ;; 0x4004d064
   \   000000DA   0xF44F 0x7180      MOV      R1,#+256
   \   000000DE   0x6001             STR      R1,[R0, #+0]
    132              PORTE_BASE_PTR->PCR[26] = PORT_PCR_MUX(1); // RD
   \   000000E0   0x....             LDR.N    R0,??DataTable5_19  ;; 0x4004d068
   \   000000E2   0xF44F 0x7180      MOV      R1,#+256
   \   000000E6   0x6001             STR      R1,[R0, #+0]
    133              PORTE_BASE_PTR->PCR[27] = PORT_PCR_MUX(1); // WR
   \   000000E8   0x....             LDR.N    R0,??DataTable5_20  ;; 0x4004d06c
   \   000000EA   0xF44F 0x7180      MOV      R1,#+256
   \   000000EE   0x6001             STR      R1,[R0, #+0]
    134              PORTE_BASE_PTR->PCR[28] = PORT_PCR_MUX(1); // RESET
   \   000000F0   0x....             LDR.N    R0,??DataTable5_21  ;; 0x4004d070
   \   000000F2   0xF44F 0x7180      MOV      R1,#+256
   \   000000F6   0x6001             STR      R1,[R0, #+0]
    135              PTE_BASE_PTR->PDDR |= 0x1F000000u; //
   \   000000F8   0x....             LDR.N    R0,??DataTable5_22  ;; 0x400ff114
   \   000000FA   0x6800             LDR      R0,[R0, #+0]
   \   000000FC   0xF050 0x50F8      ORRS     R0,R0,#0x1F000000
   \   00000100   0x....             LDR.N    R1,??DataTable5_22  ;; 0x400ff114
   \   00000102   0x6008             STR      R0,[R1, #+0]
    136          }
   \   00000104   0x4770             BX       LR               ;; return
    137              

   \                                 In section .text, align 2, keep-with-next
    138          void LCD_writeIndex(uint16 Index_Input)
    139          {
   \                     LCD_writeIndex: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
    140              DC(0);CS(0);
   \   00000002   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0xF031 0x7180      BICS     R1,R1,#0x1000000
   \   0000000A   0x....             LDR.N    R2,??DataTable5_23  ;; 0x400ff100
   \   0000000C   0x6011             STR      R1,[R2, #+0]
   \   0000000E   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0xF031 0x7100      BICS     R1,R1,#0x2000000
   \   00000016   0x....             LDR.N    R2,??DataTable5_23  ;; 0x400ff100
   \   00000018   0x6011             STR      R1,[R2, #+0]
    141              vint32 Index = PTD_BASE_PTR->PDOR;
   \   0000001A   0x....             LDR.N    R1,??DataTable5_24  ;; 0x400ff0c0
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0x9100             STR      R1,[SP, #+0]
    142              Index &= ~0x0000FFFFu;
   \   00000020   0x9900             LDR      R1,[SP, #+0]
   \   00000022   0xF36F 0x010F      BFC      R1,#+0,#+16
   \   00000026   0x9100             STR      R1,[SP, #+0]
    143              Index |=  Index_Input;
   \   00000028   0x9900             LDR      R1,[SP, #+0]
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0x4308             ORRS     R0,R0,R1
   \   0000002E   0x9000             STR      R0,[SP, #+0]
    144              PTD_BASE_PTR->PDOR = Index;
   \   00000030   0x....             LDR.N    R0,??DataTable5_24  ;; 0x400ff0c0
   \   00000032   0x9900             LDR      R1,[SP, #+0]
   \   00000034   0x6001             STR      R1,[R0, #+0]
    145              WR(0);WR(1);CS(1);
   \   00000036   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF030 0x6000      BICS     R0,R0,#0x8000000
   \   0000003E   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000040   0x6008             STR      R0,[R1, #+0]
   \   00000042   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   0000004A   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   0000004C   0x6008             STR      R0,[R1, #+0]
   \   0000004E   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000056   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000058   0x6008             STR      R0,[R1, #+0]
    146          }
   \   0000005A   0xB001             ADD      SP,SP,#+4
   \   0000005C   0x4770             BX       LR               ;; return
    147          

   \                                 In section .text, align 2, keep-with-next
    148          void LCD_writeData(uint16 Data_Input)
    149          {
   \                     LCD_writeData: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
    150              DC(1);CS(0);
   \   00000002   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0xF051 0x7180      ORRS     R1,R1,#0x1000000
   \   0000000A   0x....             LDR.N    R2,??DataTable5_23  ;; 0x400ff100
   \   0000000C   0x6011             STR      R1,[R2, #+0]
   \   0000000E   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0xF031 0x7100      BICS     R1,R1,#0x2000000
   \   00000016   0x....             LDR.N    R2,??DataTable5_23  ;; 0x400ff100
   \   00000018   0x6011             STR      R1,[R2, #+0]
    151              vint32 Data = PTD_BASE_PTR->PDOR;
   \   0000001A   0x....             LDR.N    R1,??DataTable5_24  ;; 0x400ff0c0
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0x9100             STR      R1,[SP, #+0]
    152              Data &= ~0x0000FFFFu;
   \   00000020   0x9900             LDR      R1,[SP, #+0]
   \   00000022   0xF36F 0x010F      BFC      R1,#+0,#+16
   \   00000026   0x9100             STR      R1,[SP, #+0]
    153              Data |=  Data_Input;
   \   00000028   0x9900             LDR      R1,[SP, #+0]
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0x4308             ORRS     R0,R0,R1
   \   0000002E   0x9000             STR      R0,[SP, #+0]
    154              PTD_BASE_PTR->PDOR = Data;
   \   00000030   0x....             LDR.N    R0,??DataTable5_24  ;; 0x400ff0c0
   \   00000032   0x9900             LDR      R1,[SP, #+0]
   \   00000034   0x6001             STR      R1,[R0, #+0]
    155              WR(0);WR(1);CS(1);
   \   00000036   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF030 0x6000      BICS     R0,R0,#0x8000000
   \   0000003E   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000040   0x6008             STR      R0,[R1, #+0]
   \   00000042   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   0000004A   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   0000004C   0x6008             STR      R0,[R1, #+0]
   \   0000004E   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000056   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000058   0x6008             STR      R0,[R1, #+0]
    156          }
   \   0000005A   0xB001             ADD      SP,SP,#+4
   \   0000005C   0x4770             BX       LR               ;; return
    157          

   \                                 In section .text, align 2, keep-with-next
    158          void LCD_writeReg(uint16 Index,uint16 Data)
    159          {
   \                     LCD_writeReg: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    160              CS(0);
   \   00000004   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0xF031 0x7100      BICS     R1,R1,#0x2000000
   \   0000000C   0x....             LDR.N    R2,??DataTable5_23  ;; 0x400ff100
   \   0000000E   0x6011             STR      R1,[R2, #+0]
    161              LCD_writeIndex(Index);
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0x.... 0x....      BL       LCD_writeIndex
    162              LCD_writeData(Data);
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001A   0x.... 0x....      BL       LCD_writeData
    163              CS(1);
   \   0000001E   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000026   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000028   0x6008             STR      R0,[R1, #+0]
    164          }
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
    165          

   \                                 In section .text, align 2, keep-with-next
    166          unsigned short int LCD_readReg(uint16 Index_In)
    167          {
   \                     LCD_readReg: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    168              // ¶ÁÈ¡µÄÊý¾ÝÈ·ÊµÖ»ÓÐstatus colorsInPixels // By 0822
    169              // reading the display data from GDDRAM or reading the status from the status register
    170              PTD_BASE_PTR->PDDR |=  0x0000FFFFu; // ºóÊ®ÁùÎ»ÖÃÎªÊä³ö
   \   00000002   0x....             LDR.N    R1,??DataTable5_16  ;; 0x400ff0d4
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0xF441 0x417F      ORR      R1,R1,#0xFF00
   \   0000000A   0xF051 0x01FF      ORRS     R1,R1,#0xFF
   \   0000000E   0x....             LDR.N    R2,??DataTable5_16  ;; 0x400ff0d4
   \   00000010   0x6011             STR      R1,[R2, #+0]
    171              LCD_writeIndex(Index_In);  //Ð´ÈëÒª¶ÁµÄ¼Ä´æÆ÷ºÅ
   \   00000012   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0x.... 0x....      BL       LCD_writeIndex
    172          
    173              CS(1);DC(1);CS(0);WR(1);RD(0);
   \   00000018   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000020   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000022   0x6008             STR      R0,[R1, #+0]
   \   00000024   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   0000002C   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   0000002E   0x6008             STR      R0,[R1, #+0]
   \   00000030   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF030 0x7000      BICS     R0,R0,#0x2000000
   \   00000038   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   0000003A   0x6008             STR      R0,[R1, #+0]
   \   0000003C   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000044   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000046   0x6008             STR      R0,[R1, #+0]
   \   00000048   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF030 0x6080      BICS     R0,R0,#0x4000000
   \   00000050   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000052   0x6008             STR      R0,[R1, #+0]
    174              vint32 Index = PTD_BASE_PTR->PDOR;
   \   00000054   0x....             LDR.N    R0,??DataTable5_24  ;; 0x400ff0c0
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x9000             STR      R0,[SP, #+0]
    175              Index &= ~0x0000FFFFu;
   \   0000005A   0x9800             LDR      R0,[SP, #+0]
   \   0000005C   0xF36F 0x000F      BFC      R0,#+0,#+16
   \   00000060   0x9000             STR      R0,[SP, #+0]
    176              Index |=  0xFFFFu;
   \   00000062   0x9800             LDR      R0,[SP, #+0]
   \   00000064   0xF440 0x407F      ORR      R0,R0,#0xFF00
   \   00000068   0xF050 0x00FF      ORRS     R0,R0,#0xFF
   \   0000006C   0x9000             STR      R0,[SP, #+0]
    177              PTD_BASE_PTR->PDOR = Index;
   \   0000006E   0x....             LDR.N    R0,??DataTable5_24  ;; 0x400ff0c0
   \   00000070   0x9900             LDR      R1,[SP, #+0]
   \   00000072   0x6001             STR      R1,[R0, #+0]
    178              PTD_BASE_PTR->PDDR &= ~0x0000FFFFu; // ºóÊ®ÁùÎ»ÖÃÎªÊäÈë
   \   00000074   0x....             LDR.N    R0,??DataTable5_16  ;; 0x400ff0d4
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x0C00             LSRS     R0,R0,#+16
   \   0000007A   0x0400             LSLS     R0,R0,#+16
   \   0000007C   0x....             LDR.N    R1,??DataTable5_16  ;; 0x400ff0d4
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    179              RD(1);
   \   00000080   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF050 0x6080      ORRS     R0,R0,#0x4000000
   \   00000088   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    180              Index = PTD_BASE_PTR->PDIR & 0x0000FFFFu;
   \   0000008C   0x....             LDR.N    R0,??DataTable5_25  ;; 0x400ff0d0
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000092   0x9000             STR      R0,[SP, #+0]
    181              CS(1);
   \   00000094   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000009C   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   0000009E   0x6008             STR      R0,[R1, #+0]
    182              return Index;
   \   000000A0   0x9800             LDR      R0,[SP, #+0]
   \   000000A2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A4   0xBD02             POP      {R1,PC}          ;; return
    183          }
    184          
    185          

   \                                 In section .text, align 2, keep-with-next
    186          uint8 LCD_Init() // ·ÅÖÃÔÚPITÆô¶¯Ç°
    187          {
   \                     LCD_Init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    188              SIM_SCGC5 |= (SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTE_MASK);
   \   00000002   0x....             LDR.N    R0,??DataTable5_26  ;; 0x40048038
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x5040      ORRS     R0,R0,#0x3000
   \   0000000A   0x....             LDR.N    R1,??DataTable5_26  ;; 0x40048038
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    189              uint16 CodeDevice = 0;
   \   0000000E   0x2400             MOVS     R4,#+0
    190              uint16 timer = 0;
   \   00000010   0x2500             MOVS     R5,#+0
    191              LCD_PinInit(0);
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       LCD_PinInit
    192              RESET(0);
   \   00000018   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF030 0x5080      BICS     R0,R0,#0x10000000
   \   00000020   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000022   0x6008             STR      R0,[R1, #+0]
    193              vDelayMs(100);
   \   00000024   0x2064             MOVS     R0,#+100
   \   00000026   0x.... 0x....      BL       vDelayMs
    194              RESET(1);
   \   0000002A   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000032   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000034   0x6008             STR      R0,[R1, #+0]
    195              vDelayMs(100);
   \   00000036   0x2064             MOVS     R0,#+100
   \   00000038   0x.... 0x....      BL       vDelayMs
    196              do
    197              {
    198                  timer++;
   \                     ??LCD_Init_0: (+1)
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
    199                  LCD_PinInit(0);
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       LCD_PinInit
    200                  RESET(0);
   \   00000044   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF030 0x5080      BICS     R0,R0,#0x10000000
   \   0000004C   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    201                  vDelayMs(100);
   \   00000050   0x2064             MOVS     R0,#+100
   \   00000052   0x.... 0x....      BL       vDelayMs
    202                  RESET(1);
   \   00000056   0x....             LDR.N    R0,??DataTable5_23  ;; 0x400ff100
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   0000005E   0x....             LDR.N    R1,??DataTable5_23  ;; 0x400ff100
   \   00000060   0x6008             STR      R0,[R1, #+0]
    203                  vDelayMs(100);
   \   00000062   0x2064             MOVS     R0,#+100
   \   00000064   0x.... 0x....      BL       vDelayMs
    204                  CodeDevice = LCD_readReg(0x0000);
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      BL       LCD_readReg
   \   0000006E   0x0004             MOVS     R4,R0
    205                  vDelayMs(50);
   \   00000070   0x2032             MOVS     R0,#+50
   \   00000072   0x.... 0x....      BL       vDelayMs
    206                  if(timer > 3){return 0xFA;}
   \   00000076   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000078   0x2D04             CMP      R5,#+4
   \   0000007A   0xDB01             BLT.N    ??LCD_Init_1
   \   0000007C   0x20FA             MOVS     R0,#+250
   \   0000007E   0xE06F             B.N      ??LCD_Init_2
    207              }
    208              while( 0x8989 != CodeDevice );
   \                     ??LCD_Init_1: (+1)
   \   00000080   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000082   0xF648 0x1089      MOVW     R0,#+35209
   \   00000086   0x4284             CMP      R4,R0
   \   00000088   0xD1D8             BNE.N    ??LCD_Init_0
    209              
    210              LCD_PinInit(0);
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x.... 0x....      BL       LCD_PinInit
    211              // ´ò¿ª¾§Õñ
    212              LCD_writeReg(R00_OSC,0x0001);
   \   00000090   0x2101             MOVS     R1,#+1
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x.... 0x....      BL       LCD_writeReg
    213              //
    214              LCD_writeReg(R10_SleepMode,0x0000);         // ÍË³öÐÝÃß
   \   00000098   0x2100             MOVS     R1,#+0
   \   0000009A   0x2010             MOVS     R0,#+16
   \   0000009C   0x.... 0x....      BL       LCD_writeReg
    215              vDelayMs(50);
   \   000000A0   0x2032             MOVS     R0,#+50
   \   000000A2   0x.... 0x....      BL       vDelayMs
    216              
    217              LCD_writeReg(R01_DriverOutC,0x693F);        // ºáÆÁ // TB=0 RL=1 SM=0
   \   000000A6   0xF646 0x113F      MOVW     R1,#+26943
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0x.... 0x....      BL       LCD_writeReg
    218              // LCD_Reversal(0x693F,1,1); // ÇÐ»»ÎªÊúÆÁ
    219              
    220              LCD_writeReg(R07_DisplayC,0x0033);          //
   \   000000B0   0x2133             MOVS     R1,#+51
   \   000000B2   0x2007             MOVS     R0,#+7
   \   000000B4   0x.... 0x....      BL       LCD_writeReg
    221              LCD_writeReg(R11_EntryMode,0x6030);         // ×óÊÖ×ø±êÏµ
   \   000000B8   0xF246 0x0130      MOVW     R1,#+24624
   \   000000BC   0x2011             MOVS     R0,#+17
   \   000000BE   0x.... 0x....      BL       LCD_writeReg
    222              // LCD_writeReg(R11_EntryMode,0x6030);
    223              
    224              LCD_writeReg(R02_LCDdriveAC,0x0600);
   \   000000C2   0xF44F 0x61C0      MOV      R1,#+1536
   \   000000C6   0x2002             MOVS     R0,#+2
   \   000000C8   0x.... 0x....      BL       LCD_writeReg
    225              
    226              // Power supply setting
    227              LCD_writeReg(R03_PowerC_1,0xA8A4);          // 0xA8A4
   \   000000CC   0xF64A 0x01A4      MOVW     R1,#+43172
   \   000000D0   0x2003             MOVS     R0,#+3
   \   000000D2   0x.... 0x....      BL       LCD_writeReg
    228              LCD_writeReg(R0C_PowerC_2,0x0000);    
   \   000000D6   0x2100             MOVS     R1,#+0
   \   000000D8   0x200C             MOVS     R0,#+12
   \   000000DA   0x.... 0x....      BL       LCD_writeReg
    229              LCD_writeReg(R0D_PowerC_3,0x080C);   
   \   000000DE   0xF640 0x010C      MOVW     R1,#+2060
   \   000000E2   0x200D             MOVS     R0,#+13
   \   000000E4   0x.... 0x....      BL       LCD_writeReg
    230              LCD_writeReg(R0E_PowerC_4,0x2B00);    
   \   000000E8   0xF44F 0x512C      MOV      R1,#+11008
   \   000000EC   0x200E             MOVS     R0,#+14
   \   000000EE   0x.... 0x....      BL       LCD_writeReg
    231              LCD_writeReg(R1E_PowerC_5,0x00B0);
   \   000000F2   0x21B0             MOVS     R1,#+176
   \   000000F4   0x201E             MOVS     R0,#+30
   \   000000F6   0x.... 0x....      BL       LCD_writeReg
    232          
    233              // ¿ª´°ÉèÖÃ
    234              ///LCD_writeReg(0x0044,0xEF00); //Ë®Æ½RAMµÄÆðÊ¼-½áÊøµØÖ·Î»ÖÃ (00~EF)
    235              ///LCD_writeReg(0x0045,0x0000);  //´¹Ö±RAMµÄÆðÊ¼µØÖ· 00
    236              ///LCD_writeReg(0x0046,0x013F); //´¹Ö±RAMµÄ½áÊøµØÖ· 13F
    237              
    238              // Gama¿ØÖÆ
    239              LCD_writeReg(0x0030,0x0101);  
   \   000000FA   0xF240 0x1101      MOVW     R1,#+257
   \   000000FE   0x2030             MOVS     R0,#+48
   \   00000100   0x.... 0x....      BL       LCD_writeReg
    240              LCD_writeReg(0x0031,0x0101);  
   \   00000104   0xF240 0x1101      MOVW     R1,#+257
   \   00000108   0x2031             MOVS     R0,#+49
   \   0000010A   0x.... 0x....      BL       LCD_writeReg
    241              LCD_writeReg(0x0032,0x0101);  
   \   0000010E   0xF240 0x1101      MOVW     R1,#+257
   \   00000112   0x2032             MOVS     R0,#+50
   \   00000114   0x.... 0x....      BL       LCD_writeReg
    242              LCD_writeReg(0x0033,0x0101);  
   \   00000118   0xF240 0x1101      MOVW     R1,#+257
   \   0000011C   0x2033             MOVS     R0,#+51
   \   0000011E   0x.... 0x....      BL       LCD_writeReg
    243              LCD_writeReg(0x0034,0x0101);  
   \   00000122   0xF240 0x1101      MOVW     R1,#+257
   \   00000126   0x2034             MOVS     R0,#+52
   \   00000128   0x.... 0x....      BL       LCD_writeReg
    244              LCD_writeReg(0x0035,0x0101);  
   \   0000012C   0xF240 0x1101      MOVW     R1,#+257
   \   00000130   0x2035             MOVS     R0,#+53
   \   00000132   0x.... 0x....      BL       LCD_writeReg
    245              LCD_writeReg(0x0036,0x0101);  
   \   00000136   0xF240 0x1101      MOVW     R1,#+257
   \   0000013A   0x2036             MOVS     R0,#+54
   \   0000013C   0x.... 0x....      BL       LCD_writeReg
    246              LCD_writeReg(0x0037,0x0101);  
   \   00000140   0xF240 0x1101      MOVW     R1,#+257
   \   00000144   0x2037             MOVS     R0,#+55
   \   00000146   0x.... 0x....      BL       LCD_writeReg
    247              LCD_writeReg(0x003A,0x0101);  
   \   0000014A   0xF240 0x1101      MOVW     R1,#+257
   \   0000014E   0x203A             MOVS     R0,#+58
   \   00000150   0x.... 0x....      BL       LCD_writeReg
    248              LCD_writeReg(0x003B,0x0101);
   \   00000154   0xF240 0x1101      MOVW     R1,#+257
   \   00000158   0x203B             MOVS     R0,#+59
   \   0000015A   0x.... 0x....      BL       LCD_writeReg
    249          
    250              return 0;
   \   0000015E   0x2000             MOVS     R0,#+0
   \                     ??LCD_Init_2: (+1)
   \   00000160   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    251          }
    252          

   \                                 In section .text, align 2, keep-with-next
    253          void LCD_SetCursor( uint16 X, uint16 Y ) // ÉèÖÃÆðÊ¼µã
    254          {
   \                     LCD_SetCursor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    255              // ºáÆÁ
    256              LCD_writeReg(0x004f, X); 
   \   00000004   0x0001             MOVS     R1,R0
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0x204F             MOVS     R0,#+79
   \   0000000A   0x.... 0x....      BL       LCD_writeReg
    257              LCD_writeReg(0x004e, Y);
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x204E             MOVS     R0,#+78
   \   00000014   0x.... 0x....      BL       LCD_writeReg
    258              
    259          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    260          

   \                                 In section .text, align 2, keep-with-next
    261          void LCD_Reversal( uint16 Reg_DriverOutPut , uint8 isUpDownRev , uint8 isLeftRev ) // ÉÏÏÂ·´×ª(³¤µÄ¶¨ÒåÎªÉÏÏÂ) // ×óÓÒ·´×ª
    262          {
   \                     LCD_Reversal: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    263              {// SSD1289 //
    264                  if(1 == isUpDownRev) // ¸Ä±äTB
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2901             CMP      R1,#+1
   \   00000006   0xD102             BNE.N    ??LCD_Reversal_0
    265                  {__Pin_Set_(Reg_DriverOutPut,9,1);}
   \   00000008   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   0000000C   0xE002             B.N      ??LCD_Reversal_1
    266                  else{__Pin_Set_(Reg_DriverOutPut,9,0);}
   \                     ??LCD_Reversal_0: (+1)
   \   0000000E   0xF64F 0x51FF      MOVW     R1,#+65023
   \   00000012   0x4008             ANDS     R0,R1,R0
    267                  if(1 == isLeftRev) // ¸Ä±äRL
   \                     ??LCD_Reversal_1: (+1)
   \   00000014   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000016   0x2A01             CMP      R2,#+1
   \   00000018   0xD102             BNE.N    ??LCD_Reversal_2
    268                  {__Pin_Set_(Reg_DriverOutPut,14,1);}
   \   0000001A   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   0000001E   0xE002             B.N      ??LCD_Reversal_3
    269                  else{__Pin_Set_(Reg_DriverOutPut,14,0);}
   \                     ??LCD_Reversal_2: (+1)
   \   00000020   0xF64B 0x71FF      MOVW     R1,#+49151
   \   00000024   0x4008             ANDS     R0,R1,R0
    270                  LCD_writeReg(R01_DriverOutC,Reg_DriverOutPut);
   \                     ??LCD_Reversal_3: (+1)
   \   00000026   0x0001             MOVS     R1,R0
   \   00000028   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       LCD_writeReg
    271              }
    272          }
   \   00000030   0xBD01             POP      {R0,PC}          ;; return
    273          

   \                                 In section .text, align 2, keep-with-next
    274          void LCD_SetPath( uint8 Path ) // ÉèÖÃ·½Ïò // ÉÏÏÂx ×óÓÒy
    275          {
   \                     LCD_SetPath: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    276              switch( Path )
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD00B             BEQ.N    ??LCD_SetPath_0
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD015             BEQ.N    ??LCD_SetPath_1
   \   0000000C   0xD30E             BCC.N    ??LCD_SetPath_2
   \   0000000E   0x2804             CMP      R0,#+4
   \   00000010   0xD01E             BEQ.N    ??LCD_SetPath_3
   \   00000012   0xD317             BCC.N    ??LCD_SetPath_4
   \   00000014   0x2806             CMP      R0,#+6
   \   00000016   0xD027             BEQ.N    ??LCD_SetPath_5
   \   00000018   0xD320             BCC.N    ??LCD_SetPath_6
   \   0000001A   0x2807             CMP      R0,#+7
   \   0000001C   0xD02A             BEQ.N    ??LCD_SetPath_7
   \   0000001E   0xE02E             B.N      ??LCD_SetPath_8
    277              {
    278                  case 0:LCD_writeReg(R11_EntryMode,0x6010); // ÓÒÉÏ
   \                     ??LCD_SetPath_0: (+1)
   \   00000020   0xF246 0x0110      MOVW     R1,#+24592
   \   00000024   0x2011             MOVS     R0,#+17
   \   00000026   0x.... 0x....      BL       LCD_writeReg
    279                  break;
   \   0000002A   0xE028             B.N      ??LCD_SetPath_8
    280                  case 1:LCD_writeReg(R11_EntryMode,0x6030); // ÓÒÏÂ
   \                     ??LCD_SetPath_2: (+1)
   \   0000002C   0xF246 0x0130      MOVW     R1,#+24624
   \   00000030   0x2011             MOVS     R0,#+17
   \   00000032   0x.... 0x....      BL       LCD_writeReg
    281                  break;
   \   00000036   0xE022             B.N      ??LCD_SetPath_8
    282                  case 2:LCD_writeReg(R11_EntryMode,0x6000); // ×óÉÏ
   \                     ??LCD_SetPath_1: (+1)
   \   00000038   0xF44F 0x41C0      MOV      R1,#+24576
   \   0000003C   0x2011             MOVS     R0,#+17
   \   0000003E   0x.... 0x....      BL       LCD_writeReg
    283                  break;
   \   00000042   0xE01C             B.N      ??LCD_SetPath_8
    284                  case 3:LCD_writeReg(R11_EntryMode,0x6020); // ×óÏÂ
   \                     ??LCD_SetPath_4: (+1)
   \   00000044   0xF246 0x0120      MOVW     R1,#+24608
   \   00000048   0x2011             MOVS     R0,#+17
   \   0000004A   0x.... 0x....      BL       LCD_writeReg
    285                  break;
   \   0000004E   0xE016             B.N      ??LCD_SetPath_8
    286                  case 4:LCD_writeReg(R11_EntryMode,0x6038); // ÏÂÓÒ
   \                     ??LCD_SetPath_3: (+1)
   \   00000050   0xF246 0x0138      MOVW     R1,#+24632
   \   00000054   0x2011             MOVS     R0,#+17
   \   00000056   0x.... 0x....      BL       LCD_writeReg
    287                  break;
   \   0000005A   0xE010             B.N      ??LCD_SetPath_8
    288                  case 5:LCD_writeReg(R11_EntryMode,0x6028); // ÏÂ×ó
   \                     ??LCD_SetPath_6: (+1)
   \   0000005C   0xF246 0x0128      MOVW     R1,#+24616
   \   00000060   0x2011             MOVS     R0,#+17
   \   00000062   0x.... 0x....      BL       LCD_writeReg
    289                  break;
   \   00000066   0xE00A             B.N      ??LCD_SetPath_8
    290                  case 6:LCD_writeReg(R11_EntryMode,0x6018); // ÉÏÓÒ
   \                     ??LCD_SetPath_5: (+1)
   \   00000068   0xF246 0x0118      MOVW     R1,#+24600
   \   0000006C   0x2011             MOVS     R0,#+17
   \   0000006E   0x.... 0x....      BL       LCD_writeReg
    291                  break;
   \   00000072   0xE004             B.N      ??LCD_SetPath_8
    292                  case 7:LCD_writeReg(R11_EntryMode,0x6008); // ÉÏ×ó
   \                     ??LCD_SetPath_7: (+1)
   \   00000074   0xF246 0x0108      MOVW     R1,#+24584
   \   00000078   0x2011             MOVS     R0,#+17
   \   0000007A   0x.... 0x....      BL       LCD_writeReg
    293                  break;
    294              }
    295          }
   \                     ??LCD_SetPath_8: (+1)
   \   0000007E   0xBD01             POP      {R0,PC}          ;; return
    296          

   \                                 In section .text, align 2, keep-with-next
    297          void LCD_SetPoint(uint16 Xpos,uint16 Ypos,uint16 Color)
    298          {
   \                     LCD_SetPoint: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0014             MOVS     R4,R2
    299              LCD_SetCursor(Xpos,Ypos);
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0x.... 0x....      BL       LCD_SetCursor
    300              LCD_writeReg(DRAWPOINT,Color);
   \   0000000C   0x0021             MOVS     R1,R4
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0x2022             MOVS     R0,#+34
   \   00000012   0x.... 0x....      BL       LCD_writeReg
    301          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    302          
    303          // ´¹Ö±»òË®Æ½»­Ïß

   \                                 In section .text, align 2, keep-with-next
    304          void LCD_SetLine(uint16 Xgaia,uint16 Ygaia,uint16 Length,uint16 Color)
    305          {
   \                     LCD_SetLine: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0014             MOVS     R4,R2
   \   00000004   0x001D             MOVS     R5,R3
    306              LCD_SetCursor(Xgaia,Ygaia);
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x.... 0x....      BL       LCD_SetCursor
   \   0000000E   0xE005             B.N      ??LCD_SetLine_0
    307              while(Length > 0)
    308              {
    309                  LCD_writeReg( DRAWPOINT , Color );
   \                     ??LCD_SetLine_1: (+1)
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x2022             MOVS     R0,#+34
   \   00000016   0x.... 0x....      BL       LCD_writeReg
    310                  Length --;
   \   0000001A   0x1E64             SUBS     R4,R4,#+1
    311              }
   \                     ??LCD_SetLine_0: (+1)
   \   0000001C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001E   0x2C00             CMP      R4,#+0
   \   00000020   0xD1F6             BNE.N    ??LCD_SetLine_1
    312          }
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    313          

   \                                 In section .text, align 2, keep-with-next
    314          void LCD_SetSquare(uint16 Xgaia,uint16 Ygaia,uint16 Width,uint16 Length,uint16 Color)
    315          {
   \                     LCD_SetSquare: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0015             MOVS     R5,R2
   \   00000004   0x001E             MOVS     R6,R3
    316              uint16 tempForLoop = 0;
   \   00000006   0x2700             MOVS     R7,#+0
    317              LCD_SetCursor(Xgaia,Ygaia); // ÉèÖÃ»ù±¾µã
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x.... 0x....      BL       LCD_SetCursor
    318              LCD_SetPath(4); // ÏÂÓÒ // ÑØ×ÅxÐÐ×ß xÎª¿í
   \   00000010   0x2004             MOVS     R0,#+4
   \   00000012   0x.... 0x....      BL       LCD_SetPath
    319              tempForLoop = Width;
   \   00000016   0x002F             MOVS     R7,R5
   \   00000018   0x9C06             LDR      R4,[SP, #+24]
   \   0000001A   0xE004             B.N      ??LCD_SetSquare_0
    320              while(tempForLoop--){LCD_writeReg(DRAWPOINT,Color);}
   \                     ??LCD_SetSquare_1: (+1)
   \   0000001C   0x0021             MOVS     R1,R4
   \   0000001E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000020   0x2022             MOVS     R0,#+34
   \   00000022   0x.... 0x....      BL       LCD_writeReg
   \                     ??LCD_SetSquare_0: (+1)
   \   00000026   0x0038             MOVS     R0,R7
   \   00000028   0x1E47             SUBS     R7,R0,#+1
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD1F5             BNE.N    ??LCD_SetSquare_1
    321              LCD_SetPath(1); // ÓÒÏÂ // ÑØ×ÅyÐÐ×ß yÎª³¤
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       LCD_SetPath
    322              tempForLoop = Length;
   \   00000036   0x0037             MOVS     R7,R6
   \   00000038   0xE004             B.N      ??LCD_SetSquare_2
    323              while(tempForLoop--){LCD_writeReg(DRAWPOINT,Color);}
   \                     ??LCD_SetSquare_3: (+1)
   \   0000003A   0x0021             MOVS     R1,R4
   \   0000003C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003E   0x2022             MOVS     R0,#+34
   \   00000040   0x.... 0x....      BL       LCD_writeReg
   \                     ??LCD_SetSquare_2: (+1)
   \   00000044   0x0038             MOVS     R0,R7
   \   00000046   0x1E47             SUBS     R7,R0,#+1
   \   00000048   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD1F5             BNE.N    ??LCD_SetSquare_3
    324              LCD_SetPath(7); // ÉÏ×ó // ÑØ×ÅxÐÐ×ß xÎª¿í
   \   0000004E   0x2007             MOVS     R0,#+7
   \   00000050   0x.... 0x....      BL       LCD_SetPath
    325              tempForLoop = Width;
   \   00000054   0x002F             MOVS     R7,R5
   \   00000056   0xE004             B.N      ??LCD_SetSquare_4
    326              while(tempForLoop--){LCD_writeReg(DRAWPOINT,Color);}
   \                     ??LCD_SetSquare_5: (+1)
   \   00000058   0x0021             MOVS     R1,R4
   \   0000005A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005C   0x2022             MOVS     R0,#+34
   \   0000005E   0x.... 0x....      BL       LCD_writeReg
   \                     ??LCD_SetSquare_4: (+1)
   \   00000062   0x0038             MOVS     R0,R7
   \   00000064   0x1E47             SUBS     R7,R0,#+1
   \   00000066   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD1F5             BNE.N    ??LCD_SetSquare_5
    327              LCD_SetPath(2); // ×óÉÏ // ÑØ×ÅyÐÐ×ß yÎª³¤
   \   0000006C   0x2002             MOVS     R0,#+2
   \   0000006E   0x.... 0x....      BL       LCD_SetPath
    328              tempForLoop = Length;
   \   00000072   0x0037             MOVS     R7,R6
   \   00000074   0xE004             B.N      ??LCD_SetSquare_6
    329              while(tempForLoop--){LCD_writeReg(DRAWPOINT,Color);}
   \                     ??LCD_SetSquare_7: (+1)
   \   00000076   0x0021             MOVS     R1,R4
   \   00000078   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000007A   0x2022             MOVS     R0,#+34
   \   0000007C   0x.... 0x....      BL       LCD_writeReg
   \                     ??LCD_SetSquare_6: (+1)
   \   00000080   0x0038             MOVS     R0,R7
   \   00000082   0x1E47             SUBS     R7,R0,#+1
   \   00000084   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD1F5             BNE.N    ??LCD_SetSquare_7
    330          }
   \   0000008A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    331          

   \                                 In section .text, align 2, keep-with-next
    332          void LCD_SetArrow(uint16 Xgaia,uint16 Ygaia,uint8 anglePos,uint16 Color)
    333          {
   \                     LCD_SetArrow: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x001E             MOVS     R6,R3
    334              switch( anglePos ) // ËÄ¸ö½Ç¶È·½Ïò
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x2A00             CMP      R2,#+0
   \   0000000C   0xD005             BEQ.N    ??LCD_SetArrow_0
   \   0000000E   0x2A02             CMP      R2,#+2
   \   00000010   0xD045             BEQ.N    ??LCD_SetArrow_1
   \   00000012   0xD323             BCC.N    ??LCD_SetArrow_2
   \   00000014   0x2A03             CMP      R2,#+3
   \   00000016   0xD063             BEQ.N    ??LCD_SetArrow_3
   \   00000018   0xE082             B.N      ??LCD_SetArrow_4
    335              {
    336                  case 0:LCD_SetPoint(Xgaia-1,Ygaia-1,Color);
   \                     ??LCD_SetArrow_0: (+1)
   \   0000001A   0x0032             MOVS     R2,R6
   \   0000001C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001E   0x1E69             SUBS     R1,R5,#+1
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x1E60             SUBS     R0,R4,#+1
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0x.... 0x....      BL       LCD_SetPoint
    337                         LCD_SetPoint(Xgaia-2,Ygaia-2,Color);
   \   0000002A   0x0032             MOVS     R2,R6
   \   0000002C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002E   0x1EA9             SUBS     R1,R5,#+2
   \   00000030   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000032   0x1EA0             SUBS     R0,R4,#+2
   \   00000034   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000036   0x.... 0x....      BL       LCD_SetPoint
    338                         LCD_SetPoint(Xgaia-3,Ygaia-3,Color);
   \   0000003A   0x0032             MOVS     R2,R6
   \   0000003C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003E   0x1EE9             SUBS     R1,R5,#+3
   \   00000040   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000042   0x1EE0             SUBS     R0,R4,#+3
   \   00000044   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000046   0x.... 0x....      BL       LCD_SetPoint
    339                         LCD_SetPoint(Xgaia-4,Ygaia-4,Color);
   \   0000004A   0x0032             MOVS     R2,R6
   \   0000004C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004E   0x1F29             SUBS     R1,R5,#+4
   \   00000050   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000052   0x1F20             SUBS     R0,R4,#+4
   \   00000054   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000056   0x.... 0x....      BL       LCD_SetPoint
    340                        // LCD_SetPoint(Xgaia-5,Ygaia-5,Color);
    341                  break;
   \   0000005A   0xE061             B.N      ??LCD_SetArrow_4
    342                  case 1:LCD_SetPoint(Xgaia-1,Ygaia+1,Color);
   \                     ??LCD_SetArrow_2: (+1)
   \   0000005C   0x0032             MOVS     R2,R6
   \   0000005E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000060   0x1C69             ADDS     R1,R5,#+1
   \   00000062   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000064   0x1E60             SUBS     R0,R4,#+1
   \   00000066   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000068   0x.... 0x....      BL       LCD_SetPoint
    343                         LCD_SetPoint(Xgaia-2,Ygaia+2,Color);
   \   0000006C   0x0032             MOVS     R2,R6
   \   0000006E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000070   0x1CA9             ADDS     R1,R5,#+2
   \   00000072   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000074   0x1EA0             SUBS     R0,R4,#+2
   \   00000076   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000078   0x.... 0x....      BL       LCD_SetPoint
    344                         LCD_SetPoint(Xgaia-3,Ygaia+3,Color);
   \   0000007C   0x0032             MOVS     R2,R6
   \   0000007E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000080   0x1CE9             ADDS     R1,R5,#+3
   \   00000082   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000084   0x1EE0             SUBS     R0,R4,#+3
   \   00000086   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000088   0x.... 0x....      BL       LCD_SetPoint
    345                         LCD_SetPoint(Xgaia-4,Ygaia+4,Color);
   \   0000008C   0x0032             MOVS     R2,R6
   \   0000008E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000090   0x1D29             ADDS     R1,R5,#+4
   \   00000092   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000094   0x1F20             SUBS     R0,R4,#+4
   \   00000096   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000098   0x.... 0x....      BL       LCD_SetPoint
    346                        // LCD_SetPoint(Xgaia-5,Ygaia+5,Color);
    347                  break;
   \   0000009C   0xE040             B.N      ??LCD_SetArrow_4
    348                  case 2:LCD_SetPoint(Xgaia+1,Ygaia-1,Color);
   \                     ??LCD_SetArrow_1: (+1)
   \   0000009E   0x0032             MOVS     R2,R6
   \   000000A0   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000A2   0x1E69             SUBS     R1,R5,#+1
   \   000000A4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000A6   0x1C60             ADDS     R0,R4,#+1
   \   000000A8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000AA   0x.... 0x....      BL       LCD_SetPoint
    349                         LCD_SetPoint(Xgaia+2,Ygaia-2,Color);
   \   000000AE   0x0032             MOVS     R2,R6
   \   000000B0   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000B2   0x1EA9             SUBS     R1,R5,#+2
   \   000000B4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000B6   0x1CA0             ADDS     R0,R4,#+2
   \   000000B8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000BA   0x.... 0x....      BL       LCD_SetPoint
    350                         LCD_SetPoint(Xgaia+3,Ygaia-3,Color);
   \   000000BE   0x0032             MOVS     R2,R6
   \   000000C0   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000C2   0x1EE9             SUBS     R1,R5,#+3
   \   000000C4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000C6   0x1CE0             ADDS     R0,R4,#+3
   \   000000C8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CA   0x.... 0x....      BL       LCD_SetPoint
    351                         LCD_SetPoint(Xgaia+4,Ygaia-4,Color);
   \   000000CE   0x0032             MOVS     R2,R6
   \   000000D0   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000D2   0x1F29             SUBS     R1,R5,#+4
   \   000000D4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000D6   0x1D20             ADDS     R0,R4,#+4
   \   000000D8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DA   0x.... 0x....      BL       LCD_SetPoint
    352                        // LCD_SetPoint(Xgaia+5,Ygaia-5,Color);
    353                  break;
   \   000000DE   0xE01F             B.N      ??LCD_SetArrow_4
    354                  case 3:LCD_SetPoint(Xgaia+1,Ygaia+1,Color);
   \                     ??LCD_SetArrow_3: (+1)
   \   000000E0   0x0032             MOVS     R2,R6
   \   000000E2   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000E4   0x1C69             ADDS     R1,R5,#+1
   \   000000E6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000E8   0x1C60             ADDS     R0,R4,#+1
   \   000000EA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000EC   0x.... 0x....      BL       LCD_SetPoint
    355                         LCD_SetPoint(Xgaia+2,Ygaia+2,Color);
   \   000000F0   0x0032             MOVS     R2,R6
   \   000000F2   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000F4   0x1CA9             ADDS     R1,R5,#+2
   \   000000F6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000F8   0x1CA0             ADDS     R0,R4,#+2
   \   000000FA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000FC   0x.... 0x....      BL       LCD_SetPoint
    356                         LCD_SetPoint(Xgaia+3,Ygaia+3,Color);
   \   00000100   0x0032             MOVS     R2,R6
   \   00000102   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000104   0x1CE9             ADDS     R1,R5,#+3
   \   00000106   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000108   0x1CE0             ADDS     R0,R4,#+3
   \   0000010A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000010C   0x.... 0x....      BL       LCD_SetPoint
    357                         LCD_SetPoint(Xgaia+4,Ygaia+4,Color);
   \   00000110   0x0032             MOVS     R2,R6
   \   00000112   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000114   0x1D29             ADDS     R1,R5,#+4
   \   00000116   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000118   0x1D20             ADDS     R0,R4,#+4
   \   0000011A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000011C   0x.... 0x....      BL       LCD_SetPoint
    358                        // LCD_SetPoint(Xgaia+5,Ygaia+5,Color);
    359                  break;
    360              }
    361          }
   \                     ??LCD_SetArrow_4: (+1)
   \   00000120   0xBD70             POP      {R4-R6,PC}       ;; return
    362          

   \                                 In section .text, align 2, keep-with-next
    363          void LCD_Clear(uint16 Color)
    364          {
   \                     LCD_Clear: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    365              uint32 index=0;
   \   00000004   0x2500             MOVS     R5,#+0
    366              LCD_SetCursor(0,0);
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       LCD_SetCursor
    367              LCD_writeIndex(DRAWPOINT);
   \   0000000E   0x2022             MOVS     R0,#+34
   \   00000010   0x.... 0x....      BL       LCD_writeIndex
    368              for( index = 0; index < 76800; index++ )
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0005             MOVS     R5,R0
   \   00000018   0xE004             B.N      ??LCD_Clear_0
    369              {
    370                  LCD_writeData(Color);
   \                     ??LCD_Clear_1: (+1)
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001E   0x.... 0x....      BL       LCD_writeData
    371              }
   \   00000022   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_Clear_0: (+1)
   \   00000024   0xF5B5 0x3F96      CMP      R5,#+76800
   \   00000028   0xD3F7             BCC.N    ??LCD_Clear_1
    372          }
   \   0000002A   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x4004C000         DC32     0x4004c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x4004C004         DC32     0x4004c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x4004C008         DC32     0x4004c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x4004C00C         DC32     0x4004c00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x4004C010         DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x4004C014         DC32     0x4004c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x4004C01C         DC32     0x4004c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x4004C020         DC32     0x4004c020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x4004C024         DC32     0x4004c024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x4004C028         DC32     0x4004c028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x4004C02C         DC32     0x4004c02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x4004C030         DC32     0x4004c030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x4004C034         DC32     0x4004c034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x4004C038         DC32     0x4004c038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x4004C03C         DC32     0x4004c03c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x400FF0D4         DC32     0x400ff0d4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x4004D060         DC32     0x4004d060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x4004D064         DC32     0x4004d064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x4004D068         DC32     0x4004d068

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0x4004D06C         DC32     0x4004d06c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0x4004D070         DC32     0x4004d070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_22:
   \   00000000   0x400FF114         DC32     0x400ff114

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_23:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_24:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_25:
   \   00000000   0x400FF0D0         DC32     0x400ff0d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_26:
   \   00000000   0x40048038         DC32     0x40048038

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   LCD_Clear
        16   -> LCD_SetCursor
        16   -> LCD_writeData
        16   -> LCD_writeIndex
      16   LCD_Init
        16   -> LCD_PinInit
        16   -> LCD_readReg
        16   -> LCD_writeReg
        16   -> vDelayMs
       0   LCD_PinInit
       8   LCD_Reversal
         8   -> LCD_writeReg
      16   LCD_SetArrow
        16   -> LCD_SetPoint
       8   LCD_SetCursor
         8   -> LCD_writeReg
      16   LCD_SetLine
        16   -> LCD_SetCursor
        16   -> LCD_writeReg
       8   LCD_SetPath
         8   -> LCD_writeReg
       8   LCD_SetPoint
         8   -> LCD_SetCursor
         8   -> LCD_writeReg
      24   LCD_SetSquare
        24   -> LCD_SetCursor
        24   -> LCD_SetPath
        24   -> LCD_writeReg
       8   LCD_readReg
         8   -> LCD_writeIndex
       4   LCD_writeData
       4   LCD_writeIndex
       8   LCD_writeReg
         8   -> LCD_writeData
         8   -> LCD_writeIndex


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_23
       4  ??DataTable5_24
       4  ??DataTable5_25
       4  ??DataTable5_26
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      44  LCD_Clear
     354  LCD_Init
     262  LCD_PinInit
      50  LCD_Reversal
     290  LCD_SetArrow
      26  LCD_SetCursor
      36  LCD_SetLine
     128  LCD_SetPath
      24  LCD_SetPoint
     140  LCD_SetSquare
     166  LCD_readReg
      94  LCD_writeData
      94  LCD_writeIndex
      44  LCD_writeReg

 
 1 860 bytes in section .text
 
 1 860 bytes of CODE memory

Errors: none
Warnings: none
