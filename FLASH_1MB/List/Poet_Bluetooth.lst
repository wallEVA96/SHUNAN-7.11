###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      20/Jul/2015  17:10:46 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ShunAn_Panel\Poet_Bluetooth.c              #
#    Command line =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ShunAn_Panel\Poet_Bluetooth.c -D IAR -D    #
#                    TWR_K60F120M -lCN D:\创作室\飞思卡尔智能小车\顺暗三号\代 #
#                    码\顺暗三号-华南赛最后七天-7.11\FLASH_1MB\List\ -lB      #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\List\ -o                         #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\Obj\ --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ -I D:\创作室\飞思卡尔智能小车\顺暗三号\代 #
#                    码\顺暗三号-华南赛最后七天-7.11\Library\ -I              #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\Library\BlessedAlien\ -I                   #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ShunAn_Panel\ -Ol --use_c++_inline         #
#    List file    =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\List\Poet_Bluetooth.lst          #
#    Object file  =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\Obj\Poet_Bluetooth.o             #
#                                                                             #
#                                                                             #
###############################################################################

D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛最后七天-7.11\ShunAn_Panel\Poet_Bluetooth.c
      1          /**
      2          /. -----------------------//k60底层库//-------------------------
      3          
      4          /. 测试硬件平台：K60
      5           . 版权所有：朱葛峻 
      6           . 制作者：朱葛峻
      7           . 文件名：alienUART.c
      8           . 用途：
      9           . 最后修改日期: 20140117
     10          */
     11          #include "MK60F15.h"
     12          #include "ShunAn_Lib.h"
     13          #include "start_ShunAn.h"
     14          #include "BlessedAlien.h"
     15          
     16          #include "Pendulum_EndlessFormsMostBeautiful.h"
     17          
     18          #include "Poet_ImageBeholder.h"
     19          #include "Poet_Bluetooth.h"
     20          #include <stdio.h>
     21          #define Bluetooth_BasePtr             UART3_BASE_PTR
     22          //============================================================================//
     23          //E5
     24          //E4
     25          //GND
     26          //VCC

   \                                 In section .bss, align 4
     27          s_need_tx m_need_tx;
   \                     m_need_tx:
   \   00000000                      DS8 28504

   \                                 In section .text, align 2, keep-with-next
     28          void v_UartInit(uint32 BaudRate)
     29          {   
   \                     v_UartInit: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     30              // 常参量
     31              uint32 tempReg  = 0;
   \   00000002   0x2100             MOVS     R1,#+0
     32              uint32 BdRtBits = 0;
   \   00000004   0x2200             MOVS     R2,#+0
     33              uint32 BRFAdjst = 0;
   \   00000006   0x2300             MOVS     R3,#+0
     34              
     35              // 设置时钟
     36              SIM_SCGC4 |= SIM_SCGC4_UART3_MASK;
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable8  ;; 0x40048034
   \   0000000C   0x6824             LDR      R4,[R4, #+0]
   \   0000000E   0xF454 0x5400      ORRS     R4,R4,#0x2000
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable8  ;; 0x40048034
   \   00000016   0x602C             STR      R4,[R5, #+0]
     37              SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK ;
   \   00000018   0x.... 0x....      LDR.W    R4,??DataTable8_1  ;; 0x40048038
   \   0000001C   0x6824             LDR      R4,[R4, #+0]
   \   0000001E   0xF454 0x5400      ORRS     R4,R4,#0x2000
   \   00000022   0x.... 0x....      LDR.W    R5,??DataTable8_1  ;; 0x40048038
   \   00000026   0x602C             STR      R4,[R5, #+0]
     38              // 设置引脚参数
     39              PORTE_PCR4 = PORT_PCR_MUX(3);//引脚复用选择UART4_TX
   \   00000028   0x.... 0x....      LDR.W    R4,??DataTable8_2  ;; 0x4004d010
   \   0000002C   0xF44F 0x7540      MOV      R5,#+768
   \   00000030   0x6025             STR      R5,[R4, #+0]
     40              PORTE_PCR5 = PORT_PCR_MUX(3);//引脚复用选择UART4_RX
   \   00000032   0x.... 0x....      LDR.W    R4,??DataTable8_3  ;; 0x4004d014
   \   00000036   0xF44F 0x7540      MOV      R5,#+768
   \   0000003A   0x6025             STR      R5,[R4, #+0]
     41              
     42              // 关闭接收及发送器，等待触发时波特率生成
     43              (Bluetooth_BasePtr)->C2 &= ~( UART_C2_TE_MASK | UART_C2_RE_MASK );
   \   0000003C   0x.... 0x....      LDR.W    R4,??DataTable8_4  ;; 0x4006d003
   \   00000040   0x7824             LDRB     R4,[R4, #+0]
   \   00000042   0xF014 0x04F3      ANDS     R4,R4,#0xF3
   \   00000046   0x.... 0x....      LDR.W    R5,??DataTable8_4  ;; 0x4006d003
   \   0000004A   0x702C             STRB     R4,[R5, #+0]
     44              
     45              // C1设置默认
     46              (Bluetooth_BasePtr)->C1  = 0;
   \   0000004C   0x.... 0x....      LDR.W    R4,??DataTable8_5  ;; 0x4006d002
   \   00000050   0x2500             MOVS     R5,#+0
   \   00000052   0x7025             STRB     R5,[R4, #+0]
     47              
     48              // 设置波特率
     49              // 设置 Band Rate Bits
     50              BdRtBits = (uint16)((bus_clk_khz * 1000)/(BaudRate << 4));
   \   00000054   0x.... 0x....      LDR.W    R4,??DataTable8_6
   \   00000058   0x6824             LDR      R4,[R4, #+0]
   \   0000005A   0xF44F 0x757A      MOV      R5,#+1000
   \   0000005E   0x436C             MULS     R4,R5,R4
   \   00000060   0x0105             LSLS     R5,R0,#+4
   \   00000062   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   00000066   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000068   0x0022             MOVS     R2,R4
     51              tempReg = UART_BDH_REG(Bluetooth_BasePtr) & ~(UART_BDH_SBR(0x1F));
   \   0000006A   0x.... 0x....      LDR.W    R4,??DataTable8_7  ;; 0x4006d000
   \   0000006E   0x7824             LDRB     R4,[R4, #+0]
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x0964             LSRS     R4,R4,#+5
   \   00000074   0x0164             LSLS     R4,R4,#+5
   \   00000076   0x0021             MOVS     R1,R4
     52              (Bluetooth_BasePtr)->BDH = tempReg |  UART_BDH_SBR(((BdRtBits & 0x1F00) >> 8));
   \   00000078   0x0A14             LSRS     R4,R2,#+8
   \   0000007A   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   0000007E   0x4321             ORRS     R1,R4,R1
   \   00000080   0x.... 0x....      LDR.W    R4,??DataTable8_7  ;; 0x4006d000
   \   00000084   0x7021             STRB     R1,[R4, #+0]
     53              (Bluetooth_BasePtr)->BDL = (uint8)(BdRtBits & UART_BDL_SBR_MASK);
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable8_8  ;; 0x4006d001
   \   0000008A   0x700A             STRB     R2,[R1, #+0]
     54              
     55              // 设置 Band Rate Find Adjust
     56              BRFAdjst = ((((bus_clk_khz*1000)<<5)/(BaudRate <<4)) - (BdRtBits <<5));
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable8_6
   \   00000090   0x6809             LDR      R1,[R1, #+0]
   \   00000092   0xF44F 0x747A      MOV      R4,#+1000
   \   00000096   0x4361             MULS     R1,R4,R1
   \   00000098   0x0149             LSLS     R1,R1,#+5
   \   0000009A   0x0100             LSLS     R0,R0,#+4
   \   0000009C   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   000000A0   0xEBB0 0x1042      SUBS     R0,R0,R2, LSL #+5
   \   000000A4   0x0003             MOVS     R3,R0
     57              tempReg = UART_C4_REG(Bluetooth_BasePtr) & ~(UART_C4_BRFA(0x1F));
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable8_9  ;; 0x4006d00a
   \   000000AA   0x7800             LDRB     R0,[R0, #+0]
   \   000000AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AE   0x0941             LSRS     R1,R0,#+5
   \   000000B0   0x0149             LSLS     R1,R1,#+5
     58              (Bluetooth_BasePtr)->C4 = tempReg |  UART_C4_BRFA(BRFAdjst);
   \   000000B2   0xF013 0x001F      ANDS     R0,R3,#0x1F
   \   000000B6   0x4308             ORRS     R0,R0,R1
   \   000000B8   0x.... 0x....      LDR.W    R1,??DataTable8_9  ;; 0x4006d00a
   \   000000BC   0x7008             STRB     R0,[R1, #+0]
     59              // 波特率设置完毕
     60              
     61              // 触发接收器及发送器使能，触发生成波特率
     62              UART_C2_REG(Bluetooth_BasePtr) |= (UART_C2_TE_MASK | UART_C2_RE_MASK );
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable8_4  ;; 0x4006d003
   \   000000C2   0x7800             LDRB     R0,[R0, #+0]
   \   000000C4   0xF050 0x000C      ORRS     R0,R0,#0xC
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable8_4  ;; 0x4006d003
   \   000000CC   0x7008             STRB     R0,[R1, #+0]
     63              //
     64              (Bluetooth_BasePtr)->C5 = 0x00u;
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable8_10  ;; 0x4006d00b
   \   000000D2   0x2100             MOVS     R1,#+0
   \   000000D4   0x7001             STRB     R1,[R0, #+0]
     65              return;
   \   000000D6   0xBC30             POP      {R4,R5}
   \   000000D8   0x4770             BX       LR               ;; return
     66          }
     67          
     68          /*************************************************************************
     69          //函数名：__v_Uart_TxOne_
     70          //制作：朱葛峻
     71          //用途：发送一个字符
     72          //目前参数：BaudRate
     73          //可扩展参数：引脚配置信息
     74          //使用波特率：9600
     75          //
     76          *************************************************************************/
     77          

   \                                 In section .text, align 2, keep-with-next
     78          void v_UartTxOne(unsigned char sendInfor)
     79          {
     80              // 等待发送缓冲区空 Transmit Data Register Empty Flag == 1 时退出循环
     81              while(!( (Bluetooth_BasePtr->S1) & UART_S1_TDRE_MASK));
   \                     v_UartTxOne: (+1)
   \                     ??v_UartTxOne_0: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable8_11  ;; 0x4006d004
   \   00000004   0x7809             LDRB     R1,[R1, #+0]
   \   00000006   0x0609             LSLS     R1,R1,#+24
   \   00000008   0xD5FA             BPL.N    ??v_UartTxOne_0
     82              
     83              // 当TDRE为1时，执行发送数据指令。
     84              // 发送数据
     85              (Bluetooth_BasePtr)->D = (uint8)sendInfor;
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable8_12  ;; 0x4006d007
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
     86          }
   \   00000010   0x4770             BX       LR               ;; return
     87          
     88          /*************************************************************************
     89          //函数名：__v_Uart_TxOne_
     90          //制作：朱葛峻
     91          //用途：发送一个字符
     92          //目前参数：BaudRate
     93          //可扩展参数：引脚配置信息
     94          //使用波特率：9600
     95          //
     96          *************************************************************************/
     97          /*
     98          void __v_Uart_TxInt16_(unsigned short int sendUint)
     99          {
    100              __v_Uart_TxOne_((uint8)((sendUint>>8)&(0x00FFu)));
    101              //vDelayMuchMs(100);
    102              __v_Uart_TxOne_((uint8)((sendUint)&(0x00FFu)));
    103          }
    104          
    105          void __v_Uart_TxInt32_(unsigned long int sendUint)
    106          {
    107              __v_Uart_TxInt16_((uint16)((sendUint>>16)&(0x0000FFFFu)));
    108              //vDelayMuchMs(100);
    109              __v_Uart_TxInt16_((uint16)((sendUint)&(0x0000FFFFu)));
    110          }
    111          */
    112          /*!
    113           *  @brief      开串口接收中断
    114           *  @param      UARTn_e       模块号（UART0~UART5）
    115           *  @since      v5.0
    116           *  Sample usage:       uart_rx_irq_en(UART4);         //开串口3接收中断
    117           */

   \                                 In section .text, align 2, keep-with-next
    118          void __v_uart_rx_irq_en()
    119          {
   \                     __v_uart_rx_irq_en: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    120              UART_C2_REG(Bluetooth_BasePtr) |= UART_C2_RIE_MASK;                          //使能UART接收中断
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable8_4  ;; 0x4006d003
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable8_4  ;; 0x4006d003
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    121              enable_irq((3 << 1) + 45);                  //使能IRQ中断
   \   00000012   0x2033             MOVS     R0,#+51
   \   00000014   0x.... 0x....      BL       enable_irq
    122          }
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
    123          
    124          /*!
    125           *  @brief      等待接受1个字节
    126           *  @param      UARTn_e       模块号（UART0~UART5）
    127           *  @param      ch          接收地址
    128           *  @since      v5.0
    129           *  @note       如果需要查询接收状态，可用 uart_query ，
    130                          如果需要查询接收数据，可用 uart_querychar
    131           *  Sample usage:       char ch = uart_getchar (UART4);   //等待接受1个字节，保存到 ch里
    132           */

   \                                 In section .text, align 2, keep-with-next
    133          uint8 b_uart_getchar (char *ch)
    134          {
    135              //等待接收到数据（使能了FIFO后，以下两种方法都可行，都是一样的意思）
    136              //while( !UART_RCFIFO_REG(UARTN[uratn]) );                                //等待接收到数据数量非0
    137              //while( (UART_SFIFO_REG(UARTN[uratn]) & UART_SFIFO_RXEMPT_MASK)) ;     //等待接收缓冲区/FIFO 非空的
    138          
    139              //如下方法是飞思卡尔官方例程提供的方法
    140              uint32 time = 0;
   \                     b_uart_getchar: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
    141              while (!(UART_S1_REG(Bluetooth_BasePtr) & UART_S1_RDRF_MASK))       //等待接收满了
   \                     ??b_uart_getchar_0: (+1)
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable8_11  ;; 0x4006d004
   \   00000006   0x7812             LDRB     R2,[R2, #+0]
   \   00000008   0x0692             LSLS     R2,R2,#+26
   \   0000000A   0xD406             BMI.N    ??b_uart_getchar_1
    142              {
    143                  ++time;
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
    144                  if(time >= 100000)
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable8_13  ;; 0x186a0
   \   00000012   0x4291             CMP      R1,R2
   \   00000014   0xD3F5             BCC.N    ??b_uart_getchar_0
    145                  {
    146                      return 0;//返回假
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE004             B.N      ??b_uart_getchar_2
    147                  }
    148              }
    149              // 获取接收到的8位数据
    150              *ch =  UART_D_REG(Bluetooth_BasePtr);
   \                     ??b_uart_getchar_1: (+1)
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable8_12  ;; 0x4006d007
   \   0000001E   0x7809             LDRB     R1,[R1, #+0]
   \   00000020   0x7001             STRB     R1,[R0, #+0]
    151              return 1;
   \   00000022   0x2001             MOVS     R0,#+1
   \                     ??b_uart_getchar_2: (+1)
   \   00000024   0x4770             BX       LR               ;; return
    152              // 获取 9位数据，应该是（需要修改函数的返回类型）：
    153              // *ch =   ((( UARTx_C3_REG(UARTN[uratn]) & UART_C3_R8_MASK ) >> UART_C3_R8_SHIFT ) << 8)   |   UART_D_REG(UARTN[uratn]);  //返回9bit
    154          
    155          }
    156          
    157          /*
    158          void BLagreeT(uint8  DirPWM    , uint8  D_DirPWM,
    159                        
    160                        uint8  Central   , uint8 centralChangeRate,       // 通用显示
    161                        
    162                        uint8  isAdvance , uint16 Motor_PWM,
    163                        
    164                        uint16  GiveSpeed , uint16  D_GiveSpeed,
    165                        uint16  NowSpeed  )
    166          {
    167              // 传输开始
    168              __v_Uart_TxInt16_(0xFEFEu);        // 起始
    169              
    170              __v_Uart_TxOne_(DirPWM);
    171              __v_Uart_TxOne_(D_DirPWM);
    172              
    173              __v_Uart_TxOne_(Central);
    174              __v_Uart_TxOne_(centralChangeRate);
    175              
    176              __v_Uart_TxOne_(isAdvance);         // 1 前进，2 后退，3 停止
    177              
    178              
    179              __v_Uart_TxInt16_(NowSpeed);
    180              __v_Uart_TxInt16_(GiveSpeed);
    181              __v_Uart_TxInt16_(D_GiveSpeed);
    182              
    183              __v_Uart_TxInt16_(Motor_PWM);
    184              
    185              //__v_Uart_TxInt16_(0xFDFDu);        // 停止
    186          }
    187          
    188          */
    189          /*************************************************************************
    190          //函数名：unsigned char GR_ReceiveStop()
    191          //用途：接收停车标志，非零即为停车
    192          //目前参数：BaudRate
    193          //可扩展参数：引脚配置信息
    194          //
    195          *************************************************************************/
    196          /*
    197          unsigned char GR_ReceiveStop()
    198          {
    199            uint8 RecChar = 0;
    200            if(UART_S1_REG(UART4_BASE_PTR) & UART_S1_RDRF_MASK)   //接收数据寄存器满
    201            {
    202              __v_uart_getchar(&RecChar);
    203              if(0xFFu == RecChar)
    204              {
    205                return 1;
    206              }
    207              return 0;
    208            }
    209            else
    210            {
    211              return 0;
    212            }
    213          }
    214          */
    215          /*************************************************************************
    216          //函数名：unsigned char b_()
    217          //用途：接收停车标志，非零即为停车
    218          //目前参数：BaudRate
    219          //可扩展参数：引脚配置信息
    220          //
    221          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    222          uint8 b_TxImageInformation(uint8 CMOS_Pixel_org[][Beholder_PixNum_MAX])
    223          {
   \                     b_TxImageInformation: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    224              v_UartTxOne(0xFF);v_UartTxOne(0xFE);
   \   00000004   0x20FF             MOVS     R0,#+255
   \   00000006   0x.... 0x....      BL       v_UartTxOne
   \   0000000A   0x20FE             MOVS     R0,#+254
   \   0000000C   0x.... 0x....      BL       v_UartTxOne
    225              v_UartTxOne('I');
   \   00000010   0x2049             MOVS     R0,#+73
   \   00000012   0x.... 0x....      BL       v_UartTxOne
    226              v_UartTxOne('M');
   \   00000016   0x204D             MOVS     R0,#+77
   \   00000018   0x.... 0x....      BL       v_UartTxOne
    227              v_UartTxOne('A');
   \   0000001C   0x2041             MOVS     R0,#+65
   \   0000001E   0x.... 0x....      BL       v_UartTxOne
    228              v_UartTxOne('G');
   \   00000022   0x2047             MOVS     R0,#+71
   \   00000024   0x.... 0x....      BL       v_UartTxOne
    229              v_UartTxOne('E');
   \   00000028   0x2045             MOVS     R0,#+69
   \   0000002A   0x.... 0x....      BL       v_UartTxOne
    230              
    231              
    232              for(uint8 loop_LineNum = 0;loop_LineNum < Beholder_LineY_MAX;loop_LineNum++)
   \   0000002E   0x2500             MOVS     R5,#+0
   \   00000030   0xE00D             B.N      ??b_TxImageInformation_0
    233              {
    234                  for(uint8 loop_PixNum = 0;loop_PixNum < Beholder_PixNum_MAX;loop_PixNum++)
    235                  {
    236                      uint8 rec_temp = CMOS_Pixel_org[loop_LineNum][loop_PixNum];
   \                     ??b_TxImageInformation_1: (+1)
   \   00000032   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x20B9             MOVS     R0,#+185
   \   00000038   0xFB00 0x4005      MLA      R0,R0,R5,R4
   \   0000003C   0x5C30             LDRB     R0,[R6, R0]
    237                      v_UartTxOne(rec_temp);
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0x.... 0x....      BL       v_UartTxOne
    238                  }
   \   00000044   0x1C76             ADDS     R6,R6,#+1
   \                     ??b_TxImageInformation_2: (+1)
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x2EB9             CMP      R6,#+185
   \   0000004A   0xDBF2             BLT.N    ??b_TxImageInformation_1
   \   0000004C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??b_TxImageInformation_0: (+1)
   \   0000004E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000050   0x2D3C             CMP      R5,#+60
   \   00000052   0xDA01             BGE.N    ??b_TxImageInformation_3
   \   00000054   0x2600             MOVS     R6,#+0
   \   00000056   0xE7F6             B.N      ??b_TxImageInformation_2
    239              }
    240              
    241              return 'T';
   \                     ??b_TxImageInformation_3: (+1)
   \   00000058   0x2054             MOVS     R0,#+84
   \   0000005A   0xBD70             POP      {R4-R6,PC}       ;; return
    242          }
    243          

   \                                 In section .text, align 2, keep-with-next
    244          void v_UartTxSInt16(unsigned short int * sendUint)
    245          {
   \                     v_UartTxSInt16: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    246              v_UartTxOne((*sendUint)&0x00FF);
   \   00000004   0x8820             LDRH     R0,[R4, #+0]
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       v_UartTxOne
    247              v_UartTxOne(((*sendUint)>>8)&0x00FF);
   \   0000000C   0x8820             LDRH     R0,[R4, #+0]
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x0A00             LSRS     R0,R0,#+8
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       v_UartTxOne
    248          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    249          

   \                                 In section .text, align 2, keep-with-next
    250          void v_UartTxStr(char TxArray[],uint32 TxLength)//发送字符串
    251          {
   \                     v_UartTxStr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    252              for(uint32 CheckLoop = 0;CheckLoop < TxLength;CheckLoop++)
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0xE000             B.N      ??v_UartTxStr_0
   \                     ??v_UartTxStr_1: (+1)
   \   0000000A   0x1C76             ADDS     R6,R6,#+1
   \                     ??v_UartTxStr_0: (+1)
   \   0000000C   0x42AE             CMP      R6,R5
   \   0000000E   0xD205             BCS.N    ??v_UartTxStr_2
    253              {
    254                  v_UartTxOne(TxArray[CheckLoop]);
   \   00000010   0x5D30             LDRB     R0,[R6, R4]
   \   00000012   0x.... 0x....      BL       v_UartTxOne
    255                  if('\0' == TxArray[CheckLoop])
   \   00000016   0x5D30             LDRB     R0,[R6, R4]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD1F6             BNE.N    ??v_UartTxStr_1
    256                  {
    257                      break;
    258                  }
    259              }
    260          }
   \                     ??v_UartTxStr_2: (+1)
   \   0000001C   0xBD70             POP      {R4-R6,PC}       ;; return
    261          
    262          
    263          
    264          

   \                                 In section .text, align 2, keep-with-next
    265          void v_UartTxNeedtx()
    266          {
   \                     v_UartTxNeedtx: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    267              v_Uart_SendPictures();
   \   00000002   0x.... 0x....      BL       v_Uart_SendPictures
    268              //v_Uart_GetPicture_InRunning(1);
    269              //v_UartTxInformationAboutPara();//发送参考信息
    270             /*
    271              char Tx[21];
    272              uint16 loop;
    273              const uint16 TXCOUNTER = 1500 / 2;
    274              
    275              sprintf(Tx,"LeftMotorPWM=[");
    276              v_UartTxStr(Tx,21);
    277              for(loop = 0;loop < TXCOUNTER;loop++)
    278              {
    279                  sprintf(Tx,"%d ",m_need_tx.LeftMotorPWM[loop]);
    280                  v_UartTxStr(Tx,21);
    281              }
    282              sprintf(Tx,"];RightMotorPWM=[");
    283              v_UartTxStr(Tx,21);
    284              for(loop = 0;loop < TXCOUNTER;loop++)
    285              {
    286                  sprintf(Tx,"%d ",m_need_tx.RightMotorPWM[loop]);
    287                  v_UartTxStr(Tx,21);
    288              }
    289              sprintf(Tx,"];LeftMotorSpd=[");
    290              v_UartTxStr(Tx,21);
    291              for(loop = 0;loop < TXCOUNTER;loop++)
    292              {
    293                  sprintf(Tx,"%d ",m_need_tx.LeftMotorSpeed[loop]);
    294                  v_UartTxStr(Tx,21);
    295              }
    296              sprintf(Tx,"];RightMotorSpd=[");
    297              v_UartTxStr(Tx,21);
    298              for(loop = 0;loop < TXCOUNTER;loop++)
    299              {
    300                  sprintf(Tx,"%d ",m_need_tx.RightMotorSpeed[loop]);
    301                  v_UartTxStr(Tx,21);
    302              }
    303              sprintf(Tx,"];Servo=[");
    304              v_UartTxStr(Tx,21);
    305              for(loop = 0;loop < TXCOUNTER;loop++)
    306              {
    307                  sprintf(Tx,"%d ",m_need_tx.ServoGraduated[loop]);
    308                  v_UartTxStr(Tx,21);
    309              }
    310              sprintf(Tx,"];ServoVar=[");
    311              v_UartTxStr(Tx,21);
    312              for(loop = 0;loop < TXCOUNTER;loop++)
    313              {
    314                  sprintf(Tx,"%d ",m_need_tx.ServoVar[loop]);
    315                  v_UartTxStr(Tx,21);
    316              }
    317              
    318              //sprintf(Tx,"];Buzzer=[");
    319              //v_UartTxStr(Tx,21);
    320              //for(loop = 0;loop < TXCOUNTER;loop++)
    321              //{
    322              //    sprintf(Tx,"%d ",m_need_tx.Buzzer[loop]);
    323              //    v_UartTxStr(Tx,21);
    324              //}
    325          
    326              sprintf(Tx,"];MidLine=[");
    327              v_UartTxStr(Tx,21);
    328              for(loop = 0;loop < TXCOUNTER;loop++)
    329              {
    330                  sprintf(Tx,"%d ",m_need_tx.MidLine[loop]);
    331                  v_UartTxStr(Tx,21);
    332              }
    333              sprintf(Tx,"];LGivSpeed=[");
    334              v_UartTxStr(Tx,21);
    335              for(loop = 0;loop < TXCOUNTER;loop++)
    336              {
    337                  sprintf(Tx,"%d ",m_need_tx.LeftMotorGiV[loop]);
    338                  v_UartTxStr(Tx,21);
    339              }
    340              sprintf(Tx,"];RGivSpeed=[");
    341              v_UartTxStr(Tx,21);
    342              for(loop = 0;loop < TXCOUNTER;loop++)
    343              {
    344                  sprintf(Tx,"%d ",m_need_tx.RightMotorGiV[loop]);
    345                  v_UartTxStr(Tx,21);
    346              }
    347              sprintf(Tx,"];t = 1:1:750;");v_UartTxStr(Tx,21);
    348                  
    349              sprintf(Tx,"RightMotorPWM=");v_UartTxStr(Tx,21);
    350              sprintf(Tx,"RightMotorPWM./100;");v_UartTxStr(Tx,21);
    351              
    352              sprintf(Tx,"LeftMotorPWM=");v_UartTxStr(Tx,21);
    353              sprintf(Tx,"LeftMotorPWM./100;");v_UartTxStr(Tx,21);
    354              
    355              
    356              sprintf(Tx,"plot(t,");v_UartTxStr(Tx,21);
    357              sprintf(Tx,"RightMotorPWM,'rx-',");v_UartTxStr(Tx,21);
    358              sprintf(Tx,"t,LeftMotorPWM,'bx-'");v_UartTxStr(Tx,21);
    359              sprintf(Tx,",t,LGivSpeed,'b*-'");v_UartTxStr(Tx,21);
    360              sprintf(Tx,",t,RGivSpeed,'r*-'");v_UartTxStr(Tx,21);
    361              sprintf(Tx,",t,LeftMotorSpd,'b'");v_UartTxStr(Tx,21);
    362              sprintf(Tx,",t,RightMotorSpd,'r'");v_UartTxStr(Tx,21);
    363              sprintf(Tx,",t,Servo,'b+'");v_UartTxStr(Tx,21);
    364              sprintf(Tx,",t,ServoVar,'r+'");v_UartTxStr(Tx,21);
    365              sprintf(Tx,",t,MidLine,'g'");v_UartTxStr(Tx,21);
    366              //sprintf(Tx,",t,Buzzer,'k*'");v_UartTxStr(Tx,21);
    367              sprintf(Tx,");grid on;");v_UartTxStr(Tx,21);
    368              sprintf(Tx,"legend(");v_UartTxStr(Tx,21);    
    369              sprintf(Tx,"'RightMotorPWM'");v_UartTxStr(Tx,21);  
    370              sprintf(Tx,",");v_UartTxStr(Tx,21);
    371              sprintf(Tx,"'LeftMotorPWM'");v_UartTxStr(Tx,21);  
    372              sprintf(Tx,",");v_UartTxStr(Tx,21);
    373              
    374              sprintf(Tx,"'LeftMotorGiV'");v_UartTxStr(Tx,21);  
    375              sprintf(Tx,",");v_UartTxStr(Tx,21);
    376              sprintf(Tx,"'RightMotorGiV'");v_UartTxStr(Tx,21);  
    377              sprintf(Tx,",");v_UartTxStr(Tx,21);
    378              
    379              sprintf(Tx,"'LeftMotorSpd'");v_UartTxStr(Tx,21);  
    380              sprintf(Tx,",");v_UartTxStr(Tx,21);
    381              sprintf(Tx,"'RightMotorSpd'");v_UartTxStr(Tx,21);  
    382              sprintf(Tx,",");v_UartTxStr(Tx,21);
    383              sprintf(Tx,"'Angel'");v_UartTxStr(Tx,21);
    384              sprintf(Tx,",");v_UartTxStr(Tx,21);
    385              sprintf(Tx,"'ServoDeg'");v_UartTxStr(Tx,21);  
    386              sprintf(Tx,",");v_UartTxStr(Tx,21);
    387              sprintf(Tx,"'MidLine'");v_UartTxStr(Tx,21);
    388              //sprintf(Tx,",");v_UartTxStr(Tx,21);
    389              //sprintf(Tx,"'BuzzerPoint'");v_UartTxStr(Tx,21);
    390              sprintf(Tx,");");v_UartTxStr(Tx,21);
    391              
    392              sprintf(Tx,"figure(2);");v_UartTxStr(Tx,21);
    393              sprintf(Tx,"LeftI=[");v_UartTxStr(Tx,21);
    394              for(loop = 0;loop < 750;loop++)
    395              {
    396                  sprintf(Tx,"%d ",m_need_tx.Information_Unnamed_Mark001[loop]);
    397                  v_UartTxStr(Tx,21);
    398              }
    399              sprintf(Tx,"];RightI=[");v_UartTxStr(Tx,21);
    400              for(loop = 750;loop < 1500;loop++)
    401              {
    402                  sprintf(Tx,"%d ",m_need_tx.Information_Unnamed_Mark001[loop]);
    403                  v_UartTxStr(Tx,21);
    404              }
    405              sprintf(Tx,"];plot(");v_UartTxStr(Tx,21);
    406              sprintf(Tx,"t,LeftI,'b*-',");v_UartTxStr(Tx,21);
    407              sprintf(Tx,"t,RightI,'r*-');");v_UartTxStr(Tx,21);
    408              
    409              sprintf(Tx,"legend(");v_UartTxStr(Tx,21);    
    410              sprintf(Tx,"'LeftMotorI'");v_UartTxStr(Tx,21);  
    411              sprintf(Tx,",");v_UartTxStr(Tx,21);
    412              sprintf(Tx,"'RightMotorI'");v_UartTxStr(Tx,21);  
    413              sprintf(Tx,");");v_UartTxStr(Tx,21);
    414              
    415              sprintf(Tx,"FromShunAn");v_UartTxStr(Tx,21);
    416              */
    417          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    418          
    419          /*                    m_need_tx.LeftMotorPWM[m_need_tx.counter] = m_Control.e_LeftSpeed;
    420                              m_need_tx.LeftMotorSpeed[m_need_tx.counter] = m_Control.LeftMotorSpeed;
    421                              m_need_tx.RightMotorPWM[m_need_tx.counter] = m_Control.LeftMotorPWM;
    422                              m_need_tx.RightMotorSpeed[m_need_tx.counter] = m_Control.RightMotorSpeed;//m_Control.RightMotorSpeed;
    423                              m_need_tx.ServoVar[m_need_tx.counter] = m_Control.ServoDeg;
    424                              m_need_tx.ServoGraduated[m_need_tx.counter] = m_Control.LeftRightRatio;*/
    425          

   \                                 In section .text, align 2, keep-with-next
    426          void v_UartTxInformationAboutPara()
    427          {
   \                     v_UartTxInformationAboutPara: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB09F             SUB      SP,SP,#+124
    428              char Tx[100];//获取Tx信号
    429              sprintf(Tx,"'This Time is ShunAn Showing,Para:");v_UartTxStr(Tx,100);//
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable8_14
   \   00000008   0xA806             ADD      R0,SP,#+24
   \   0000000A   0x.... 0x....      BL       sprintf
   \   0000000E   0x2164             MOVS     R1,#+100
   \   00000010   0xA806             ADD      R0,SP,#+24
   \   00000012   0x.... 0x....      BL       v_UartTxStr
    430              
    431              sprintf(Tx,"v=%d,P=%g,I=%g,D=%g,",m_Control.GiveSpeed
    432                                               ,m_Control.Motor_ControlPara_P_Number
    433                                               ,m_Control.Motor_ControlPara_I_Number
    434                                               ,m_Control.Motor_ControlPara_D_Number);//速度参考
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable8_15
   \   0000001A   0xF8D0 0x009C      LDR      R0,[R0, #+156]
   \   0000001E   0x.... 0x....      BL       __aeabi_f2d
   \   00000022   0xE9CD 0x0104      STRD     R0,R1,[SP, #+16]
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable8_15
   \   0000002A   0xF8D0 0x0098      LDR      R0,[R0, #+152]
   \   0000002E   0x.... 0x....      BL       __aeabi_f2d
   \   00000032   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable8_15
   \   0000003A   0xF8D0 0x0094      LDR      R0,[R0, #+148]
   \   0000003E   0x.... 0x....      BL       __aeabi_f2d
   \   00000042   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable8_15
   \   0000004A   0xF8B0 0x206C      LDRH     R2,[R0, #+108]
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable8_16
   \   00000052   0xA806             ADD      R0,SP,#+24
   \   00000054   0x.... 0x....      BL       sprintf
    435                                               v_UartTxStr(Tx,100);
   \   00000058   0x2164             MOVS     R1,#+100
   \   0000005A   0xA806             ADD      R0,SP,#+24
   \   0000005C   0x.... 0x....      BL       v_UartTxStr
    436              sprintf(Tx,"P_Curve=%g,StopY=%d,Servo_Diff=%g",m_Control.P_Curve
    437                                                            ,m_Control.servo_imageYstopLine
    438                                                            ,m_Control.ServoDiff);//舵机转角参考
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable8_15
   \   00000064   0x6A40             LDR      R0,[R0, #+36]
   \   00000066   0x.... 0x....      BL       __aeabi_f2d
   \   0000006A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable8_15
   \   00000072   0xF890 0x0084      LDRB     R0,[R0, #+132]
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable8_15
   \   0000007C   0xF8D0 0x0088      LDR      R0,[R0, #+136]
   \   00000080   0x.... 0x....      BL       __aeabi_f2d
   \   00000084   0x0002             MOVS     R2,R0
   \   00000086   0x000B             MOVS     R3,R1
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable8_17
   \   0000008C   0xA806             ADD      R0,SP,#+24
   \   0000008E   0x.... 0x....      BL       sprintf
    439                                                            v_UartTxStr(Tx,100);
   \   00000092   0x2164             MOVS     R1,#+100
   \   00000094   0xA806             ADD      R0,SP,#+24
   \   00000096   0x.... 0x....      BL       v_UartTxStr
    440              sprintf(Tx,"';");v_UartTxStr(Tx,100);//
   \   0000009A   0x....             ADR.N    R1,??DataTable6  ;; 0x27, 0x3B, 0x00, 0x00
   \   0000009C   0xA806             ADD      R0,SP,#+24
   \   0000009E   0x.... 0x....      BL       sprintf
   \   000000A2   0x2164             MOVS     R1,#+100
   \   000000A4   0xA806             ADD      R0,SP,#+24
   \   000000A6   0x.... 0x....      BL       v_UartTxStr
    441          }
   \   000000AA   0xB01F             ADD      SP,SP,#+124
   \   000000AC   0xBD00             POP      {PC}             ;; return
    442          

   \                                 In section .text, align 2, keep-with-next
    443          void v_UartSaveImage_sint16(void * Save)//存储
    444          {
    445              sint16 * Save_sint16 = Save;
    446              for(uint8 loop = 0;loop < 60;loop ++)
   \                     v_UartSaveImage_sint16: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE020             B.N      ??v_UartSaveImage_sint16_0
    447              {
    448                  *Save_sint16       = (m_ImageAbstract.Left[loop]);
   \                     ??v_UartSaveImage_sint16_1: (+1)
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0x.... 0x....      LDR.W    R2,??DataTable8_18
   \   0000000A   0x188A             ADDS     R2,R1,R2
   \   0000000C   0xF892 0x202C      LDRB     R2,[R2, #+44]
   \   00000010   0x8002             STRH     R2,[R0, #+0]
    449                  *(Save_sint16 + 60) = (m_ImageAbstract.Right[loop]);
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x.... 0x....      LDR.W    R2,??DataTable8_18
   \   00000018   0x188A             ADDS     R2,R1,R2
   \   0000001A   0xF892 0x2068      LDRB     R2,[R2, #+104]
   \   0000001E   0xF8A0 0x2078      STRH     R2,[R0, #+120]
    450                  *(Save_sint16 + 120) = (m_ImageAbstract.Central[loop]);
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x.... 0x....      LDR.W    R2,??DataTable8_18
   \   00000028   0x188A             ADDS     R2,R1,R2
   \   0000002A   0xF892 0x20A4      LDRB     R2,[R2, #+164]
   \   0000002E   0xF8A0 0x20F0      STRH     R2,[R0, #+240]
    451                  *(Save_sint16 + 180) = (m_ImageTesting.hazardvaildLine[loop]);
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0x.... 0x....      LDR.W    R2,??DataTable8_19
   \   00000038   0x188A             ADDS     R2,R1,R2
   \   0000003A   0xF892 0x2045      LDRB     R2,[R2, #+69]
   \   0000003E   0xF8A0 0x2168      STRH     R2,[R0, #+360]
    452                  Save_sint16 = Save_sint16 + 1;//递增
   \   00000042   0x1C80             ADDS     R0,R0,#+2
    453              }
   \   00000044   0x1C49             ADDS     R1,R1,#+1
   \                     ??v_UartSaveImage_sint16_0: (+1)
   \   00000046   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000048   0x293C             CMP      R1,#+60
   \   0000004A   0xDBDB             BLT.N    ??v_UartSaveImage_sint16_1
    454              *(Save_sint16 + 180) = (m_ImageAbstract.Start_Y_Position);
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable8_18
   \   00000050   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00000054   0xF8A0 0x1168      STRH     R1,[R0, #+360]
    455              *(Save_sint16 + 181) = (m_ImageAbstract.Last_Y_Position);
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable8_18
   \   0000005C   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   00000060   0xF8A0 0x116A      STRH     R1,[R0, #+362]
    456              *(Save_sint16 + 182) = (m_Control.ServoDeg);
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable8_15
   \   00000068   0x8C09             LDRH     R1,[R1, #+32]
   \   0000006A   0xF8A0 0x116C      STRH     R1,[R0, #+364]
    457              *(Save_sint16 + 183) = (m_ImageTesting.Back2Angel_LineCounter);
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable8_19
   \   00000072   0xF891 0x1086      LDRB     R1,[R1, #+134]
   \   00000076   0xF8A0 0x116E      STRH     R1,[R0, #+366]
    458              
    459          }
   \   0000007A   0x4770             BX       LR               ;; return
    460          

   \                                 In section .text, align 2, keep-with-next
    461          void v_UartTxImageSix2PC(void * Tx)
    462          {
   \                     v_UartTxImageSix2PC: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
    463              sint16 * Save = Tx;
    464              char TxChar[21];
    465              sprintf(TxChar,"Left=[");v_UartTxStr(TxChar,21);
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x.... 0x....      BL       sprintf
   \   00000010   0x2115             MOVS     R1,#+21
   \   00000012   0xA800             ADD      R0,SP,#+0
   \   00000014   0x.... 0x....      BL       v_UartTxStr
    466              for(uint8 loop = 0;loop < 60;loop ++)
   \   00000018   0x2500             MOVS     R5,#+0
   \   0000001A   0xE00B             B.N      ??v_UartTxImageSix2PC_0
    467              {
    468                  Save = Save + 1;//移动
   \                     ??v_UartTxImageSix2PC_1: (+1)
   \   0000001C   0x1CA4             ADDS     R4,R4,#+2
    469                  sprintf(TxChar,"%d ",*Save);v_UartTxStr(TxChar,21);
   \   0000001E   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   00000022   0x....             ADR.N    R1,??DataTable6_1  ;; "%d "
   \   00000024   0xA800             ADD      R0,SP,#+0
   \   00000026   0x.... 0x....      BL       sprintf
   \   0000002A   0x2115             MOVS     R1,#+21
   \   0000002C   0xA800             ADD      R0,SP,#+0
   \   0000002E   0x.... 0x....      BL       v_UartTxStr
    470              }
   \   00000032   0x1C6D             ADDS     R5,R5,#+1
   \                     ??v_UartTxImageSix2PC_0: (+1)
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x2D3C             CMP      R5,#+60
   \   00000038   0xDBF0             BLT.N    ??v_UartTxImageSix2PC_1
    471              sprintf(TxChar,"];Right=[");v_UartTxStr(TxChar,21);
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable8_21
   \   0000003E   0xA800             ADD      R0,SP,#+0
   \   00000040   0x.... 0x....      BL       sprintf
   \   00000044   0x2115             MOVS     R1,#+21
   \   00000046   0xA800             ADD      R0,SP,#+0
   \   00000048   0x.... 0x....      BL       v_UartTxStr
    472              for(uint8 loop = 0;loop < 60;loop ++)
   \   0000004C   0x2500             MOVS     R5,#+0
   \   0000004E   0xE00B             B.N      ??v_UartTxImageSix2PC_2
    473              {
    474                  Save = Save + 1;//移动
   \                     ??v_UartTxImageSix2PC_3: (+1)
   \   00000050   0x1CA4             ADDS     R4,R4,#+2
    475                  sprintf(TxChar,"%d ",*Save);v_UartTxStr(TxChar,21);
   \   00000052   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   00000056   0x....             ADR.N    R1,??DataTable6_1  ;; "%d "
   \   00000058   0xA800             ADD      R0,SP,#+0
   \   0000005A   0x.... 0x....      BL       sprintf
   \   0000005E   0x2115             MOVS     R1,#+21
   \   00000060   0xA800             ADD      R0,SP,#+0
   \   00000062   0x.... 0x....      BL       v_UartTxStr
    476              }
   \   00000066   0x1C6D             ADDS     R5,R5,#+1
   \                     ??v_UartTxImageSix2PC_2: (+1)
   \   00000068   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006A   0x2D3C             CMP      R5,#+60
   \   0000006C   0xDBF0             BLT.N    ??v_UartTxImageSix2PC_3
    477              sprintf(TxChar,"];Mid=[");v_UartTxStr(TxChar,21);
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable8_22
   \   00000072   0xA800             ADD      R0,SP,#+0
   \   00000074   0x.... 0x....      BL       sprintf
   \   00000078   0x2115             MOVS     R1,#+21
   \   0000007A   0xA800             ADD      R0,SP,#+0
   \   0000007C   0x.... 0x....      BL       v_UartTxStr
    478              for(uint8 loop = 0;loop < 60;loop ++)
   \   00000080   0x2500             MOVS     R5,#+0
   \   00000082   0xE00B             B.N      ??v_UartTxImageSix2PC_4
    479              {
    480                  Save = Save + 1;//移动
   \                     ??v_UartTxImageSix2PC_5: (+1)
   \   00000084   0x1CA4             ADDS     R4,R4,#+2
    481                  sprintf(TxChar,"%d ",*Save);v_UartTxStr(TxChar,21);
   \   00000086   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   0000008A   0x....             ADR.N    R1,??DataTable6_1  ;; "%d "
   \   0000008C   0xA800             ADD      R0,SP,#+0
   \   0000008E   0x.... 0x....      BL       sprintf
   \   00000092   0x2115             MOVS     R1,#+21
   \   00000094   0xA800             ADD      R0,SP,#+0
   \   00000096   0x.... 0x....      BL       v_UartTxStr
    482              }
   \   0000009A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??v_UartTxImageSix2PC_4: (+1)
   \   0000009C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009E   0x2D3C             CMP      R5,#+60
   \   000000A0   0xDBF0             BLT.N    ??v_UartTxImageSix2PC_5
    483              sprintf(TxChar,"];");v_UartTxStr(TxChar,21);
   \   000000A2   0x....             ADR.N    R1,??DataTable7  ;; 0x5D, 0x3B, 0x00, 0x00
   \   000000A4   0xA800             ADD      R0,SP,#+0
   \   000000A6   0x.... 0x....      BL       sprintf
   \   000000AA   0x2115             MOVS     R1,#+21
   \   000000AC   0xA800             ADD      R0,SP,#+0
   \   000000AE   0x.... 0x....      BL       v_UartTxStr
    484              
    485              sprintf(TxChar,"RightRight=[");v_UartTxStr(TxChar,21);
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable8_23
   \   000000B6   0xA800             ADD      R0,SP,#+0
   \   000000B8   0x.... 0x....      BL       sprintf
   \   000000BC   0x2115             MOVS     R1,#+21
   \   000000BE   0xA800             ADD      R0,SP,#+0
   \   000000C0   0x.... 0x....      BL       v_UartTxStr
    486              for(uint8 loop = 0;loop < 60;loop ++)
   \   000000C4   0x2500             MOVS     R5,#+0
   \   000000C6   0xE00B             B.N      ??v_UartTxImageSix2PC_6
    487              {
    488                  Save = Save + 1;//移动
   \                     ??v_UartTxImageSix2PC_7: (+1)
   \   000000C8   0x1CA4             ADDS     R4,R4,#+2
    489                  sprintf(TxChar,"%d ",*Save);v_UartTxStr(TxChar,21);
   \   000000CA   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   000000CE   0x....             ADR.N    R1,??DataTable6_1  ;; "%d "
   \   000000D0   0xA800             ADD      R0,SP,#+0
   \   000000D2   0x.... 0x....      BL       sprintf
   \   000000D6   0x2115             MOVS     R1,#+21
   \   000000D8   0xA800             ADD      R0,SP,#+0
   \   000000DA   0x.... 0x....      BL       v_UartTxStr
    490              }
   \   000000DE   0x1C6D             ADDS     R5,R5,#+1
   \                     ??v_UartTxImageSix2PC_6: (+1)
   \   000000E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E2   0x2D3C             CMP      R5,#+60
   \   000000E4   0xDBF0             BLT.N    ??v_UartTxImageSix2PC_7
    491              sprintf(TxChar,"];");v_UartTxStr(TxChar,21);
   \   000000E6   0x....             ADR.N    R1,??DataTable7  ;; 0x5D, 0x3B, 0x00, 0x00
   \   000000E8   0xA800             ADD      R0,SP,#+0
   \   000000EA   0x.... 0x....      BL       sprintf
   \   000000EE   0x2115             MOVS     R1,#+21
   \   000000F0   0xA800             ADD      R0,SP,#+0
   \   000000F2   0x.... 0x....      BL       v_UartTxStr
    492              
    493              
    494              sprintf(TxChar,"Beg=%d;",*Save);v_UartTxStr(TxChar,21);//移动
   \   000000F6   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable8_24
   \   000000FE   0xA800             ADD      R0,SP,#+0
   \   00000100   0x.... 0x....      BL       sprintf
   \   00000104   0x2115             MOVS     R1,#+21
   \   00000106   0xA800             ADD      R0,SP,#+0
   \   00000108   0x.... 0x....      BL       v_UartTxStr
    495              Save = Save + 1;
   \   0000010C   0x1CA4             ADDS     R4,R4,#+2
    496              sprintf(TxChar,"Shut=%d;",*Save);v_UartTxStr(TxChar,21);//移动
   \   0000010E   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable8_25
   \   00000116   0xA800             ADD      R0,SP,#+0
   \   00000118   0x.... 0x....      BL       sprintf
   \   0000011C   0x2115             MOVS     R1,#+21
   \   0000011E   0xA800             ADD      R0,SP,#+0
   \   00000120   0x.... 0x....      BL       v_UartTxStr
    497              
    498              Save = Save + 1;
   \   00000124   0x1CA4             ADDS     R4,R4,#+2
    499              sprintf(TxChar,"LonY=%d;",*Save);v_UartTxStr(TxChar,21);//移动
   \   00000126   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   0000012A   0x.... 0x....      LDR.W    R1,??DataTable8_26
   \   0000012E   0xA800             ADD      R0,SP,#+0
   \   00000130   0x.... 0x....      BL       sprintf
   \   00000134   0x2115             MOVS     R1,#+21
   \   00000136   0xA800             ADD      R0,SP,#+0
   \   00000138   0x.... 0x....      BL       v_UartTxStr
    500              Save = Save + 1;
   \   0000013C   0x1CA4             ADDS     R4,R4,#+2
    501              sprintf(TxChar,"LonX=%d;",*Save);v_UartTxStr(TxChar,21);//移动
   \   0000013E   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   00000142   0x.... 0x....      LDR.W    R1,??DataTable8_27
   \   00000146   0xA800             ADD      R0,SP,#+0
   \   00000148   0x.... 0x....      BL       sprintf
   \   0000014C   0x2115             MOVS     R1,#+21
   \   0000014E   0xA800             ADD      R0,SP,#+0
   \   00000150   0x.... 0x....      BL       v_UartTxStr
    502              Save = Save + 1;
   \   00000154   0x1CA4             ADDS     R4,R4,#+2
    503              
    504              sprintf(TxChar,"ShowImageInformation");v_UartTxStr(TxChar,21);//移动
   \   00000156   0x.... 0x....      LDR.W    R1,??DataTable8_28
   \   0000015A   0xA800             ADD      R0,SP,#+0
   \   0000015C   0x.... 0x....      BL       sprintf
   \   00000160   0x2115             MOVS     R1,#+21
   \   00000162   0xA800             ADD      R0,SP,#+0
   \   00000164   0x.... 0x....      BL       v_UartTxStr
    505              sprintf(TxChar,"_ShunAnGolden");v_UartTxStr(TxChar,21);//移动
   \   00000168   0x....             LDR.N    R1,??DataTable8_29
   \   0000016A   0xA800             ADD      R0,SP,#+0
   \   0000016C   0x.... 0x....      BL       sprintf
   \   00000170   0x2115             MOVS     R1,#+21
   \   00000172   0xA800             ADD      R0,SP,#+0
   \   00000174   0x.... 0x....      BL       v_UartTxStr
    506              sprintf(TxChar,"(Left,Right,Mid,");v_UartTxStr(TxChar,21);//移动
   \   00000178   0x....             LDR.N    R1,??DataTable8_30
   \   0000017A   0xA800             ADD      R0,SP,#+0
   \   0000017C   0x.... 0x....      BL       sprintf
   \   00000180   0x2115             MOVS     R1,#+21
   \   00000182   0xA800             ADD      R0,SP,#+0
   \   00000184   0x.... 0x....      BL       v_UartTxStr
    507              sprintf(TxChar,"RightRight,");v_UartTxStr(TxChar,21);//移动
   \   00000188   0x....             LDR.N    R1,??DataTable8_31
   \   0000018A   0xA800             ADD      R0,SP,#+0
   \   0000018C   0x.... 0x....      BL       sprintf
   \   00000190   0x2115             MOVS     R1,#+21
   \   00000192   0xA800             ADD      R0,SP,#+0
   \   00000194   0x.... 0x....      BL       v_UartTxStr
    508              sprintf(TxChar,"LonY,LonX,");v_UartTxStr(TxChar,21);//移动
   \   00000198   0x....             LDR.N    R1,??DataTable8_32
   \   0000019A   0xA800             ADD      R0,SP,#+0
   \   0000019C   0x.... 0x....      BL       sprintf
   \   000001A0   0x2115             MOVS     R1,#+21
   \   000001A2   0xA800             ADD      R0,SP,#+0
   \   000001A4   0x.... 0x....      BL       v_UartTxStr
    509              sprintf(TxChar,"Shut,Beg);");v_UartTxStr(TxChar,21);//移动
   \   000001A8   0x....             LDR.N    R1,??DataTable8_33
   \   000001AA   0xA800             ADD      R0,SP,#+0
   \   000001AC   0x.... 0x....      BL       sprintf
   \   000001B0   0x2115             MOVS     R1,#+21
   \   000001B2   0xA800             ADD      R0,SP,#+0
   \   000001B4   0x.... 0x....      BL       v_UartTxStr
    510              //sprintf(TxChar,"FromShunAn");v_UartTxStr(TxChar,21);//移动
    511          }
   \   000001B8   0xB007             ADD      SP,SP,#+28
   \   000001BA   0xBD30             POP      {R4,R5,PC}       ;; return
    512          
    513          

   \                                 In section .text, align 2, keep-with-next
    514          void v_Uart_GetPicture_InRunning(uint8 mode,uint8 time)
    515          {
   \                     v_Uart_GetPicture_InRunning: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    516              static uint8 pic_counter = 0;
    517              if(0 == mode){pic_counter = 0;return;}
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD103             BNE.N    ??v_Uart_GetPicture_InRunning_0
   \   00000008   0x....             LDR.N    R0,??DataTable8_34
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
   \   0000000E   0xE097             B.N      ??v_Uart_GetPicture_InRunning_1
    518              static uint8 counter = 0;
    519              if(time != (++counter))
   \                     ??v_Uart_GetPicture_InRunning_0: (+1)
   \   00000010   0x....             LDR.N    R2,??DataTable8_35
   \   00000012   0x7812             LDRB     R2,[R2, #+0]
   \   00000014   0x1C52             ADDS     R2,R2,#+1
   \   00000016   0x....             LDR.N    R3,??DataTable8_35
   \   00000018   0x701A             STRB     R2,[R3, #+0]
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x4291             CMP      R1,R2
   \   00000020   0xF040 0x808E      BNE.W    ??v_Uart_GetPicture_InRunning_1
    520              {
    521                  return;
    522              }
    523              counter = 0;
   \                     ??v_Uart_GetPicture_InRunning_2: (+1)
   \   00000024   0x....             LDR.N    R1,??DataTable8_35
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x700A             STRB     R2,[R1, #+0]
    524              if(1 == mode)
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xF040 0x8087      BNE.W    ??v_Uart_GetPicture_InRunning_3
    525              {
    526                  if(pic_counter < 5)//0 1 2 3 4
   \   00000032   0x....             LDR.N    R0,??DataTable8_34
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x2805             CMP      R0,#+5
   \   00000038   0xDA0C             BGE.N    ??v_Uart_GetPicture_InRunning_4
    527                  {
    528                      v_UartSaveImage_sint16(m_need_tx.Information_Unnamed_Mark001 + 300*pic_counter);//m_need_tx.Information_Unnamed_Mark001
   \   0000003A   0x....             LDR.N    R0,??DataTable8_34
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0xF44F 0x7116      MOV      R1,#+600
   \   00000042   0x....             LDR.N    R2,??DataTable8_36
   \   00000044   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000048   0xF500 0x40C6      ADD      R0,R0,#+25344
   \   0000004C   0x309C             ADDS     R0,R0,#+156
   \   0000004E   0x.... 0x....      BL       v_UartSaveImage_sint16
   \   00000052   0xE070             B.N      ??v_Uart_GetPicture_InRunning_5
    529                  }
    530                  else
    531                  {
    532                      if(pic_counter < 10)//5 6 7 8 9
   \                     ??v_Uart_GetPicture_InRunning_4: (+1)
   \   00000054   0x....             LDR.N    R0,??DataTable8_34
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x280A             CMP      R0,#+10
   \   0000005A   0xDA0C             BGE.N    ??v_Uart_GetPicture_InRunning_6
    533                      {
    534                          v_UartSaveImage_sint16(m_need_tx.ServoVar + 300*(pic_counter-5));
   \   0000005C   0x....             LDR.N    R0,??DataTable8_34
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0xF44F 0x7116      MOV      R1,#+600
   \   00000064   0x....             LDR.N    R2,??DataTable8_36
   \   00000066   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000006A   0xF500 0x408C      ADD      R0,R0,#+17920
   \   0000006E   0x3050             ADDS     R0,R0,#+80
   \   00000070   0x.... 0x....      BL       v_UartSaveImage_sint16
   \   00000074   0xE05F             B.N      ??v_Uart_GetPicture_InRunning_5
    535                      }
    536                      else
    537                      {
    538                          if(pic_counter < 15)//10 11 12 13 14
   \                     ??v_Uart_GetPicture_InRunning_6: (+1)
   \   00000076   0x....             LDR.N    R0,??DataTable8_34
   \   00000078   0x7800             LDRB     R0,[R0, #+0]
   \   0000007A   0x280F             CMP      R0,#+15
   \   0000007C   0xDA0C             BGE.N    ??v_Uart_GetPicture_InRunning_7
    539                          {
    540                              v_UartSaveImage_sint16(m_need_tx.RightMotorGiV + 300*(pic_counter-10));
   \   0000007E   0x....             LDR.N    R0,??DataTable8_34
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0xF44F 0x7116      MOV      R1,#+600
   \   00000086   0x....             LDR.N    R2,??DataTable8_36
   \   00000088   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000008C   0xF500 0x500C      ADD      R0,R0,#+8960
   \   00000090   0x3028             ADDS     R0,R0,#+40
   \   00000092   0x.... 0x....      BL       v_UartSaveImage_sint16
   \   00000096   0xE04E             B.N      ??v_Uart_GetPicture_InRunning_5
    541                          }
    542                          else
    543                          {
    544                              if(pic_counter < 20)//15 16 17 18 19
   \                     ??v_Uart_GetPicture_InRunning_7: (+1)
   \   00000098   0x....             LDR.N    R0,??DataTable8_34
   \   0000009A   0x7800             LDRB     R0,[R0, #+0]
   \   0000009C   0x2814             CMP      R0,#+20
   \   0000009E   0xDA0B             BGE.N    ??v_Uart_GetPicture_InRunning_8
    545                              {
    546                                  v_UartSaveImage_sint16(m_need_tx.LeftMotorGiV + 300*(pic_counter-15));
   \   000000A0   0x....             LDR.N    R0,??DataTable8_34
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
   \   000000A4   0xF44F 0x7116      MOV      R1,#+600
   \   000000A8   0x....             LDR.N    R2,??DataTable8_36
   \   000000AA   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   000000AE   0xF600 0x30B8      ADDW     R0,R0,#+3000
   \   000000B2   0x.... 0x....      BL       v_UartSaveImage_sint16
   \   000000B6   0xE03E             B.N      ??v_Uart_GetPicture_InRunning_5
    547                              }
    548                              else
    549                              {
    550                                  if(pic_counter < 25)//20 21 22 23 24
   \                     ??v_Uart_GetPicture_InRunning_8: (+1)
   \   000000B8   0x....             LDR.N    R0,??DataTable8_34
   \   000000BA   0x7800             LDRB     R0,[R0, #+0]
   \   000000BC   0x2819             CMP      R0,#+25
   \   000000BE   0xDA0B             BGE.N    ??v_Uart_GetPicture_InRunning_9
    551                                  {
    552                                      v_UartSaveImage_sint16(m_need_tx.RightMotorPWM + 300*(pic_counter-20));
   \   000000C0   0x....             LDR.N    R0,??DataTable8_34
   \   000000C2   0x7800             LDRB     R0,[R0, #+0]
   \   000000C4   0xF44F 0x7116      MOV      R1,#+600
   \   000000C8   0x....             LDR.N    R2,??DataTable8_36
   \   000000CA   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   000000CE   0xF6A0 0x30B8      SUBW     R0,R0,#+3000
   \   000000D2   0x.... 0x....      BL       v_UartSaveImage_sint16
   \   000000D6   0xE02E             B.N      ??v_Uart_GetPicture_InRunning_5
    553                                  }
    554                                  else
    555                                  {
    556                                      if(pic_counter < 30)//25 26 27 28 29
   \                     ??v_Uart_GetPicture_InRunning_9: (+1)
   \   000000D8   0x....             LDR.N    R0,??DataTable8_34
   \   000000DA   0x7800             LDRB     R0,[R0, #+0]
   \   000000DC   0x281E             CMP      R0,#+30
   \   000000DE   0xDA0B             BGE.N    ??v_Uart_GetPicture_InRunning_10
    557                                      {
    558                                          v_UartSaveImage_sint16(m_need_tx.LeftMotorPWM + 300*(pic_counter-25));
   \   000000E0   0x....             LDR.N    R0,??DataTable8_37  ;; 0xffffdcd8
   \   000000E2   0x....             LDR.N    R1,??DataTable8_34
   \   000000E4   0x7809             LDRB     R1,[R1, #+0]
   \   000000E6   0xF44F 0x7216      MOV      R2,#+600
   \   000000EA   0x....             LDR.N    R3,??DataTable8_36
   \   000000EC   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   000000F0   0x1840             ADDS     R0,R0,R1
   \   000000F2   0x.... 0x....      BL       v_UartSaveImage_sint16
   \   000000F6   0xE01E             B.N      ??v_Uart_GetPicture_InRunning_5
    559                                      }
    560                                      else
    561                                      {
    562                                          if(pic_counter < 35)//25 26 27 28 29
   \                     ??v_Uart_GetPicture_InRunning_10: (+1)
   \   000000F8   0x....             LDR.N    R0,??DataTable8_34
   \   000000FA   0x7800             LDRB     R0,[R0, #+0]
   \   000000FC   0x2823             CMP      R0,#+35
   \   000000FE   0xDA0B             BGE.N    ??v_Uart_GetPicture_InRunning_11
    563                                          {
    564                                              v_UartSaveImage_sint16(m_need_tx.RightMotorSpeed + 300*(pic_counter-30));
   \   00000100   0x....             LDR.N    R0,??DataTable8_38  ;; 0xffffc568
   \   00000102   0x....             LDR.N    R1,??DataTable8_34
   \   00000104   0x7809             LDRB     R1,[R1, #+0]
   \   00000106   0xF44F 0x7216      MOV      R2,#+600
   \   0000010A   0x....             LDR.N    R3,??DataTable8_36
   \   0000010C   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000110   0x1840             ADDS     R0,R0,R1
   \   00000112   0x.... 0x....      BL       v_UartSaveImage_sint16
   \   00000116   0xE00E             B.N      ??v_Uart_GetPicture_InRunning_5
    565                                          }
    566                                          else
    567                                          {
    568                                              if(pic_counter < 40)//25 26 27 28 29
   \                     ??v_Uart_GetPicture_InRunning_11: (+1)
   \   00000118   0x....             LDR.N    R0,??DataTable8_34
   \   0000011A   0x7800             LDRB     R0,[R0, #+0]
   \   0000011C   0x2828             CMP      R0,#+40
   \   0000011E   0xDA0A             BGE.N    ??v_Uart_GetPicture_InRunning_5
    569                                              {
    570                                                  v_UartSaveImage_sint16(m_need_tx.LeftMotorSpeed + 300*(pic_counter-35));
   \   00000120   0x....             LDR.N    R0,??DataTable8_39  ;; 0xffffadf8
   \   00000122   0x....             LDR.N    R1,??DataTable8_34
   \   00000124   0x7809             LDRB     R1,[R1, #+0]
   \   00000126   0xF44F 0x7216      MOV      R2,#+600
   \   0000012A   0x....             LDR.N    R3,??DataTable8_36
   \   0000012C   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000130   0x1840             ADDS     R0,R0,R1
   \   00000132   0x.... 0x....      BL       v_UartSaveImage_sint16
    571                                              }
    572                                          }
    573                                      }
    574                                  }
    575                              }
    576                          }
    577                      }
    578                  }
    579                  pic_counter++;
   \                     ??v_Uart_GetPicture_InRunning_5: (+1)
   \   00000136   0x....             LDR.N    R0,??DataTable8_34
   \   00000138   0x7800             LDRB     R0,[R0, #+0]
   \   0000013A   0x1C40             ADDS     R0,R0,#+1
   \   0000013C   0x....             LDR.N    R1,??DataTable8_34
   \   0000013E   0x7008             STRB     R0,[R1, #+0]
    580              }
    581          }
   \                     ??v_Uart_GetPicture_InRunning_3: (+1)
   \                     ??v_Uart_GetPicture_InRunning_1: (+1)
   \   00000140   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??pic_counter:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??counter:
   \   00000000                      DS8 1
    582          
    583          

   \                                 In section .text, align 2, keep-with-next
    584          void v_Uart_SendPictures()
    585          {
   \                     v_Uart_SendPictures: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    586              char TxChar[21];
    587              for(sint8 pic_counter = 39;pic_counter >= 0;pic_counter--)
   \   00000004   0x2427             MOVS     R4,#+39
   \   00000006   0xE00D             B.N      ??v_Uart_SendPictures_0
    588              {
    589                  sprintf(TxChar,"figure(%d);",pic_counter+1);v_UartTxStr(TxChar,21);//移动
    590                  if(pic_counter < 5)//0 1 2 3 4
    591                  {
    592                      v_UartTxImageSix2PC(m_need_tx.Information_Unnamed_Mark001 + 300*pic_counter);//m_need_tx.Information_Unnamed_Mark001
    593                  }
    594                  else
    595                  {
    596                      if(pic_counter < 10)//5 6 7 8 9
    597                      {
    598                          v_UartTxImageSix2PC(m_need_tx.ServoVar + 300*(pic_counter-5));
    599                      }
    600                      else
    601                      {
    602                          if(pic_counter < 15)//10 11 12 13 14
    603                          {
    604                              v_UartTxImageSix2PC(m_need_tx.RightMotorGiV + 300*(pic_counter-10));
    605                          }
    606                          else
    607                          {
    608                              if(pic_counter < 20)//15 16 17 18 19
    609                              {
    610                                  v_UartTxImageSix2PC(m_need_tx.LeftMotorGiV + 300*(pic_counter-15));
    611                              }
    612                              else
    613                              {
    614                                  if(pic_counter < 25)//20 21 22 23 24
    615                                  {
    616                                      v_UartTxImageSix2PC(m_need_tx.RightMotorPWM + 300*(pic_counter-20));
    617                                  }
    618                                  else
    619                                  {
    620                                      if(pic_counter < 30)//25 26 27 28 29
    621                                      {
    622                                          v_UartTxImageSix2PC(m_need_tx.LeftMotorPWM + 300*(pic_counter-25));
    623                                      }
    624                                      else
    625                                      {
    626                                          if(pic_counter < 35)//25 26 27 28 29
    627                                          {
    628                                              v_UartTxImageSix2PC(m_need_tx.RightMotorSpeed + 300*(pic_counter-30));
    629                                          }
    630                                          else
    631                                          {
    632                                              if(pic_counter < 40)//25 26 27 28 29
   \                     ??v_Uart_SendPictures_1: (+1)
   \   00000008   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000000A   0x2C28             CMP      R4,#+40
   \   0000000C   0xDA09             BGE.N    ??v_Uart_SendPictures_2
    633                                              {
    634                                                  v_UartTxImageSix2PC(m_need_tx.LeftMotorSpeed + 300*(pic_counter-35));
   \   0000000E   0x....             LDR.N    R0,??DataTable8_39  ;; 0xffffadf8
   \   00000010   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000012   0xF44F 0x7116      MOV      R1,#+600
   \   00000016   0x....             LDR.N    R2,??DataTable8_36
   \   00000018   0xFB14 0x2101      SMLABB   R1,R4,R1,R2
   \   0000001C   0x1840             ADDS     R0,R0,R1
   \   0000001E   0x.... 0x....      BL       v_UartTxImageSix2PC
    635                                              }
    636                                          }
   \                     ??v_Uart_SendPictures_2: (+1)
   \   00000022   0x1E64             SUBS     R4,R4,#+1
   \                     ??v_Uart_SendPictures_0: (+1)
   \   00000024   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000026   0x2C00             CMP      R4,#+0
   \   00000028   0xD46E             BMI.N    ??v_Uart_SendPictures_3
   \   0000002A   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000002C   0x1C62             ADDS     R2,R4,#+1
   \   0000002E   0x....             LDR.N    R1,??DataTable8_40
   \   00000030   0xA800             ADD      R0,SP,#+0
   \   00000032   0x.... 0x....      BL       sprintf
   \   00000036   0x2115             MOVS     R1,#+21
   \   00000038   0xA800             ADD      R0,SP,#+0
   \   0000003A   0x.... 0x....      BL       v_UartTxStr
   \   0000003E   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000040   0x2C05             CMP      R4,#+5
   \   00000042   0xDA0B             BGE.N    ??v_Uart_SendPictures_4
   \   00000044   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000046   0xF44F 0x7016      MOV      R0,#+600
   \   0000004A   0x....             LDR.N    R1,??DataTable8_36
   \   0000004C   0xFB14 0x1000      SMLABB   R0,R4,R0,R1
   \   00000050   0xF500 0x40C6      ADD      R0,R0,#+25344
   \   00000054   0x309C             ADDS     R0,R0,#+156
   \   00000056   0x.... 0x....      BL       v_UartTxImageSix2PC
   \   0000005A   0xE7E2             B.N      ??v_Uart_SendPictures_2
   \                     ??v_Uart_SendPictures_4: (+1)
   \   0000005C   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000005E   0x2C0A             CMP      R4,#+10
   \   00000060   0xDA0B             BGE.N    ??v_Uart_SendPictures_5
   \   00000062   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000064   0xF44F 0x7016      MOV      R0,#+600
   \   00000068   0x....             LDR.N    R1,??DataTable8_36
   \   0000006A   0xFB14 0x1000      SMLABB   R0,R4,R0,R1
   \   0000006E   0xF500 0x408C      ADD      R0,R0,#+17920
   \   00000072   0x3050             ADDS     R0,R0,#+80
   \   00000074   0x.... 0x....      BL       v_UartTxImageSix2PC
   \   00000078   0xE7D3             B.N      ??v_Uart_SendPictures_2
   \                     ??v_Uart_SendPictures_5: (+1)
   \   0000007A   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000007C   0x2C0F             CMP      R4,#+15
   \   0000007E   0xDA0B             BGE.N    ??v_Uart_SendPictures_6
   \   00000080   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000082   0xF44F 0x7016      MOV      R0,#+600
   \   00000086   0x....             LDR.N    R1,??DataTable8_36
   \   00000088   0xFB14 0x1000      SMLABB   R0,R4,R0,R1
   \   0000008C   0xF500 0x500C      ADD      R0,R0,#+8960
   \   00000090   0x3028             ADDS     R0,R0,#+40
   \   00000092   0x.... 0x....      BL       v_UartTxImageSix2PC
   \   00000096   0xE7C4             B.N      ??v_Uart_SendPictures_2
   \                     ??v_Uart_SendPictures_6: (+1)
   \   00000098   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000009A   0x2C14             CMP      R4,#+20
   \   0000009C   0xDA0A             BGE.N    ??v_Uart_SendPictures_7
   \   0000009E   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000A0   0xF44F 0x7016      MOV      R0,#+600
   \   000000A4   0x....             LDR.N    R1,??DataTable8_36
   \   000000A6   0xFB14 0x1000      SMLABB   R0,R4,R0,R1
   \   000000AA   0xF600 0x30B8      ADDW     R0,R0,#+3000
   \   000000AE   0x.... 0x....      BL       v_UartTxImageSix2PC
   \   000000B2   0xE7B6             B.N      ??v_Uart_SendPictures_2
   \                     ??v_Uart_SendPictures_7: (+1)
   \   000000B4   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000B6   0x2C19             CMP      R4,#+25
   \   000000B8   0xDA0A             BGE.N    ??v_Uart_SendPictures_8
   \   000000BA   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000BC   0xF44F 0x7016      MOV      R0,#+600
   \   000000C0   0x....             LDR.N    R1,??DataTable8_36
   \   000000C2   0xFB14 0x1000      SMLABB   R0,R4,R0,R1
   \   000000C6   0xF6A0 0x30B8      SUBW     R0,R0,#+3000
   \   000000CA   0x.... 0x....      BL       v_UartTxImageSix2PC
   \   000000CE   0xE7A8             B.N      ??v_Uart_SendPictures_2
   \                     ??v_Uart_SendPictures_8: (+1)
   \   000000D0   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000D2   0x2C1E             CMP      R4,#+30
   \   000000D4   0xDA0A             BGE.N    ??v_Uart_SendPictures_9
   \   000000D6   0x....             LDR.N    R0,??DataTable8_37  ;; 0xffffdcd8
   \   000000D8   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000DA   0xF44F 0x7116      MOV      R1,#+600
   \   000000DE   0x....             LDR.N    R2,??DataTable8_36
   \   000000E0   0xFB14 0x2101      SMLABB   R1,R4,R1,R2
   \   000000E4   0x1840             ADDS     R0,R0,R1
   \   000000E6   0x.... 0x....      BL       v_UartTxImageSix2PC
   \   000000EA   0xE79A             B.N      ??v_Uart_SendPictures_2
   \                     ??v_Uart_SendPictures_9: (+1)
   \   000000EC   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000EE   0x2C23             CMP      R4,#+35
   \   000000F0   0xDA8A             BGE.N    ??v_Uart_SendPictures_1
   \   000000F2   0x....             LDR.N    R0,??DataTable8_38  ;; 0xffffc568
   \   000000F4   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000F6   0xF44F 0x7116      MOV      R1,#+600
   \   000000FA   0x....             LDR.N    R2,??DataTable8_36
   \   000000FC   0xFB14 0x2101      SMLABB   R1,R4,R1,R2
   \   00000100   0x1840             ADDS     R0,R0,R1
   \   00000102   0x.... 0x....      BL       v_UartTxImageSix2PC
   \   00000106   0xE78C             B.N      ??v_Uart_SendPictures_2
    637                                      }
    638                                  }
    639                              }
    640                          }
    641                      }
    642                  }
    643              }
    644              sprintf(TxChar,"FromShunAn");v_UartTxStr(TxChar,21);//移动
   \                     ??v_Uart_SendPictures_3: (+1)
   \   00000108   0x....             LDR.N    R1,??DataTable8_41
   \   0000010A   0xA800             ADD      R0,SP,#+0
   \   0000010C   0x.... 0x....      BL       sprintf
   \   00000110   0x2115             MOVS     R1,#+21
   \   00000112   0xA800             ADD      R0,SP,#+0
   \   00000114   0x.... 0x....      BL       v_UartTxStr
    645          }
   \   00000118   0xB006             ADD      SP,SP,#+24
   \   0000011A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x27 0x3B          DC8      0x27, 0x3B, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x25 0x64          DC8      "%d "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x5D 0x3B          DC8      0x5D, 0x3B, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x4004D010         DC32     0x4004d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x4004D014         DC32     0x4004d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x4006D003         DC32     0x4006d003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x4006D002         DC32     0x4006d002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     bus_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x4006D000         DC32     0x4006d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x4006D001         DC32     0x4006d001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x4006D00A         DC32     0x4006d00a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x4006D00B         DC32     0x4006d00b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x4006D004         DC32     0x4006d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x4006D007         DC32     0x4006d007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x........         DC32     `?<Constant "\\'This Time is ShunAn ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x........         DC32     m_Control

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x........         DC32     `?<Constant "v=%d,P=%g,I=%g,D=%g,">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x........         DC32     `?<Constant "P_Curve=%g,StopY=%d,S...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x........         DC32     m_ImageAbstract

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   0x........         DC32     m_ImageTesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   0x........         DC32     `?<Constant "Left=[">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   0x........         DC32     `?<Constant "];Right=[">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \   00000000   0x........         DC32     `?<Constant "];Mid=[">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \   00000000   0x........         DC32     `?<Constant "RightRight=[">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \   00000000   0x........         DC32     `?<Constant "Beg=%d;">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \   00000000   0x........         DC32     `?<Constant "Shut=%d;">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \   00000000   0x........         DC32     `?<Constant "LonY=%d;">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_27:
   \   00000000   0x........         DC32     `?<Constant "LonX=%d;">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_28:
   \   00000000   0x........         DC32     `?<Constant "ShowImageInformation">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_29:
   \   00000000   0x........         DC32     `?<Constant "_ShunAnGolden">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_30:
   \   00000000   0x........         DC32     `?<Constant "(Left,Right,Mid,">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_31:
   \   00000000   0x........         DC32     `?<Constant "RightRight,">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_32:
   \   00000000   0x........         DC32     `?<Constant "LonY,LonX,">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_33:
   \   00000000   0x........         DC32     `?<Constant "Shut,Beg);">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_34:
   \   00000000   0x........         DC32     ??pic_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_35:
   \   00000000   0x........         DC32     ??counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_36:
   \   00000000   0x........         DC32     m_need_tx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_37:
   \   00000000   0xFFFFDCD8         DC32     0xffffdcd8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_38:
   \   00000000   0xFFFFC568         DC32     0xffffc568

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_39:
   \   00000000   0xFFFFADF8         DC32     0xffffadf8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_40:
   \   00000000   0x........         DC32     `?<Constant "figure(%d);">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_41:
   \   00000000   0x........         DC32     `?<Constant "FromShunAn">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\'This Time is ShunAn ...">`:
   \   00000000   0x27 0x54          DC8 "'This Time is ShunAn Showing,Para:"
   \              0x68 0x69    
   \              0x73 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x53 0x68    
   \              0x75 0x6E    
   \              0x41 0x6E    
   \              0x20 0x53    
   \              0x68 0x6F    
   \              0x77 0x69    
   \              0x6E 0x67    
   \              0x2C 0x50    
   \              0x61 0x72    
   \              0x61 0x3A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "v=%d,P=%g,I=%g,D=%g,">`:
   \   00000000   0x76 0x3D          DC8 "v=%d,P=%g,I=%g,D=%g,"
   \              0x25 0x64    
   \              0x2C 0x50    
   \              0x3D 0x25    
   \              0x67 0x2C    
   \              0x49 0x3D    
   \              0x25 0x67    
   \              0x2C 0x44    
   \              0x3D 0x25    
   \              0x67 0x2C    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "P_Curve=%g,StopY=%d,S...">`:
   \   00000000   0x50 0x5F          DC8 "P_Curve=%g,StopY=%d,Servo_Diff=%g"
   \              0x43 0x75    
   \              0x72 0x76    
   \              0x65 0x3D    
   \              0x25 0x67    
   \              0x2C 0x53    
   \              0x74 0x6F    
   \              0x70 0x59    
   \              0x3D 0x25    
   \              0x64 0x2C    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x6F 0x5F    
   \              0x44 0x69    
   \              0x66 0x66    
   \              0x3D 0x25    
   \              0x67 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x27 0x3B          DC8 "';"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Left=[">`:
   \   00000000   0x4C 0x65          DC8 "Left=["
   \              0x66 0x74    
   \              0x3D 0x5B    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d "
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "];Right=[">`:
   \   00000000   0x5D 0x3B          DC8 "];Right=["
   \              0x52 0x69    
   \              0x67 0x68    
   \              0x74 0x3D    
   \              0x5B 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "];Mid=[">`:
   \   00000000   0x5D 0x3B          DC8 "];Mid=["
   \              0x4D 0x69    
   \              0x64 0x3D    
   \              0x5B 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x5D 0x3B          DC8 "];"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RightRight=[">`:
   \   00000000   0x52 0x69          DC8 "RightRight=["
   \              0x67 0x68    
   \              0x74 0x52    
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x3D 0x5B    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Beg=%d;">`:
   \   00000000   0x42 0x65          DC8 "Beg=%d;"
   \              0x67 0x3D    
   \              0x25 0x64    
   \              0x3B 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Shut=%d;">`:
   \   00000000   0x53 0x68          DC8 "Shut=%d;"
   \              0x75 0x74    
   \              0x3D 0x25    
   \              0x64 0x3B    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "LonY=%d;">`:
   \   00000000   0x4C 0x6F          DC8 "LonY=%d;"
   \              0x6E 0x59    
   \              0x3D 0x25    
   \              0x64 0x3B    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "LonX=%d;">`:
   \   00000000   0x4C 0x6F          DC8 "LonX=%d;"
   \              0x6E 0x58    
   \              0x3D 0x25    
   \              0x64 0x3B    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "ShowImageInformation">`:
   \   00000000   0x53 0x68          DC8 "ShowImageInformation"
   \              0x6F 0x77    
   \              0x49 0x6D    
   \              0x61 0x67    
   \              0x65 0x49    
   \              0x6E 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "_ShunAnGolden">`:
   \   00000000   0x5F 0x53          DC8 "_ShunAnGolden"
   \              0x68 0x75    
   \              0x6E 0x41    
   \              0x6E 0x47    
   \              0x6F 0x6C    
   \              0x64 0x65    
   \              0x6E 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "(Left,Right,Mid,">`:
   \   00000000   0x28 0x4C          DC8 "(Left,Right,Mid,"
   \              0x65 0x66    
   \              0x74 0x2C    
   \              0x52 0x69    
   \              0x67 0x68    
   \              0x74 0x2C    
   \              0x4D 0x69    
   \              0x64 0x2C    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "RightRight,">`:
   \   00000000   0x52 0x69          DC8 "RightRight,"
   \              0x67 0x68    
   \              0x74 0x52    
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x2C 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "LonY,LonX,">`:
   \   00000000   0x4C 0x6F          DC8 "LonY,LonX,"
   \              0x6E 0x59    
   \              0x2C 0x4C    
   \              0x6F 0x6E    
   \              0x58 0x2C    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Shut,Beg);">`:
   \   00000000   0x53 0x68          DC8 "Shut,Beg);"
   \              0x75 0x74    
   \              0x2C 0x42    
   \              0x65 0x67    
   \              0x29 0x3B    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "figure(%d);">`:
   \   00000000   0x66 0x69          DC8 "figure(%d);"
   \              0x67 0x75    
   \              0x72 0x65    
   \              0x28 0x25    
   \              0x64 0x29    
   \              0x3B 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "FromShunAn">`:
   \   00000000   0x46 0x72          DC8 "FromShunAn"
   \              0x6F 0x6D    
   \              0x53 0x68    
   \              0x75 0x6E    
   \              0x41 0x6E    
   \              0x00         
   \   0000000B   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __v_uart_rx_irq_en
         8   -> enable_irq
      16   b_TxImageInformation
        16   -> v_UartTxOne
       0   b_uart_getchar
       8   v_UartInit
       0   v_UartSaveImage_sint16
      40   v_UartTxImageSix2PC
        40   -> sprintf
        40   -> v_UartTxStr
     128   v_UartTxInformationAboutPara
       128   -> __aeabi_f2d
       128   -> sprintf
       128   -> v_UartTxStr
       8   v_UartTxNeedtx
         8   -> v_Uart_SendPictures
       0   v_UartTxOne
       8   v_UartTxSInt16
         8   -> v_UartTxOne
      16   v_UartTxStr
        16   -> v_UartTxOne
       8   v_Uart_GetPicture_InRunning
         8   -> v_UartSaveImage_sint16
      32   v_Uart_SendPictures
        32   -> sprintf
        32   -> v_UartTxImageSix2PC
        32   -> v_UartTxStr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%d ">
      20  ?<Constant "(Left,Right,Mid,">
       8  ?<Constant "Beg=%d;">
      12  ?<Constant "FromShunAn">
       8  ?<Constant "Left=[">
      12  ?<Constant "LonX=%d;">
      12  ?<Constant "LonY,LonX,">
      12  ?<Constant "LonY=%d;">
      36  ?<Constant "P_Curve=%g,StopY=%d,S...">
      12  ?<Constant "RightRight,">
      16  ?<Constant "RightRight=[">
      24  ?<Constant "ShowImageInformation">
      12  ?<Constant "Shut,Beg);">
      12  ?<Constant "Shut=%d;">
       4  ?<Constant "\';">
      36  ?<Constant "\'This Time is ShunAn ...">
       4  ?<Constant "];">
       8  ?<Constant "];Mid=[">
      12  ?<Constant "];Right=[">
      16  ?<Constant "_ShunAnGolden">
      12  ?<Constant "figure(%d);">
      24  ?<Constant "v=%d,P=%g,I=%g,D=%g,">
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable7
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_20
       4  ??DataTable8_21
       4  ??DataTable8_22
       4  ??DataTable8_23
       4  ??DataTable8_24
       4  ??DataTable8_25
       4  ??DataTable8_26
       4  ??DataTable8_27
       4  ??DataTable8_28
       4  ??DataTable8_29
       4  ??DataTable8_3
       4  ??DataTable8_30
       4  ??DataTable8_31
       4  ??DataTable8_32
       4  ??DataTable8_33
       4  ??DataTable8_34
       4  ??DataTable8_35
       4  ??DataTable8_36
       4  ??DataTable8_37
       4  ??DataTable8_38
       4  ??DataTable8_39
       4  ??DataTable8_4
       4  ??DataTable8_40
       4  ??DataTable8_41
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      26  __v_uart_rx_irq_en
      92  b_TxImageInformation
      38  b_uart_getchar
       1  counter
   28504  m_need_tx
       1  pic_counter
     218  v_UartInit
     124  v_UartSaveImage_sint16
     444  v_UartTxImageSix2PC
     174  v_UartTxInformationAboutPara
       8  v_UartTxNeedtx
      18  v_UartTxOne
      26  v_UartTxSInt16
      30  v_UartTxStr
     322  v_Uart_GetPicture_InRunning
     284  v_Uart_SendPictures

 
 28 506 bytes in section .bss
    316 bytes in section .rodata
  1 984 bytes in section .text
 
  1 984 bytes of CODE  memory
    316 bytes of CONST memory
 28 506 bytes of DATA  memory

Errors: none
Warnings: none
