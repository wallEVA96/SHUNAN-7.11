###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      20/Jul/2015  17:10:47 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ShunAn_Panel\Poet_ImageBeholder.c          #
#    Command line =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ShunAn_Panel\Poet_ImageBeholder.c -D IAR   #
#                    -D TWR_K60F120M -lCN D:\创作室\飞思卡尔智能小车\顺暗三号 #
#                    \代码\顺暗三号-华南赛最后七天-7.11\FLASH_1MB\List\ -lB   #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\List\ -o                         #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\Obj\ --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ -I D:\创作室\飞思卡尔智能小车\顺暗三号\代 #
#                    码\顺暗三号-华南赛最后七天-7.11\Library\ -I              #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\Library\BlessedAlien\ -I                   #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ShunAn_Panel\ -Ol --use_c++_inline         #
#    List file    =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\List\Poet_ImageBeholder.lst      #
#    Object file  =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\Obj\Poet_ImageBeholder.o         #
#                                                                             #
#                                                                             #
###############################################################################

D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛最后七天-7.11\ShunAn_Panel\Poet_ImageBeholder.c
      1          #include "arm_cm4.h"
      2          #include "MK60F15.h"
      3          #include "ShunAn_Lib.h"
      4          #include "start_ShunAn.h"
      5          
      6          #include "Poet_ImageBeholder.h"
      7          #include "Poet_Revelation.h"
      8          #include "Poet_Bluetooth.h"
      9          #include "ThePoet_ThePendulum.h"
     10          #include "Pendulum_EndlessFormsMostBeautiful.h"
     11          
     12          #include "Poet_Servo.h"
     13          #include "Poet_Motor.h"
     14          
     15          #include "Poet_InputInterface.h"
     16          
     17          #include "Poet_Bluetooth.h"
     18          
     19          #include "Poet_Buzzer.h"
     20          /***********************************************************************************************************/
     21          /***********************************************************************************************************/
     22          // K60 软件时序 SCCB
     23          /******************************************************************************/
     24          // SCCB ReadReg
     25          /******************************************************************************/
     26          // SCCB Read A Byte
     27          //      // MIDH => 0x7F
     28          //      // MIDL => 0xA2
     29          /******************************************************************************/
     30          #define SCCB_TRUE               return 'T'
     31          #define SCCB_ERROR              return 'F'
     32          /******************************************************************************/
     33          // 以下使用 软件实现波形 实现
     34          // 初始化 IIC 为通用 400k
     35          // 
     36          #define SCCB_SDA_port           PTD_BASE_PTR           
     37          #define SCCB_SDA_pin            12
     38          #define SCCB_SCL_port           PTD_BASE_PTR           
     39          #define SCCB_SCL_pin            13
     40          //
     41          #define SCCB_SDA_IN             ((SCCB_SDA_port->PDIR >> SCCB_SDA_pin)&0x01)
     42          #define SCCB_SDA_0              (SCCB_SDA_port->PDOR &=~(1<< SCCB_SDA_pin ))
     43          #define SCCB_SDA_1              (SCCB_SDA_port->PDOR |= (1<< SCCB_SDA_pin ))
     44          #define SCCB_SCL_0              (SCCB_SCL_port->PDOR &=~(1<< SCCB_SCL_pin ))
     45          #define SCCB_SCL_1              (SCCB_SCL_port->PDOR |= (1<< SCCB_SCL_pin ))
     46          #define SCCB_SCL_DDR_OUT        (SCCB_SCL_port->PDDR |= (1<< SCCB_SCL_pin ))
     47          #define SCCB_SDA_DDR_OUT        (SCCB_SDA_port->PDDR |= (1<< SCCB_SDA_pin ))
     48          #define SCCB_SDA_DDR_IN         (SCCB_SDA_port->PDDR &=~(1<< SCCB_SDA_pin ))
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void v_SCCB_Init()
     51          {
     52              // 模块与引脚开启
     53              SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
   \                     v_SCCB_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable9  ;; 0x40048038
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable9  ;; 0x40048038
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     54              PORTD_BASE_PTR->PCR[SCCB_SCL_pin] = 0x00000123u; // SCL
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable9_1  ;; 0x4004c034
   \   00000014   0xF240 0x1123      MOVW     R1,#+291
   \   00000018   0x6001             STR      R1,[R0, #+0]
     55              PORTD_BASE_PTR->PCR[SCCB_SDA_pin] = 0x00000123u; // SDA
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable9_2  ;; 0x4004c030
   \   0000001E   0xF240 0x1123      MOVW     R1,#+291
   \   00000022   0x6001             STR      R1,[R0, #+0]
     56              SCCB_SDA_DDR_OUT;
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   00000032   0x6008             STR      R0,[R1, #+0]
     57              SCCB_SCL_DDR_OUT;
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   00000042   0x6008             STR      R0,[R1, #+0]
     58          }
   \   00000044   0x4770             BX       LR               ;; return
     59          
     60          /******************************************************************************/
     61          // v_SCCB_Delay // 延迟
     62          //void v_SCCB_Delay()
     63          //{
     64          //    uint16 time = 130; // 1.3 us
     65          //    while(time){time--;asm("nop");}
     66          //}
     67          

   \                                 In section .text, align 4, keep-with-next
     68          void v_SCCB_Delay_Time(uint16 time)
     69          {
   \                     v_SCCB_Delay_Time: (+1)
   \   00000000   0xE001             B.N      ??v_SCCB_Delay_Time_0
     70              while(time){time--;asm("nop");}
   \                     ??v_SCCB_Delay_Time_1: (+1)
   \   00000002   0x1E40             SUBS     R0,R0,#+1
   \   00000004   0xBF00             nop
   \                     ??v_SCCB_Delay_Time_0: (+1)
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD1FA             BNE.N    ??v_SCCB_Delay_Time_1
     71          }
   \   0000000C   0x4770             BX       LR               ;; return
     72          
     73          #define v_SCCB_SCL_0_Delay()                v_SCCB_Delay_Time(37)               // 4000 ns
     74          #define v_SCCB_SCL_1_Delay()                v_SCCB_Delay_Time(37)               // 370 ns
     75          // 370ns
     76          /******************************************************************************/
     77          // u8_SCCB_Start // 开始

   \                                 In section .text, align 2, keep-with-next
     78          uint8 u8_SCCB_Start()
     79          {
   \                     u8_SCCB_Start: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     80              SCCB_SDA_1;SCCB_SCL_1; // 全高态
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000020   0x6008             STR      R0,[R1, #+0]
     81              SCCB_SDA_DDR_IN;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   00000030   0x6008             STR      R0,[R1, #+0]
     82              if(!SCCB_SDA_IN) // 忙检测
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x400ff0d0
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF3C0 0x3000      UBFX     R0,R0,#+12,#+1
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD109             BNE.N    ??u8_SCCB_Start_0
     83              {
     84                  SCCB_SDA_DDR_OUT;SCCB_ERROR;
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   0000004E   0x6008             STR      R0,[R1, #+0]
   \   00000050   0x2046             MOVS     R0,#+70
   \   00000052   0xE034             B.N      ??u8_SCCB_Start_1
     85              }SCCB_SDA_DDR_OUT;
   \                     ??u8_SCCB_Start_0: (+1)
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   00000062   0x6008             STR      R0,[R1, #+0]
     86              SCCB_SDA_0;v_SCCB_SCL_1_Delay();SCCB_SCL_0; // 开始态
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000072   0x6008             STR      R0,[R1, #+0]
   \   00000074   0x2025             MOVS     R0,#+37
   \   00000076   0x.... 0x....      BL       v_SCCB_Delay_Time
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000088   0x6008             STR      R0,[R1, #+0]
     87              if(SCCB_SDA_IN) // 忙检测
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x400ff0d0
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0xF3C0 0x3000      UBFX     R0,R0,#+12,#+1
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD009             BEQ.N    ??u8_SCCB_Start_2
     88              {
     89                  SCCB_SDA_DDR_OUT;SCCB_ERROR;
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   000000A6   0x6008             STR      R0,[R1, #+0]
   \   000000A8   0x2046             MOVS     R0,#+70
   \   000000AA   0xE008             B.N      ??u8_SCCB_Start_1
     90              }SCCB_SDA_DDR_OUT;
   \                     ??u8_SCCB_Start_2: (+1)
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   000000BA   0x6008             STR      R0,[R1, #+0]
     91              SCCB_TRUE;
   \   000000BC   0x2054             MOVS     R0,#+84
   \                     ??u8_SCCB_Start_1: (+1)
   \   000000BE   0xBD02             POP      {R1,PC}          ;; return
     92          }
     93          
     94          /******************************************************************************/
     95          // u8_SCCB_Stop // 停止

   \                                 In section .text, align 2, keep-with-next
     96          uint8 u8_SCCB_Stop()
     97          {
   \                     u8_SCCB_Stop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     98              SCCB_SCL_0; v_SCCB_SCL_0_Delay(); SCCB_SDA_0; v_SCCB_SCL_1_Delay(); // 全低态
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0x2025             MOVS     R0,#+37
   \   00000014   0x.... 0x....      BL       v_SCCB_Delay_Time
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000026   0x6008             STR      R0,[R1, #+0]
   \   00000028   0x2025             MOVS     R0,#+37
   \   0000002A   0x.... 0x....      BL       v_SCCB_Delay_Time
     99              SCCB_SCL_1; v_SCCB_SCL_1_Delay(); SCCB_SDA_1; v_SCCB_SCL_1_Delay(); // 停止态
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \   0000003E   0x2025             MOVS     R0,#+37
   \   00000040   0x.... 0x....      BL       v_SCCB_Delay_Time
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0x2025             MOVS     R0,#+37
   \   00000056   0x.... 0x....      BL       v_SCCB_Delay_Time
    100              SCCB_TRUE;
   \   0000005A   0x2054             MOVS     R0,#+84
   \   0000005C   0xBD02             POP      {R1,PC}          ;; return
    101          }
    102          
    103          /******************************************************************************/
    104          // u8_SCCB_Data_TxByte //

   \                                 In section .text, align 2, keep-with-next
    105          uint8 u8_SCCB_Data_TxByte(uint8 InData)
    106          {
   \                     u8_SCCB_Data_TxByte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    107              uint8 loop = 8; // 循环 7 - 0
   \   00000004   0x2508             MOVS     R5,#+8
   \   00000006   0xE01D             B.N      ??u8_SCCB_Data_TxByte_0
    108              while(loop)
    109              {
    110                  uint8 TxData = ((InData >> (loop-1))& 0x01); loop--; // 数据更新
    111                  if(TxData){SCCB_SDA_1;}
    112                        else{SCCB_SDA_0;}
   \                     ??u8_SCCB_Data_TxByte_1: (+1)
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000016   0x6008             STR      R0,[R1, #+0]
    113                  v_SCCB_SCL_0_Delay();
   \                     ??u8_SCCB_Data_TxByte_2: (+1)
   \   00000018   0x2025             MOVS     R0,#+37
   \   0000001A   0x.... 0x....      BL       v_SCCB_Delay_Time
    114                  SCCB_SCL_1;v_SCCB_SCL_1_Delay();
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   0000002C   0x6008             STR      R0,[R1, #+0]
   \   0000002E   0x2025             MOVS     R0,#+37
   \   00000030   0x.... 0x....      BL       v_SCCB_Delay_Time
    115                  SCCB_SCL_0;
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000042   0x6008             STR      R0,[R1, #+0]
   \                     ??u8_SCCB_Data_TxByte_0: (+1)
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2D00             CMP      R5,#+0
   \   00000048   0xD012             BEQ.N    ??u8_SCCB_Data_TxByte_3
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x1E68             SUBS     R0,R5,#+1
   \   0000004E   0xFA54 0xF000      ASRS     R0,R4,R0
   \   00000052   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000056   0x1E6D             SUBS     R5,R5,#+1
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD0D4             BEQ.N    ??u8_SCCB_Data_TxByte_1
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   0000006C   0x6008             STR      R0,[R1, #+0]
   \   0000006E   0xE7D3             B.N      ??u8_SCCB_Data_TxByte_2
    116              }
    117              SCCB_TRUE;
   \                     ??u8_SCCB_Data_TxByte_3: (+1)
   \   00000070   0x2054             MOVS     R0,#+84
   \   00000072   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    118          }
    119          
    120          /******************************************************************************/
    121          // u8_SCCB_Data_RxByte // 时序待修改

   \                                 In section .text, align 2, keep-with-next
    122          uint8 u8_SCCB_Data_RxByte(uint8 * RxByte)
    123          {
   \                     u8_SCCB_Data_RxByte: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    124              uint8 InData = 0; // 大端数据情况
   \   00000004   0x2500             MOVS     R5,#+0
    125              SCCB_SDA_DDR_IN; // 定义SDA为数据输入
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   00000014   0x6008             STR      R0,[R1, #+0]
    126              uint8 loop = 8; // 循环 7 - 0
   \   00000016   0x2608             MOVS     R6,#+8
   \   00000018   0xE001             B.N      ??u8_SCCB_Data_RxByte_0
    127              while(loop--)
    128              {
    129                  InData = (InData << 1);
    130                  SCCB_SCL_0;v_SCCB_SCL_0_Delay();
    131                  SCCB_SCL_1;v_SCCB_SCL_1_Delay();
    132                  if( SCCB_SDA_IN ){InData |= 0x01;} // 输入数据更新
   \                     ??u8_SCCB_Data_RxByte_1: (+1)
   \   0000001A   0xF055 0x0501      ORRS     R5,R5,#0x1
   \                     ??u8_SCCB_Data_RxByte_0: (+1)
   \   0000001E   0x0030             MOVS     R0,R6
   \   00000020   0x1E46             SUBS     R6,R0,#+1
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD020             BEQ.N    ??u8_SCCB_Data_RxByte_2
   \   00000028   0x006D             LSLS     R5,R5,#+1
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000038   0x6008             STR      R0,[R1, #+0]
   \   0000003A   0x2025             MOVS     R0,#+37
   \   0000003C   0x.... 0x....      BL       v_SCCB_Delay_Time
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   0000004E   0x6008             STR      R0,[R1, #+0]
   \   00000050   0x2025             MOVS     R0,#+37
   \   00000052   0x.... 0x....      BL       v_SCCB_Delay_Time
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x400ff0d0
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0xF3C0 0x3000      UBFX     R0,R0,#+12,#+1
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD1DA             BNE.N    ??u8_SCCB_Data_RxByte_1
    133                               else{InData &=~0x01;}
   \   00000064   0xF015 0x05FE      ANDS     R5,R5,#0xFE
   \   00000068   0xE7D9             B.N      ??u8_SCCB_Data_RxByte_0
    134              }
    135              (*RxByte) = InData;
   \                     ??u8_SCCB_Data_RxByte_2: (+1)
   \   0000006A   0x7025             STRB     R5,[R4, #+0]
    136              SCCB_SDA_DDR_OUT; SCCB_SCL_0;
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   0000007A   0x6008             STR      R0,[R1, #+0]
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    137              SCCB_TRUE;
   \   0000008C   0x2054             MOVS     R0,#+84
   \   0000008E   0xBD70             POP      {R4-R6,PC}       ;; return
    138          }
    139          
    140          
    141          /******************************************************************************/
    142          // u8_SCCB_WaitACK // 等待应答

   \                                 In section .text, align 2, keep-with-next
    143          uint8 u8_SCCB_WaitACK()
    144          {
   \                     u8_SCCB_WaitACK: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    145              SCCB_SCL_0; v_SCCB_SCL_0_Delay(); SCCB_SDA_DDR_IN;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0x2025             MOVS     R0,#+37
   \   00000014   0x.... 0x....      BL       v_SCCB_Delay_Time
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   00000026   0x6008             STR      R0,[R1, #+0]
    146              SCCB_SCL_1; v_SCCB_SCL_1_Delay();
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0x2025             MOVS     R0,#+37
   \   0000003A   0x.... 0x....      BL       v_SCCB_Delay_Time
    147              if(SCCB_SDA_IN) // 检测外部
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x400ff0d0
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF3C0 0x3000      UBFX     R0,R0,#+12,#+1
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD011             BEQ.N    ??u8_SCCB_WaitACK_0
    148              {
    149                  SCCB_SDA_DDR_OUT;
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    150                  SCCB_SCL_0;
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    151                  SCCB_ERROR;
   \   0000006C   0x2046             MOVS     R0,#+70
   \   0000006E   0xE010             B.N      ??u8_SCCB_WaitACK_1
    152              }SCCB_SDA_DDR_OUT;
   \                     ??u8_SCCB_WaitACK_0: (+1)
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    153              SCCB_SCL_0;
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    154              SCCB_TRUE;
   \   00000090   0x2054             MOVS     R0,#+84
   \                     ??u8_SCCB_WaitACK_1: (+1)
   \   00000092   0xBD02             POP      {R1,PC}          ;; return
    155          }
    156          

   \                                 In section .text, align 2, keep-with-next
    157          void v_SCCB_ACK()
    158          {
   \                     v_SCCB_ACK: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    159              SCCB_SCL_0; v_SCCB_SCL_0_Delay();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0x2025             MOVS     R0,#+37
   \   00000014   0x.... 0x....      BL       v_SCCB_Delay_Time
    160              SCCB_SDA_0;
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000026   0x6008             STR      R0,[R1, #+0]
    161              SCCB_SCL_1; //v_SCCB_SCL_0_Delay();
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000036   0x6008             STR      R0,[R1, #+0]
    162              SCCB_SCL_0;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000046   0x6008             STR      R0,[R1, #+0]
    163          }
   \   00000048   0xBD01             POP      {R0,PC}          ;; return
    164          
    165          
    166          
    167          /******************************************************************************/
    168          // v_SCCB_NoAck

   \                                 In section .text, align 2, keep-with-next
    169          void v_SCCB_NoAck(void)
    170          {
   \                     v_SCCB_NoAck: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    171              SCCB_SCL_0;v_SCCB_SCL_0_Delay();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0x2025             MOVS     R0,#+37
   \   00000014   0x.... 0x....      BL       v_SCCB_Delay_Time
    172              SCCB_SDA_1;v_SCCB_SCL_1_Delay();
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000026   0x6008             STR      R0,[R1, #+0]
   \   00000028   0x2025             MOVS     R0,#+37
   \   0000002A   0x.... 0x....      BL       v_SCCB_Delay_Time
    173              SCCB_SCL_1;v_SCCB_SCL_1_Delay();
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \   0000003E   0x2025             MOVS     R0,#+37
   \   00000040   0x.... 0x....      BL       v_SCCB_Delay_Time
    174              SCCB_SCL_0;v_SCCB_SCL_0_Delay();
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x400ff0c0
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x400ff0c0
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0x2025             MOVS     R0,#+37
   \   00000056   0x.... 0x....      BL       v_SCCB_Delay_Time
    175          }
   \   0000005A   0xBD01             POP      {R0,PC}          ;; return
    176          
    177          /******************************************************************************/
    178          /******************************************************************************/
    179          // 软件模块 实现 SCCB时序
    180          //============================================================================//
    181          // 读

   \                                 In section .text, align 2, keep-with-next
    182          uint8 u8_SCCB_ReadReg_u8(uint8 SlaveID ,uint8 * result ,uint8 u8RegAddress)
    183          {
   \                     u8_SCCB_ReadReg_u8: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    184              if('F' == u8_SCCB_Start()){return 'F';}                             // Start
   \   00000008   0x.... 0x....      BL       u8_SCCB_Start
   \   0000000C   0x2846             CMP      R0,#+70
   \   0000000E   0xD101             BNE.N    ??u8_SCCB_ReadReg_u8_0
   \   00000010   0x2046             MOVS     R0,#+70
   \   00000012   0xE037             B.N      ??u8_SCCB_ReadReg_u8_1
    185              u8_SCCB_Data_TxByte((SlaveID << 1)|0);                              // 写模式 => 从机地址
   \                     ??u8_SCCB_ReadReg_u8_0: (+1)
   \   00000014   0x0060             LSLS     R0,R4,#+1
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    186              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   0000001C   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   00000020   0x2846             CMP      R0,#+70
   \   00000022   0xD103             BNE.N    ??u8_SCCB_ReadReg_u8_2
   \   00000024   0x.... 0x....      BL       u8_SCCB_Stop
   \   00000028   0x2046             MOVS     R0,#+70
   \   0000002A   0xE02B             B.N      ??u8_SCCB_ReadReg_u8_1
    187              u8_SCCB_Data_TxByte(u8RegAddress);                                  // 写模式 => 寄存器
   \                     ??u8_SCCB_ReadReg_u8_2: (+1)
   \   0000002C   0x0030             MOVS     R0,R6
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    188              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   00000034   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   00000038   0x2846             CMP      R0,#+70
   \   0000003A   0xD103             BNE.N    ??u8_SCCB_ReadReg_u8_3
   \   0000003C   0x.... 0x....      BL       u8_SCCB_Stop
   \   00000040   0x2046             MOVS     R0,#+70
   \   00000042   0xE01F             B.N      ??u8_SCCB_ReadReg_u8_1
    189              u8_SCCB_Stop();                                                     // 总线停止 
   \                     ??u8_SCCB_ReadReg_u8_3: (+1)
   \   00000044   0x.... 0x....      BL       u8_SCCB_Stop
    190              if('F' == u8_SCCB_Start()){u8_SCCB_Stop();return 'F';}              // 总线继续
   \   00000048   0x.... 0x....      BL       u8_SCCB_Start
   \   0000004C   0x2846             CMP      R0,#+70
   \   0000004E   0xD103             BNE.N    ??u8_SCCB_ReadReg_u8_4
   \   00000050   0x.... 0x....      BL       u8_SCCB_Stop
   \   00000054   0x2046             MOVS     R0,#+70
   \   00000056   0xE015             B.N      ??u8_SCCB_ReadReg_u8_1
    191              u8_SCCB_Data_TxByte((SlaveID << 1)|1);                              // 读模式 => 从机地址
   \                     ??u8_SCCB_ReadReg_u8_4: (+1)
   \   00000058   0x0060             LSLS     R0,R4,#+1
   \   0000005A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    192              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   00000064   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   00000068   0x2846             CMP      R0,#+70
   \   0000006A   0xD103             BNE.N    ??u8_SCCB_ReadReg_u8_5
   \   0000006C   0x.... 0x....      BL       u8_SCCB_Stop
   \   00000070   0x2046             MOVS     R0,#+70
   \   00000072   0xE007             B.N      ??u8_SCCB_ReadReg_u8_1
    193              u8_SCCB_Data_RxByte(result);v_SCCB_NoAck();                         // 数据接收
   \                     ??u8_SCCB_ReadReg_u8_5: (+1)
   \   00000074   0x0028             MOVS     R0,R5
   \   00000076   0x.... 0x....      BL       u8_SCCB_Data_RxByte
   \   0000007A   0x.... 0x....      BL       v_SCCB_NoAck
    194              u8_SCCB_Stop();                                                     // 停止
   \   0000007E   0x.... 0x....      BL       u8_SCCB_Stop
    195              SCCB_TRUE;                                                          // 返回TRUE
   \   00000082   0x2054             MOVS     R0,#+84
   \                     ??u8_SCCB_ReadReg_u8_1: (+1)
   \   00000084   0xBD70             POP      {R4-R6,PC}       ;; return
    196          }
    197          

   \                                 In section .text, align 2, keep-with-next
    198          uint8 u8_SCCB_ReadReg_u16(uint8 SlaveID ,uint16 * result ,uint8 u8RegAddress)
    199          {
   \                     u8_SCCB_ReadReg_u16: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0016             MOVS     R6,R2
    200              uint8 temp_High_eight = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0001      STRB     R0,[SP, #+1]
    201              uint8 temp_Low_eight  = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
    202              if('F' == u8_SCCB_Start()){return 'F';}                             // Start
   \   00000016   0x.... 0x....      BL       u8_SCCB_Start
   \   0000001A   0x2846             CMP      R0,#+70
   \   0000001C   0xD101             BNE.N    ??u8_SCCB_ReadReg_u16_0
   \   0000001E   0x2046             MOVS     R0,#+70
   \   00000020   0xE044             B.N      ??u8_SCCB_ReadReg_u16_1
    203              u8_SCCB_Data_TxByte((SlaveID << 1)|0);                              // 写模式 => 从机地址
   \                     ??u8_SCCB_ReadReg_u16_0: (+1)
   \   00000022   0x0068             LSLS     R0,R5,#+1
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    204              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   0000002A   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   0000002E   0x2846             CMP      R0,#+70
   \   00000030   0xD103             BNE.N    ??u8_SCCB_ReadReg_u16_2
   \   00000032   0x.... 0x....      BL       u8_SCCB_Stop
   \   00000036   0x2046             MOVS     R0,#+70
   \   00000038   0xE038             B.N      ??u8_SCCB_ReadReg_u16_1
    205              u8_SCCB_Data_TxByte(u8RegAddress);                                  // 写模式 => 寄存器
   \                     ??u8_SCCB_ReadReg_u16_2: (+1)
   \   0000003A   0x0030             MOVS     R0,R6
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    206              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   00000042   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   00000046   0x2846             CMP      R0,#+70
   \   00000048   0xD103             BNE.N    ??u8_SCCB_ReadReg_u16_3
   \   0000004A   0x.... 0x....      BL       u8_SCCB_Stop
   \   0000004E   0x2046             MOVS     R0,#+70
   \   00000050   0xE02C             B.N      ??u8_SCCB_ReadReg_u16_1
    207              u8_SCCB_Stop();                                                     // 总线停止 
   \                     ??u8_SCCB_ReadReg_u16_3: (+1)
   \   00000052   0x.... 0x....      BL       u8_SCCB_Stop
    208              if('F' == u8_SCCB_Start()){u8_SCCB_Stop();return 'F';}              // 总线继续
   \   00000056   0x.... 0x....      BL       u8_SCCB_Start
   \   0000005A   0x2846             CMP      R0,#+70
   \   0000005C   0xD103             BNE.N    ??u8_SCCB_ReadReg_u16_4
   \   0000005E   0x.... 0x....      BL       u8_SCCB_Stop
   \   00000062   0x2046             MOVS     R0,#+70
   \   00000064   0xE022             B.N      ??u8_SCCB_ReadReg_u16_1
    209              u8_SCCB_Data_TxByte((SlaveID << 1)|1);                              // 读模式 => 从机地址
   \                     ??u8_SCCB_ReadReg_u16_4: (+1)
   \   00000066   0x0068             LSLS     R0,R5,#+1
   \   00000068   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    210              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   00000072   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   00000076   0x2846             CMP      R0,#+70
   \   00000078   0xD103             BNE.N    ??u8_SCCB_ReadReg_u16_5
   \   0000007A   0x.... 0x....      BL       u8_SCCB_Stop
   \   0000007E   0x2046             MOVS     R0,#+70
   \   00000080   0xE014             B.N      ??u8_SCCB_ReadReg_u16_1
    211              u8_SCCB_Data_RxByte( &temp_High_eight );                            // 高8位
   \                     ??u8_SCCB_ReadReg_u16_5: (+1)
   \   00000082   0xF10D 0x0001      ADD      R0,SP,#+1
   \   00000086   0x.... 0x....      BL       u8_SCCB_Data_RxByte
    212              v_SCCB_ACK();                                                       // 主机发送ACK
   \   0000008A   0x.... 0x....      BL       v_SCCB_ACK
    213              u8_SCCB_Data_RxByte( &temp_Low_eight );                             // 低8位
   \   0000008E   0xA800             ADD      R0,SP,#+0
   \   00000090   0x.... 0x....      BL       u8_SCCB_Data_RxByte
    214              *result = temp_Low_eight | ((temp_High_eight << 8) & 0xFF00);       // 数据存储
   \   00000094   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000098   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000009C   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   000000A0   0x8020             STRH     R0,[R4, #+0]
    215              v_SCCB_NoAck();                                                     // 数据接收
   \   000000A2   0x.... 0x....      BL       v_SCCB_NoAck
    216              u8_SCCB_Stop();                                                     // 停止
   \   000000A6   0x.... 0x....      BL       u8_SCCB_Stop
    217              SCCB_TRUE;                                                          // 返回TRUE
   \   000000AA   0x2054             MOVS     R0,#+84
   \                     ??u8_SCCB_ReadReg_u16_1: (+1)
   \   000000AC   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    218          }
    219          
    220          //============================================================================//
    221          // 写

   \                                 In section .text, align 2, keep-with-next
    222          uint8 u8_SCCB_WriteReg_u8(uint8 SlaveID ,uint8 data ,uint8 u8RegAddress)
    223          {
   \                     u8_SCCB_WriteReg_u8: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    224              if('F' == u8_SCCB_Start()){return 'F';}                             // Start
   \   00000008   0x.... 0x....      BL       u8_SCCB_Start
   \   0000000C   0x2846             CMP      R0,#+70
   \   0000000E   0xD101             BNE.N    ??u8_SCCB_WriteReg_u8_0
   \   00000010   0x2046             MOVS     R0,#+70
   \   00000012   0xE026             B.N      ??u8_SCCB_WriteReg_u8_1
    225              u8_SCCB_Data_TxByte((SlaveID << 1)|0);                              // 写模式 => 从机地址
   \                     ??u8_SCCB_WriteReg_u8_0: (+1)
   \   00000014   0x0060             LSLS     R0,R4,#+1
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    226              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   0000001C   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   00000020   0x2846             CMP      R0,#+70
   \   00000022   0xD103             BNE.N    ??u8_SCCB_WriteReg_u8_2
   \   00000024   0x.... 0x....      BL       u8_SCCB_Stop
   \   00000028   0x2046             MOVS     R0,#+70
   \   0000002A   0xE01A             B.N      ??u8_SCCB_WriteReg_u8_1
    227              u8_SCCB_Data_TxByte(u8RegAddress);                                  // 写模式 => 寄存器
   \                     ??u8_SCCB_WriteReg_u8_2: (+1)
   \   0000002C   0x0030             MOVS     R0,R6
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    228              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   00000034   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   00000038   0x2846             CMP      R0,#+70
   \   0000003A   0xD103             BNE.N    ??u8_SCCB_WriteReg_u8_3
   \   0000003C   0x.... 0x....      BL       u8_SCCB_Stop
   \   00000040   0x2046             MOVS     R0,#+70
   \   00000042   0xE00E             B.N      ??u8_SCCB_WriteReg_u8_1
    229              u8_SCCB_Data_TxByte(data);                                          // 写模式 => 数据
   \                     ??u8_SCCB_WriteReg_u8_3: (+1)
   \   00000044   0x0028             MOVS     R0,R5
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    230              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   0000004C   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   00000050   0x2846             CMP      R0,#+70
   \   00000052   0xD103             BNE.N    ??u8_SCCB_WriteReg_u8_4
   \   00000054   0x.... 0x....      BL       u8_SCCB_Stop
   \   00000058   0x2046             MOVS     R0,#+70
   \   0000005A   0xE002             B.N      ??u8_SCCB_WriteReg_u8_1
    231              u8_SCCB_Stop();                                                     // 停止
   \                     ??u8_SCCB_WriteReg_u8_4: (+1)
   \   0000005C   0x.... 0x....      BL       u8_SCCB_Stop
    232              SCCB_TRUE;                                                          // 返回TRUE
   \   00000060   0x2054             MOVS     R0,#+84
   \                     ??u8_SCCB_WriteReg_u8_1: (+1)
   \   00000062   0xBD70             POP      {R4-R6,PC}       ;; return
    233          }
    234          

   \                                 In section .text, align 2, keep-with-next
    235          uint8 u8_SCCB_WriteReg_u16(uint8 SlaveID ,uint16 data ,uint8 u8RegAddress)
    236          {
   \                     u8_SCCB_WriteReg_u16: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    237              if('F' == u8_SCCB_Start()){return 'F';}                             // Start
   \   00000008   0x.... 0x....      BL       u8_SCCB_Start
   \   0000000C   0x2846             CMP      R0,#+70
   \   0000000E   0xD101             BNE.N    ??u8_SCCB_WriteReg_u16_0
   \   00000010   0x2046             MOVS     R0,#+70
   \   00000012   0xE033             B.N      ??u8_SCCB_WriteReg_u16_1
    238              u8_SCCB_Data_TxByte((SlaveID << 1)|0);                              // 写模式 => 从机地址
   \                     ??u8_SCCB_WriteReg_u16_0: (+1)
   \   00000014   0x0060             LSLS     R0,R4,#+1
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    239              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   0000001C   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   00000020   0x2846             CMP      R0,#+70
   \   00000022   0xD103             BNE.N    ??u8_SCCB_WriteReg_u16_2
   \   00000024   0x.... 0x....      BL       u8_SCCB_Stop
   \   00000028   0x2046             MOVS     R0,#+70
   \   0000002A   0xE027             B.N      ??u8_SCCB_WriteReg_u16_1
    240              u8_SCCB_Data_TxByte(u8RegAddress);                                  // 写模式 => 寄存器
   \                     ??u8_SCCB_WriteReg_u16_2: (+1)
   \   0000002C   0x0030             MOVS     R0,R6
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    241              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   00000034   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   00000038   0x2846             CMP      R0,#+70
   \   0000003A   0xD103             BNE.N    ??u8_SCCB_WriteReg_u16_3
   \   0000003C   0x.... 0x....      BL       u8_SCCB_Stop
   \   00000040   0x2046             MOVS     R0,#+70
   \   00000042   0xE01B             B.N      ??u8_SCCB_WriteReg_u16_1
    242              u8_SCCB_Data_TxByte( (data >> 8) & 0x00FF );                        // 写模式 => 数据
   \                     ??u8_SCCB_WriteReg_u16_3: (+1)
   \   00000044   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000046   0x0A28             LSRS     R0,R5,#+8
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    243              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   0000004E   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   00000052   0x2846             CMP      R0,#+70
   \   00000054   0xD103             BNE.N    ??u8_SCCB_WriteReg_u16_4
   \   00000056   0x.... 0x....      BL       u8_SCCB_Stop
   \   0000005A   0x2046             MOVS     R0,#+70
   \   0000005C   0xE00E             B.N      ??u8_SCCB_WriteReg_u16_1
    244              u8_SCCB_Data_TxByte( data & 0x00FF );                               // 写模式 => 数据
   \                     ??u8_SCCB_WriteReg_u16_4: (+1)
   \   0000005E   0x0028             MOVS     R0,R5
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0x.... 0x....      BL       u8_SCCB_Data_TxByte
    245              if('F' == u8_SCCB_WaitACK()){u8_SCCB_Stop();return 'F';}            // 等待应答
   \   00000066   0x.... 0x....      BL       u8_SCCB_WaitACK
   \   0000006A   0x2846             CMP      R0,#+70
   \   0000006C   0xD103             BNE.N    ??u8_SCCB_WriteReg_u16_5
   \   0000006E   0x.... 0x....      BL       u8_SCCB_Stop
   \   00000072   0x2046             MOVS     R0,#+70
   \   00000074   0xE002             B.N      ??u8_SCCB_WriteReg_u16_1
    246              u8_SCCB_Stop();                                                     // 停止
   \                     ??u8_SCCB_WriteReg_u16_5: (+1)
   \   00000076   0x.... 0x....      BL       u8_SCCB_Stop
    247              SCCB_TRUE;                                                          // 返回TRUE
   \   0000007A   0x2054             MOVS     R0,#+84
   \                     ??u8_SCCB_WriteReg_u16_1: (+1)
   \   0000007C   0xBD70             POP      {R4-R6,PC}       ;; return
    248          }
    249          
    250          //============================================================================//
    251          //============================================================================//
    252          //============================================================================//
    253          // 摄像头初始化
    254          #define Beholder_Addr                   (0xB8 >> 1)
    255          #define Beholder_ChipVer                (0xFF)
    256          #define Beholder_Col_Start              (0x01)
    257          
    258          #define BeholderReg_Read_Mode_0D                        (0x0D)
    259          #define BeholderReg_Gain_Set_35                         (0x35)
    260          #define BeholderReg_Auto_GainExp_0xAF                   (0xAF)
    261          // 0x80 - 0x98
    262          #define BeholderReg_ADCref_2C                           (0x2C)
    263          // 黑电平校准 42 4C 46 47 48
    264          
    265          //#define Beholder_offsetC_Var            (0x48)

   \                                 In section .bss, align 4
    266          s_ImageInfor m_self_Beholder;//摄像头信息
   \                     m_self_Beholder:
   \   00000000                      DS8 12
    267          

   \                                 In section .text, align 2, keep-with-next
    268          uint8 b_Beholder_Init()
    269          {
   \                     b_Beholder_Init: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
    270              m_self_Beholder.errorNum = 0;
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x7181             STRB     R1,[R0, #+6]
    271              m_self_Beholder.FrameNum = 0;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x6001             STR      R1,[R0, #+0]
    272              m_self_Beholder.LineCounter = 0;
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x8081             STRH     R1,[R0, #+4]
    273              m_self_Beholder.regRewrite = 0;
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x71C1             STRB     R1,[R0, #+7]
    274              m_self_Beholder.regRewriteNumber = 0;
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x7201             STRB     R1,[R0, #+8]
    275              m_self_Beholder.regReNumber_RegName = 0;  
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x8141             STRH     R1,[R0, #+10]
    276              
    277              v_SCCB_Init();
   \   00000036   0x.... 0x....      BL       v_SCCB_Init
    278              uint16 result = 0;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    279              uint8 writeEnable = 0;
   \   00000040   0x2400             MOVS     R4,#+0
    280          //    uint8 writeDone = 0;//写完毕
    281                
    282              //Magic Number//=>常数
    283              const uint16 regFE_BEEF_unlocked = 0xBEEF;
   \   00000042   0xF64B 0x60EF      MOVW     R0,#+48879
   \   00000046   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    284              const uint16 reg03_480u_height = 480;
   \   0000004A   0xF44F 0x70F0      MOV      R0,#+480
   \   0000004E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    285              const uint16 reg05_94u_lineShadowTime = 94;
   \   00000052   0x205E             MOVS     R0,#+94
   \   00000054   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    286              const uint16 reg06_45u_fieldShadowTime = 500;
   \   00000058   0xF44F 0x70FA      MOV      R0,#+500
   \   0000005C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    287              
    288              const uint16 reg07_188_chipCtl = 0x388;
   \   00000060   0xF44F 0x7062      MOV      R0,#+904
   \   00000064   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    289              const uint16 reg0B_number_totalShutterWdith = 35;//30//80实验室标准光强
   \   00000068   0x2523             MOVS     R5,#+35
    290              m_ImageAbstract.TotalShutterTime = reg0B_number_totalShutterWdith;
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   0000006E   0x8485             STRH     R5,[R0, #+36]
    291              
    292              
    293              const uint16 reg0F_11_cameraSetting = 0x11;
   \   00000070   0x2011             MOVS     R0,#+17
   \   00000072   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    294              const uint16 reg1C_3_dataConverting = 3;
   \   00000076   0x2603             MOVS     R6,#+3
    295              
    296              const uint16 reg2C_7_ADCref = 7;
   \   00000078   0x2707             MOVS     R7,#+7
    297              const uint16 regAF_0_AGEC_unlocked = 0;
   \   0000007A   0xF05F 0x0800      MOVS     R8,#+0
    298              const uint16 reg0D_32A_readMode = 0x32A;
   \   0000007E   0xF240 0x392A      MOVW     R9,#+810
    299              const uint16 reg0A_64_ShutterWdithCtl = 0x64;
   \   00000082   0xF05F 0x0A64      MOVS     R10,#+100
    300              
    301              const uint16 reg35_number_Gain = 32;
   \   00000086   0xF05F 0x0B20      MOVS     R11,#+32
    302              
    303              if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,Beholder_ChipVer) ){return 'F';}//确认芯片型号
   \   0000008A   0x22FF             MOVS     R2,#+255
   \   0000008C   0xA900             ADD      R1,SP,#+0
   \   0000008E   0x205C             MOVS     R0,#+92
   \   00000090   0x.... 0x....      BL       u8_SCCB_ReadReg_u16
   \   00000094   0x2854             CMP      R0,#+84
   \   00000096   0xD001             BEQ.N    ??b_Beholder_Init_0
   \   00000098   0x2046             MOVS     R0,#+70
   \   0000009A   0xE0B0             B.N      ??b_Beholder_Init_1
    304              if(!((0x1311 == result)||(0x1313 == result))){return 'F';}//0x1311 0x1313//确认型号
   \                     ??b_Beholder_Init_0: (+1)
   \   0000009C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000000A0   0xF241 0x3111      MOVW     R1,#+4881
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD007             BEQ.N    ??b_Beholder_Init_2
   \   000000A8   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000000AC   0xF241 0x3113      MOVW     R1,#+4883
   \   000000B0   0x4288             CMP      R0,R1
   \   000000B2   0xD001             BEQ.N    ??b_Beholder_Init_2
   \   000000B4   0x2046             MOVS     R0,#+70
   \   000000B6   0xE0A2             B.N      ??b_Beholder_Init_1
    305              
    306              do//寄存器控制
    307              {    
    308                  //====================================================================//
    309                
    310                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,regFE_BEEF_unlocked,0xFE) ){return 'F';}
   \                     ??b_Beholder_Init_2: (+1)
   \   000000B8   0x22FE             MOVS     R2,#+254
   \   000000BA   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   000000BE   0x205C             MOVS     R0,#+92
   \   000000C0   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   000000C4   0x2854             CMP      R0,#+84
   \   000000C6   0xD001             BEQ.N    ??b_Beholder_Init_3
   \   000000C8   0x2046             MOVS     R0,#+70
   \   000000CA   0xE098             B.N      ??b_Beholder_Init_1
    311                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,reg03_480u_height,0x03) ){return 'F';}
   \                     ??b_Beholder_Init_3: (+1)
   \   000000CC   0x2203             MOVS     R2,#+3
   \   000000CE   0xF8BD 0x100A      LDRH     R1,[SP, #+10]
   \   000000D2   0x205C             MOVS     R0,#+92
   \   000000D4   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   000000D8   0x2854             CMP      R0,#+84
   \   000000DA   0xD001             BEQ.N    ??b_Beholder_Init_4
   \   000000DC   0x2046             MOVS     R0,#+70
   \   000000DE   0xE08E             B.N      ??b_Beholder_Init_1
    312                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,reg05_94u_lineShadowTime,0x05) ){return 'F';}
   \                     ??b_Beholder_Init_4: (+1)
   \   000000E0   0x2205             MOVS     R2,#+5
   \   000000E2   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \   000000E6   0x205C             MOVS     R0,#+92
   \   000000E8   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   000000EC   0x2854             CMP      R0,#+84
   \   000000EE   0xD001             BEQ.N    ??b_Beholder_Init_5
   \   000000F0   0x2046             MOVS     R0,#+70
   \   000000F2   0xE084             B.N      ??b_Beholder_Init_1
    313                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,reg06_45u_fieldShadowTime,0x06) ){return 'F';}
   \                     ??b_Beholder_Init_5: (+1)
   \   000000F4   0x2206             MOVS     R2,#+6
   \   000000F6   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   000000FA   0x205C             MOVS     R0,#+92
   \   000000FC   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   00000100   0x2854             CMP      R0,#+84
   \   00000102   0xD001             BEQ.N    ??b_Beholder_Init_6
   \   00000104   0x2046             MOVS     R0,#+70
   \   00000106   0xE07A             B.N      ??b_Beholder_Init_1
    314                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,reg07_188_chipCtl,0x07) ){return 'F';}
   \                     ??b_Beholder_Init_6: (+1)
   \   00000108   0x2207             MOVS     R2,#+7
   \   0000010A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000010E   0x205C             MOVS     R0,#+92
   \   00000110   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   00000114   0x2854             CMP      R0,#+84
   \   00000116   0xD001             BEQ.N    ??b_Beholder_Init_7
   \   00000118   0x2046             MOVS     R0,#+70
   \   0000011A   0xE070             B.N      ??b_Beholder_Init_1
    315                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,reg0A_64_ShutterWdithCtl,0x0A) ){return 'F';}
   \                     ??b_Beholder_Init_7: (+1)
   \   0000011C   0x220A             MOVS     R2,#+10
   \   0000011E   0x4651             MOV      R1,R10
   \   00000120   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000122   0x205C             MOVS     R0,#+92
   \   00000124   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   00000128   0x2854             CMP      R0,#+84
   \   0000012A   0xD001             BEQ.N    ??b_Beholder_Init_8
   \   0000012C   0x2046             MOVS     R0,#+70
   \   0000012E   0xE066             B.N      ??b_Beholder_Init_1
    316                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,reg0B_number_totalShutterWdith,0x0B) ){return 'F';}
   \                     ??b_Beholder_Init_8: (+1)
   \   00000130   0x220B             MOVS     R2,#+11
   \   00000132   0x0029             MOVS     R1,R5
   \   00000134   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000136   0x205C             MOVS     R0,#+92
   \   00000138   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   0000013C   0x2854             CMP      R0,#+84
   \   0000013E   0xD001             BEQ.N    ??b_Beholder_Init_9
   \   00000140   0x2046             MOVS     R0,#+70
   \   00000142   0xE05C             B.N      ??b_Beholder_Init_1
    317                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,reg0D_32A_readMode,0x0D) ){return 'F';}
   \                     ??b_Beholder_Init_9: (+1)
   \   00000144   0x220D             MOVS     R2,#+13
   \   00000146   0x4649             MOV      R1,R9
   \   00000148   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000014A   0x205C             MOVS     R0,#+92
   \   0000014C   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   00000150   0x2854             CMP      R0,#+84
   \   00000152   0xD001             BEQ.N    ??b_Beholder_Init_10
   \   00000154   0x2046             MOVS     R0,#+70
   \   00000156   0xE052             B.N      ??b_Beholder_Init_1
    318                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,reg0F_11_cameraSetting,0x0F) ){return 'F';}
   \                     ??b_Beholder_Init_10: (+1)
   \   00000158   0x220F             MOVS     R2,#+15
   \   0000015A   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   0000015E   0x205C             MOVS     R0,#+92
   \   00000160   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   00000164   0x2854             CMP      R0,#+84
   \   00000166   0xD001             BEQ.N    ??b_Beholder_Init_11
   \   00000168   0x2046             MOVS     R0,#+70
   \   0000016A   0xE048             B.N      ??b_Beholder_Init_1
    319                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,reg1C_3_dataConverting,0x1C) ){return 'F';}
   \                     ??b_Beholder_Init_11: (+1)
   \   0000016C   0x221C             MOVS     R2,#+28
   \   0000016E   0x0031             MOVS     R1,R6
   \   00000170   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000172   0x205C             MOVS     R0,#+92
   \   00000174   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   00000178   0x2854             CMP      R0,#+84
   \   0000017A   0xD001             BEQ.N    ??b_Beholder_Init_12
   \   0000017C   0x2046             MOVS     R0,#+70
   \   0000017E   0xE03E             B.N      ??b_Beholder_Init_1
    320                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,reg2C_7_ADCref,0x2C) ){return 'F';}
   \                     ??b_Beholder_Init_12: (+1)
   \   00000180   0x222C             MOVS     R2,#+44
   \   00000182   0x0039             MOVS     R1,R7
   \   00000184   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000186   0x205C             MOVS     R0,#+92
   \   00000188   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   0000018C   0x2854             CMP      R0,#+84
   \   0000018E   0xD001             BEQ.N    ??b_Beholder_Init_13
   \   00000190   0x2046             MOVS     R0,#+70
   \   00000192   0xE034             B.N      ??b_Beholder_Init_1
    321                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,regAF_0_AGEC_unlocked,0xAF) ){return 'F';}
   \                     ??b_Beholder_Init_13: (+1)
   \   00000194   0x22AF             MOVS     R2,#+175
   \   00000196   0x4641             MOV      R1,R8
   \   00000198   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000019A   0x205C             MOVS     R0,#+92
   \   0000019C   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   000001A0   0x2854             CMP      R0,#+84
   \   000001A2   0xD001             BEQ.N    ??b_Beholder_Init_14
   \   000001A4   0x2046             MOVS     R0,#+70
   \   000001A6   0xE02A             B.N      ??b_Beholder_Init_1
    322                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,reg35_number_Gain,0x35) ){return 'F';}
   \                     ??b_Beholder_Init_14: (+1)
   \   000001A8   0x2235             MOVS     R2,#+53
   \   000001AA   0x4659             MOV      R1,R11
   \   000001AC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001AE   0x205C             MOVS     R0,#+92
   \   000001B0   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   000001B4   0x2854             CMP      R0,#+84
   \   000001B6   0xD001             BEQ.N    ??b_Beholder_Init_15
   \   000001B8   0x2046             MOVS     R0,#+70
   \   000001BA   0xE020             B.N      ??b_Beholder_Init_1
    323                
    324                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,1,0x0C) ){return 'F';}
   \                     ??b_Beholder_Init_15: (+1)
   \   000001BC   0x220C             MOVS     R2,#+12
   \   000001BE   0x2101             MOVS     R1,#+1
   \   000001C0   0x205C             MOVS     R0,#+92
   \   000001C2   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   000001C6   0x2854             CMP      R0,#+84
   \   000001C8   0xD001             BEQ.N    ??b_Beholder_Init_16
   \   000001CA   0x2046             MOVS     R0,#+70
   \   000001CC   0xE017             B.N      ??b_Beholder_Init_1
    325                  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,0,0x0C) ){return 'F';}
   \                     ??b_Beholder_Init_16: (+1)
   \   000001CE   0x220C             MOVS     R2,#+12
   \   000001D0   0x2100             MOVS     R1,#+0
   \   000001D2   0x205C             MOVS     R0,#+92
   \   000001D4   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   000001D8   0x2854             CMP      R0,#+84
   \   000001DA   0xD001             BEQ.N    ??b_Beholder_Init_17
   \   000001DC   0x2046             MOVS     R0,#+70
   \   000001DE   0xE00E             B.N      ??b_Beholder_Init_1
    326                  /*
    327                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x03) ){return 'F';}
    328                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x05) ){return 'F';}
    329                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x06) ){return 'F';}
    330                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x07) ){return 'F';}
    331                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0A) ){return 'F';} 
    332                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0B) ){return 'F';} 
    333                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0D) ){return 'F';} 
    334                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0F) ){return 'F';} 
    335                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x1C) ){return 'F';} 
    336                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x2C) ){return 'F';} 
    337                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0xAF) ){return 'F';} 
    338                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x35) ){return 'F';} 
    339                  //====================================================================//        
    340                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x03) ){return 'F';} 
    341                  if(!(reg03_480u_height == result)){m_self_Beholder.regRewriteNumber = 0x03;writeEnable = 1;break;}//高度设定是否为480
    342                  
    343                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x05) ){return 'F';} 
    344                  if(!(reg05_94u_lineShadowTime == result)){m_self_Beholder.regRewriteNumber = 0x05;writeEnable = 1;break;}//行消隐
    345                  
    346                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x06) ){return 'F';} 
    347                  if(!(reg06_45u_fieldShadowTime == result)){m_self_Beholder.regRewriteNumber = 0x06;writeEnable = 1;break;}//列消隐
    348                  
    349                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x07) ){return 'F';} 
    350                  if(!(reg07_188_chipCtl == result)){m_self_Beholder.regRewriteNumber = 0x07;writeEnable = 1;break;}//芯片控制
    351                  
    352                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0A) ){return 'F';} 
    353                  if(!(reg0A_64_ShutterWdithCtl == result)){m_self_Beholder.regRewriteNumber = 0x0A;writeEnable = 1;break;}//曝光时间控制
    354                    
    355                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0B) ){return 'F';} 
    356                  if(!(reg0B_number_totalShutterWdith == result)){m_self_Beholder.regRewriteNumber = 0x0B;writeEnable = 1;break;}//
    357                  
    358                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0D) ){return 'F';} 
    359                  if(!(reg0D_32A_readMode == result)){m_self_Beholder.regRewriteNumber = 0x0D;writeEnable = 1;break;}//数据扇出模式
    360                  
    361                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0F) ){return 'F';} 
    362                  if(!(reg0F_11_cameraSetting == result)){m_self_Beholder.regRewriteNumber = 0x0F;writeEnable = 1;break;}//像素模式
    363                  
    364                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x1C) ){return 'F';} 
    365                  if(!(reg1C_3_dataConverting == result)){m_self_Beholder.regRewriteNumber = 0x1C;writeEnable = 1;break;}//ADC
    366                  
    367                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x2C) ){return 'F';} 
    368                  if(!(reg2C_7_ADCref == result)){m_self_Beholder.regRewriteNumber = 0x2C;writeEnable = 1;break;}//ADC参考
    369                  
    370                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0xAF) ){return 'F';} 
    371                  if(!(regAF_0_AGEC_unlocked == result)){m_self_Beholder.regRewriteNumber = 0xAF;writeEnable = 1;break;}//AEC/AGC Enable
    372          
    373                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x35) ){return 'F';} 
    374                  if(!(reg35_number_Gain == result)){m_self_Beholder.regRewriteNumber = 0x35;writeEnable = 1;break;}//Analog Gain
    375                  */
    376              }while(0);
    377              if(1 == writeEnable)//u8_SCCB_WriteReg_u16//控制写芯片
   \                     ??b_Beholder_Init_17: (+1)
   \   000001E0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001E2   0x2C01             CMP      R4,#+1
   \   000001E4   0xD10A             BNE.N    ??b_Beholder_Init_18
    378              {
    379                  m_self_Beholder.regReNumber_RegName = result;//写信息
   \   000001E6   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   000001EA   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000001EE   0x8141             STRH     R1,[R0, #+10]
    380                  m_self_Beholder.regRewrite = 1;
   \   000001F0   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   000001F4   0x2101             MOVS     R1,#+1
   \   000001F6   0x71C1             STRB     R1,[R0, #+7]
    381                  return 'F';
   \   000001F8   0x2046             MOVS     R0,#+70
   \   000001FA   0xE000             B.N      ??b_Beholder_Init_1
    382                  /*
    383                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x03) ){return 'F';} 
    384                  if(!(reg03_480u_height == result)){return 'F';}//高度设定是否为480
    385                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x05) ){return 'F';} 
    386                  if(!(reg05_94u_lineShadowTime == result)){return 'F';}//行消隐
    387                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x06) ){return 'F';} 
    388                  if(!(reg06_45u_fieldShadowTime == result)){return 'F';}//列消隐
    389                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x07) ){return 'F';} 
    390                  if(!(reg07_188_chipCtl == result)){return 'F';}//芯片控制
    391                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0A) ){return 'F';} 
    392                  if(!(reg0A_64_ShutterWdithCtl == result)){return 'F';}//曝光时间控制
    393                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0B) ){return 'F';} 
    394                  if(!(reg0B_number_totalShutterWdith == result)){return 'F';}//
    395                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0D) ){return 'F';} 
    396                  if(!(reg0D_32A_readMode == result)){return 'F';}//数据扇出模式
    397                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0F) ){return 'F';} 
    398                  if(!(reg0F_11_cameraSetting == result)){return 'F';}//像素模式
    399                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x1C) ){return 'F';} 
    400                  if(!(reg1C_3_dataConverting == result)){return 'F';}//ADC
    401                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x2C) ){return 'F';} 
    402                  if(!(reg2C_7_ADCref == result)){return 'F';}//ADC参考
    403                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0xAF) ){return 'F';} 
    404                  if(!(regAF_0_AGEC_unlocked == result)){return 'F';}//AEC/AGC Enable
    405                  if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x35) ){return 'F';} 
    406                  if(!(reg35_number_Gain == result)){return 'F';}//Analog Gain
    407                  */
    408              }
    409              
    410              // ====================================================================== //
    411              
    412              //消隐区设置
    413          //if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,100,0x05) ){return 'F';} // 行消隐
    414          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,50,0x06) ){return 'F';} // 场消隐
    415              //芯片控制
    416           //   if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,0x188,0x07) ){return 'F';} // 芯片模式控制
    417              // ====================================================================== //
    418              //曝光宽度
    419          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,0x64,0x0A) ){return 'F';} // 
    420              // ====================================================================== //
    421              //整体曝光宽度
    422              //Total integration time in number of rows. This value is used only when AEC is disabled
    423           //   if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,100,0x0B) ){return 'F';} //
    424              // ====================================================================== //
    425              //读出模式
    426            //  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,0x32A,0x0D) ){return 'F';} // 读出模式
    427              // ====================================================================== //
    428           //   //颜色模式=>此为固定设置=>只需要确认即可
    429            //  if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,0x11,0x0F) ){return 'F';}
    430           //   if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0x0F) ){return 'F';}//确认黑白相机
    431          //    if(0 != result){return 'F';}
    432              // ====================================================================== //
    433              /* 增益调节 */
    434          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,64,0x36) ){return 'F';}
    435          //   if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,7,0x2C) ){return 'F';} // ADC参考电压点
    436          //    sint16 num = -127;
    437          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,0,0x48) ){return 'F';} // 黑级采样参考
    438          //    if( 'F' == b_Beholder_SetGain_35(16)){return 'F';};
    439              // ====================================================================== //
    440              //数据扇出
    441           //   if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,3,0x1C) ){return 'F';} // 高光控制 2 - 线性 / 3 - 高光压缩
    442              // ====================================================================== //
    443              //Row-wise Noise//70 72 73
    444              
    445              
    446          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,3,0x0C) ){return 'F';}//确认黑白相机
    447          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,0x1E0,0xBD) ){return 'F';} // 2400 //曝光周期？
    448          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,2000,0x0B) ){return 'F';} // 2400 //曝光周期？
    449              /*  */
    450                 
    451          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,29,0x31) ){return 'F';}
    452          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,24,0x32) ){return 'F';}
    453          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,21,0x33) ){return 'F';}
    454          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,4,0x34) ){return 'F';}
    455              
    456              
    457              
    458          //   if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,2,0x1C) ){return 'F';} // 高光控制 2 - 线性 / 3 - 高光压缩
    459              
    460              
    461              // ====================================================================== //
    462              /* 阈值 */
    463          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,0x4000,0x46) ){return 'F';}//死区阈值
    464          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,0x8080,0x47) ){return 'F';}
    465          
    466              
    467          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,0x14,0x70) ){return 'F';}
    468              /* 自适应曝光 */
    469          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,2400,0xBD) ){return 'F';} // 最大曝光时间限幅
    470          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,2,0xA8) ){return 'F';} // 配置极点
    471          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,2,0xA6) ){return 'F';} // 控制周期
    472          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,30,0xA5) ){return 'F';} // Desired Bin 1- 64
    473              // if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,30,0xBC) ){return 'F';} // Desired Bin 读
    474              // ====================================================================== //
    475              /* 曝光与增益控制 */
    476           //   if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,0,BeholderReg_Auto_GainExp_0xAF) ){return 'F';} // 0x - 关闭自动增益 // 1 - 开启自动曝光
    477          //    if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&result,0xAF) ){return 'F';}//确认黑白相机
    478          //    if(0 != result){return 'F';}
    479              // ====================================================================== //
    480          //    if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,0,0xB1) )
    481          //    {return 'F';} 
    482              
    483              
    484              //if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,8,Beholder_Read_Mode) ){return 'F';} // 读出模式
    485              return 'T';
   \                     ??b_Beholder_Init_18: (+1)
   \   000001FC   0x2054             MOVS     R0,#+84
   \                     ??b_Beholder_Init_1: (+1)
   \   000001FE   0xB005             ADD      SP,SP,#+20
   \   00000200   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    486          }
    487          
    488          
    489          //============================================================================//
    490          // 像素中断频率：26.663 MHz // 检测上升沿，迅速读取
    491              // B8
    492          // Line       ：28.5   kHz // 检测上升沿
    493              // B6
    494          // 场中断     ：60      Hz // 上升沿开始 => 下降沿结束
    495              // B4
    496          #define Pix_Port                PORTD_BASE_PTR
    497          #define Pix_GPIO_Port           PTD_BASE_PTR
    498          #define Pix_Pin                 15
    499          
    500          #define Pix_read_Port                   PORTD_BASE_PTR
    501          #define Pix_GPIO_read_Port              PTD_BASE_PTR
    502          #define Pix_GPIO_read_Port_input        PTD_BASE_PTR->PDIR
    503          
    504          #define Line_Port               PORTD_BASE_PTR
    505          #define Line_GPIO_Port          PTD_BASE_PTR
    506          #define Line_Pin                10
    507          #define Line_Pin_InReg          0x400//(1<< 10)
    508          
    509          #define Frame_Port              PORTD_BASE_PTR
    510          #define Frame_GPIO_Port         PTD_BASE_PTR
    511          #define Frame_Pin               11
    512          
    513          //#define Frame_Pin               6
    514          
    515          #define DMA_MUX0_Source_PORTA                   49
    516          #define DMA_MUX0_Source_PORTB                   50
    517          #define DMA_MUX0_Source_PORTC                   51
    518          #define DMA_MUX0_Source_PORTD                   52
    519          #define DMA_MUX0_Source_PORTE                   53
    520          #define DMA_MUX0_AlwaysEnabled_54               54
    521          

   \                                 In section .bss, align 4
    522          uint16 view_BeholderDataArray[Beholder_LineY_MAX][Beholder_PixNum_MAX];//摄像头有效位数组
   \                     view_BeholderDataArray:
   \   00000000                      DS8 22200
    523          //uint8 selfjudge_SendMessage[Beholder_LineY_MAX][Beholder_PixNum_MAX];//判定数组

   \                                 In section .bss, align 4
    524          uint8 m_ImageBeholder_Data[Beholder_LineY_MAX][Beholder_PixNum_MAX];
   \                     m_ImageBeholder_Data:
   \   00000000                      DS8 11100
    525          //uint8 static_n_markerDatas[Beholder_LineY_MAX][Beholder_PixNum_MAX];
    526          

   \                                 In section .text, align 2, keep-with-next
    527          uint8 b_Beholder_InteruptInit(void * Target_Ptr)
    528          {
   \                     b_Beholder_InteruptInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    529              // 参数声明
    530              m_self_Beholder.errorNum = 0;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x7181             STRB     R1,[R0, #+6]
    531              m_self_Beholder.FrameNum = 0;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x6001             STR      R1,[R0, #+0]
    532              // 寄存器开启
    533              SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;// | SIM_SCGC5_PORTE_MASK | SIM_SCGC5_PORTD_MASK;
   \   00000012   0x....             LDR.N    R0,??DataTable9  ;; 0x40048038
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000001A   0x....             LDR.N    R1,??DataTable9  ;; 0x40048038
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    534              
    535              Pix_read_Port->PCR[0] = PORT_PCR_MUX(1);
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x4004c000
   \   00000022   0xF44F 0x7180      MOV      R1,#+256
   \   00000026   0x6001             STR      R1,[R0, #+0]
    536              Pix_read_Port->PCR[1] = PORT_PCR_MUX(1);
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x4004c004
   \   0000002C   0xF44F 0x7180      MOV      R1,#+256
   \   00000030   0x6001             STR      R1,[R0, #+0]
    537              Pix_read_Port->PCR[2] = PORT_PCR_MUX(1);
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x4004c008
   \   00000036   0xF44F 0x7180      MOV      R1,#+256
   \   0000003A   0x6001             STR      R1,[R0, #+0]
    538              Pix_read_Port->PCR[3] = PORT_PCR_MUX(1);
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x4004c00c
   \   00000040   0xF44F 0x7180      MOV      R1,#+256
   \   00000044   0x6001             STR      R1,[R0, #+0]
    539              Pix_read_Port->PCR[4] = PORT_PCR_MUX(1);
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable10_8  ;; 0x4004c010
   \   0000004A   0xF44F 0x7180      MOV      R1,#+256
   \   0000004E   0x6001             STR      R1,[R0, #+0]
    540              Pix_read_Port->PCR[5] = PORT_PCR_MUX(1);
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable10_9  ;; 0x4004c014
   \   00000054   0xF44F 0x7180      MOV      R1,#+256
   \   00000058   0x6001             STR      R1,[R0, #+0]
    541              Pix_read_Port->PCR[6] = PORT_PCR_MUX(1);
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable10_10  ;; 0x4004c018
   \   0000005E   0xF44F 0x7180      MOV      R1,#+256
   \   00000062   0x6001             STR      R1,[R0, #+0]
    542              Pix_read_Port->PCR[7] = PORT_PCR_MUX(1);
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable10_11  ;; 0x4004c01c
   \   00000068   0xF44F 0x7180      MOV      R1,#+256
   \   0000006C   0x6001             STR      R1,[R0, #+0]
    543              
    544              Pix_read_Port->PCR[8] = PORT_PCR_MUX(1);
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable10_12  ;; 0x4004c020
   \   00000072   0xF44F 0x7180      MOV      R1,#+256
   \   00000076   0x6001             STR      R1,[R0, #+0]
    545              Pix_read_Port->PCR[9] = PORT_PCR_MUX(1);
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable10_13  ;; 0x4004c024
   \   0000007C   0xF44F 0x7180      MOV      R1,#+256
   \   00000080   0x6001             STR      R1,[R0, #+0]
    546              
    547              
    548              Pix_Port->PCR[Pix_Pin] = PORT_PCR_MUX(1)|PORT_PCR_IRQC(1);          // DMA在上升沿，GPIO
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable10_14  ;; 0x4004c03c
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable10_15  ;; 0x10100
   \   0000008A   0x6001             STR      R1,[R0, #+0]
    549              Line_Port->PCR[Line_Pin] = PORT_PCR_MUX(1)|PORT_PCR_IRQC(9);        // 上升沿中断，GPIO
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable10_16  ;; 0x4004c028
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable10_17  ;; 0x90100
   \   00000094   0x6001             STR      R1,[R0, #+0]
    550              Frame_Port->PCR[Frame_Pin] = PORT_PCR_MUX(1)|PORT_PCR_IRQC(11);     // 双边沿中断，GPIO
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable10_18  ;; 0x4004c02c
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable10_19  ;; 0xb0100
   \   0000009E   0x6001             STR      R1,[R0, #+0]
    551              
    552              Pix_GPIO_Port->PDDR &=~( 1<< Pix_Pin );
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0xF430 0x4000      BICS     R0,R0,#0x8000
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   000000AE   0x6008             STR      R0,[R1, #+0]
    553              
    554              Pix_GPIO_read_Port->PDDR &=~( 1<< 0 );
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0x0840             LSRS     R0,R0,#+1
   \   000000B8   0x0040             LSLS     R0,R0,#+1
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   000000BE   0x6008             STR      R0,[R1, #+0]
    555              Pix_GPIO_read_Port->PDDR &=~( 1<< 1 );
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0xF030 0x0002      BICS     R0,R0,#0x2
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   000000CE   0x6008             STR      R0,[R1, #+0]
    556              Pix_GPIO_read_Port->PDDR &=~( 1<< 2 );
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   000000D4   0x6800             LDR      R0,[R0, #+0]
   \   000000D6   0xF030 0x0004      BICS     R0,R0,#0x4
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   000000DE   0x6008             STR      R0,[R1, #+0]
    557              Pix_GPIO_read_Port->PDDR &=~( 1<< 3 );
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0xF030 0x0008      BICS     R0,R0,#0x8
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   000000EE   0x6008             STR      R0,[R1, #+0]
    558              Pix_GPIO_read_Port->PDDR &=~( 1<< 4 );
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0xF030 0x0010      BICS     R0,R0,#0x10
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   000000FE   0x6008             STR      R0,[R1, #+0]
    559              Pix_GPIO_read_Port->PDDR &=~( 1<< 5 );
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000104   0x6800             LDR      R0,[R0, #+0]
   \   00000106   0xF030 0x0020      BICS     R0,R0,#0x20
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   0000010E   0x6008             STR      R0,[R1, #+0]
    560              Pix_GPIO_read_Port->PDDR &=~( 1<< 6 );
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000114   0x6800             LDR      R0,[R0, #+0]
   \   00000116   0xF030 0x0040      BICS     R0,R0,#0x40
   \   0000011A   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   0000011E   0x6008             STR      R0,[R1, #+0]
    561              Pix_GPIO_read_Port->PDDR &=~( 1<< 7 );
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000124   0x6800             LDR      R0,[R0, #+0]
   \   00000126   0xF030 0x0080      BICS     R0,R0,#0x80
   \   0000012A   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   0000012E   0x6008             STR      R0,[R1, #+0]
    562              Pix_GPIO_read_Port->PDDR &=~( 1<< 8 );
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000134   0x6800             LDR      R0,[R0, #+0]
   \   00000136   0xF430 0x7080      BICS     R0,R0,#0x100
   \   0000013A   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   0000013E   0x6008             STR      R0,[R1, #+0]
    563              Pix_GPIO_read_Port->PDDR &=~( 1<< 9 );
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000144   0x6800             LDR      R0,[R0, #+0]
   \   00000146   0xF430 0x7000      BICS     R0,R0,#0x200
   \   0000014A   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   0000014E   0x6008             STR      R0,[R1, #+0]
    564              
    565              Line_GPIO_Port->PDDR &=~( 1<< Line_Pin );
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000154   0x6800             LDR      R0,[R0, #+0]
   \   00000156   0xF430 0x6080      BICS     R0,R0,#0x400
   \   0000015A   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   0000015E   0x6008             STR      R0,[R1, #+0]
    566              Frame_GPIO_Port->PDDR &=~( 1<< Frame_Pin );
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400ff0d4
   \   00000164   0x6800             LDR      R0,[R0, #+0]
   \   00000166   0xF430 0x6000      BICS     R0,R0,#0x800
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x400ff0d4
   \   0000016E   0x6008             STR      R0,[R1, #+0]
    567              
    568              //========================================================================//
    569              SIM_SCGC7 |= SIM_SCGC7_DMA_MASK; // DMA时钟开启
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable10_20  ;; 0x40048040
   \   00000174   0x6800             LDR      R0,[R0, #+0]
   \   00000176   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000017A   0x.... 0x....      LDR.W    R1,??DataTable10_20  ;; 0x40048040
   \   0000017E   0x6008             STR      R0,[R1, #+0]
    570              SIM_SCGC6 |= SIM_SCGC6_DMAMUX0_MASK; // DMA开启MUX0
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable10_21  ;; 0x4004803c
   \   00000184   0x6800             LDR      R0,[R0, #+0]
   \   00000186   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000018A   0x.... 0x....      LDR.W    R1,??DataTable10_21  ;; 0x4004803c
   \   0000018E   0x6008             STR      R0,[R1, #+0]
    571              //
    572              DMAMUX0_BASE_PTR ->CHCFG[0] = 0;
   \   00000190   0x.... 0x....      LDR.W    R0,??DataTable10_22  ;; 0x40021000
   \   00000194   0x2100             MOVS     R1,#+0
   \   00000196   0x7001             STRB     R1,[R0, #+0]
    573              DMAMUX0_BASE_PTR ->CHCFG[0] = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(DMA_MUX0_Source_PORTD); // 选择通道
   \   00000198   0x.... 0x....      LDR.W    R0,??DataTable10_22  ;; 0x40021000
   \   0000019C   0x21B4             MOVS     R1,#+180
   \   0000019E   0x7001             STRB     R1,[R0, #+0]
    574          //    DMAMUX0_BASE_PTR ->CHCFG[1] = 0;
    575          //    DMAMUX0_BASE_PTR ->CHCFG[1] = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(DMA_MUX0_Source_PORTD); // 选择通道
    576          
    577              //    DMAMUX0_BASE_PTR ->CHCFG[1] = 0;
    578          //    DMAMUX0_BASE_PTR ->CHCFG[1] = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(DMA_MUX0_Source_PORTD); // 选择通道
    579          
    580              //========================================================================//
    581              // 地址选择
    582              DMA_BASE_PTR->CR = DMA_CR_GRP1PRI_MASK;
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable10_23  ;; 0x40008000
   \   000001A4   0xF44F 0x6140      MOV      R1,#+3072
   \   000001A8   0x6001             STR      R1,[R0, #+0]
    583              DMA_BASE_PTR->TCD[0].CSR = DMA_CSR_BWC(0) | DMA_CSR_DREQ_MASK; // 延时
   \   000001AA   0x.... 0x....      LDR.W    R0,??DataTable10_24  ;; 0x4000901c
   \   000001AE   0x2108             MOVS     R1,#+8
   \   000001B0   0x8001             STRH     R1,[R0, #+0]
    584              //
    585              DMA_BASE_PTR ->TCD[0].SADDR = (uint32)((void*)&(Pix_GPIO_read_Port_input));//(uint32)((void*)&(Pix_GPIO_read_Port_input)); // 选择像素为输入
   \   000001B2   0x.... 0x....      LDR.W    R0,??DataTable10_25  ;; 0x40009000
   \   000001B6   0x....             LDR.N    R1,??DataTable9_4  ;; 0x400ff0d0
   \   000001B8   0x6001             STR      R1,[R0, #+0]
    586              //此处已经做过修改，故可以判定，DMA时序没有问题，问题在于输入情况
    587              DMA_BASE_PTR ->TCD[0].SOFF  = 0; // 源地址偏移情况
   \   000001BA   0x.... 0x....      LDR.W    R0,??DataTable10_26  ;; 0x40009004
   \   000001BE   0x2100             MOVS     R1,#+0
   \   000001C0   0x8001             STRH     R1,[R0, #+0]
    588              DMA_BASE_PTR ->TCD[0].DADDR = (uint32)(uint16*)view_BeholderDataArray; // 选择输出位置
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable10_27  ;; 0x40009010
   \   000001C6   0x.... 0x....      LDR.W    R1,??DataTable10_28
   \   000001CA   0x6001             STR      R1,[R0, #+0]
    589              DMA_BASE_PTR ->TCD[0].DOFF  = 2; // 偏移 one byte
   \   000001CC   0x.... 0x....      LDR.W    R0,??DataTable10_29  ;; 0x40009014
   \   000001D0   0x2102             MOVS     R1,#+2
   \   000001D2   0x8001             STRH     R1,[R0, #+0]
    590              //
    591              DMA_BASE_PTR ->TCD[0].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(Beholder_PerLine_MaxActivePix);
   \   000001D4   0x.... 0x....      LDR.W    R0,??DataTable10_30  ;; 0x40009016
   \   000001D8   0x21B9             MOVS     R1,#+185
   \   000001DA   0x8001             STRH     R1,[R0, #+0]
    592              DMA_BASE_PTR ->TCD[0].BITER_ELINKNO = DMA_BITER_ELINKNO_BITER(Beholder_PerLine_MaxActivePix);
   \   000001DC   0x.... 0x....      LDR.W    R0,??DataTable10_31  ;; 0x4000901e
   \   000001E0   0x21B9             MOVS     R1,#+185
   \   000001E2   0x8001             STRH     R1,[R0, #+0]
    593              DMA_BASE_PTR ->TCD[0].SLAST = 0; // 源头无偏移
   \   000001E4   0x.... 0x....      LDR.W    R0,??DataTable10_32  ;; 0x4000900c
   \   000001E8   0x2100             MOVS     R1,#+0
   \   000001EA   0x6001             STR      R1,[R0, #+0]
    594              //
    595              //sint32 adder_temp = -Beholder_PixALL_Num;
    596              DMA_BASE_PTR ->TCD[0].DLAST_SGA = 0; // 向后移动一位
   \   000001EC   0x.... 0x....      LDR.W    R0,??DataTable10_33  ;; 0x40009018
   \   000001F0   0x2100             MOVS     R1,#+0
   \   000001F2   0x6001             STR      R1,[R0, #+0]
    597              //
    598              DMA_BASE_PTR ->TCD[0].NBYTES_MLNO = 2; // 单次写数个数
   \   000001F4   0x.... 0x....      LDR.W    R0,??DataTable10_34  ;; 0x40009008
   \   000001F8   0x2102             MOVS     R1,#+2
   \   000001FA   0x6001             STR      R1,[R0, #+0]
    599              //
    600              DMA_BASE_PTR ->TCD[0].ATTR  = DMA_ATTR_SSIZE(1) | DMA_ATTR_DSIZE(1); // 传输声明
   \   000001FC   0x.... 0x....      LDR.W    R0,??DataTable10_35  ;; 0x40009006
   \   00000200   0xF240 0x1101      MOVW     R1,#+257
   \   00000204   0x8001             STRH     R1,[R0, #+0]
    601              //
    602          //    DMA_BASE_PTR->CR = DMA_CR_GRP1PRI_MASK;
    603              /*
    604              DMA_BASE_PTR->TCD[1].CSR = DMA_CSR_BWC(0) | DMA_CSR_DREQ_MASK; // 延时
    605              //
    606              DMA_BASE_PTR ->TCD[1].SADDR = ((uint32)((void*)&(Pix_GPIO_read_Port_input)) + 1);//(uint32)((void*)&(Pix_GPIO_read_Port_input)); // 选择像素为输入
    607              //此处已经做过修改，故可以判定，DMA时序没有问题，问题在于输入情况
    608              DMA_BASE_PTR ->TCD[1].SOFF  = 0; // 源地址偏移情况
    609              DMA_BASE_PTR ->TCD[1].DADDR = (uint32)(uint16*)selfjudge_SendMessage; // 选择输出位置
    610              DMA_BASE_PTR ->TCD[1].DOFF  = 2; // 偏移 one byte
    611              //
    612              DMA_BASE_PTR ->TCD[1].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(Beholder_PerLine_MaxActivePix);
    613              DMA_BASE_PTR ->TCD[1].BITER_ELINKNO = DMA_BITER_ELINKNO_BITER(Beholder_PerLine_MaxActivePix);
    614              DMA_BASE_PTR ->TCD[1].SLAST = 0; // 源头无偏移
    615              //
    616              //sint32 adder_temp = -Beholder_PixALL_Num;
    617              DMA_BASE_PTR ->TCD[1].DLAST_SGA = 0; // 向后移动一位
    618              //
    619              DMA_BASE_PTR ->TCD[1].NBYTES_MLNO = 1; // 单次写数个数
    620              //
    621              DMA_BASE_PTR ->TCD[1].ATTR  = DMA_ATTR_SSIZE(0) | DMA_ATTR_DSIZE(0); // 传输声明
    622              */
    623              /*
    624              DMA_BASE_PTR->TCD[1].CSR = DMA_CSR_BWC(0) | DMA_CSR_DREQ_MASK; // 延时
    625              //
    626              DMA_BASE_PTR ->TCD[1].SADDR = (uint32)((void*)&(input));//(uint32)((void*)&(Pix_GPIO_read_Port_input)); // 选择像素为输入
    627              //此处已经做过修改，故可以判定，DMA时序没有问题，问题在于输入情况
    628              DMA_BASE_PTR ->TCD[1].SOFF  = 0; // 源地址偏移情况
    629              DMA_BASE_PTR ->TCD[1].DADDR = (uint32)(uint8*)output; // 选择输出位置
    630              DMA_BASE_PTR ->TCD[1].DOFF  = 0; // 偏移 one byte
    631              //
    632              DMA_BASE_PTR ->TCD[1].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(1);
    633              DMA_BASE_PTR ->TCD[1].BITER_ELINKNO = DMA_BITER_ELINKNO_BITER(1);
    634              DMA_BASE_PTR ->TCD[1].SLAST = 0; // 源头无偏移
    635              //
    636              //sint32 adder_temp = -Beholder_PixALL_Num;
    637              DMA_BASE_PTR ->TCD[1].DLAST_SGA = 0; // 向后移动一位
    638              //
    639              DMA_BASE_PTR ->TCD[1].NBYTES_MLNO = 1; // 单次写数个数
    640              //
    641              DMA_BASE_PTR ->TCD[1].ATTR  = DMA_ATTR_SSIZE(0) | DMA_ATTR_DSIZE(0); // 传输声明
    642              
    643              DMA_BASE_PTR ->ERQ |= DMA_ERQ_ERQ1_MASK;
    644              */
    645          //    DMA_BASE_PTR ->ERQ &=~ DMA_ERQ_ERQ1_MASK;
    646              DMA_BASE_PTR ->ERQ &=~ DMA_ERQ_ERQ0_MASK; // 稳妥 //DMA_BASE_PTR->ERQ |= DMA_ERQ_ERQ0_MASK;
   \   00000206   0x.... 0x....      LDR.W    R0,??DataTable10_36  ;; 0x4000800c
   \   0000020A   0x6800             LDR      R0,[R0, #+0]
   \   0000020C   0x0840             LSRS     R0,R0,#+1
   \   0000020E   0x0040             LSLS     R0,R0,#+1
   \   00000210   0x....             LDR.N    R1,??DataTable10_36  ;; 0x4000800c
   \   00000212   0x6008             STR      R0,[R1, #+0]
    647              // 
    648              set_vector_handler(PORTD_VECTORn,v_Beholder_Interupt_FuncPtr); // 设定B口中断函数指针
   \   00000214   0x.... 0x....      ADR.W    R1,v_Beholder_Interupt_FuncPtr
   \   00000218   0x206A             MOVS     R0,#+106
   \   0000021A   0x.... 0x....      BL       set_vector_handler
    649              disable_irq(PORTD_IRQn);
   \   0000021E   0x205A             MOVS     R0,#+90
   \   00000220   0x.... 0x....      BL       disable_irq
    650              
    651              
    652              return 'T';
   \   00000224   0x2054             MOVS     R0,#+84
   \   00000226   0xBD02             POP      {R1,PC}          ;; return
    653          }
    654          //#define Line_MaxNum             120
    655          
    656          
    657          /*
    658          uint32 viewer1 = 0;
    659          uint32 viewer2 = 0;
    660          uint32 viewer3 = 0;
    661          */
    662          /* v_Beholder_Interupt_FuncPtr */
    663          //uint8 SendMessage[Beholder_LineY_MAX][Beholder_PixNum_MAX];
    664          

   \                                 In section .bss, align 4
    665          uint32 Image_Timer = 0;
   \                     Image_Timer:
   \   00000000                      DS8 4
    666          

   \                                 In section .text, align 4, keep-with-next
    667          void v_Beholder_Interupt_FuncPtr()//中断函数部分
    668          {
   \                     v_Beholder_Interupt_FuncPtr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    669              static volatile uint8 FrameVaild_flag = 0;
    670              static uint16 Line_counter = 0;
    671              static volatile uint8 sure_open_framePositive = 0;
    672              
    673              /* 行中断 */
    674              if( ((Line_Port->ISFR >> Line_Pin)&1) ) // 行中断
   \   00000002   0x....             LDR.N    R0,??DataTable10_37  ;; 0x4004c0a0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF3C0 0x2080      UBFX     R0,R0,#+10,#+1
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD01D             BEQ.N    ??v_Beholder_Interupt_FuncPtr_0
    675              {
    676                 // temp_line_viewer++;
    677                  if( FrameVaild_flag )
   \   0000000E   0x....             LDR.N    R0,??DataTable10_38
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD013             BEQ.N    ??v_Beholder_Interupt_FuncPtr_1
    678                  {
    679                      if(Line_counter%2)
   \   00000016   0x....             LDR.N    R0,??DataTable10_39
   \   00000018   0x8800             LDRH     R0,[R0, #+0]
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000020   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000024   0x2A00             CMP      R2,#+0
   \   00000026   0xD005             BEQ.N    ??v_Beholder_Interupt_FuncPtr_2
    680                      {
    681                          DMA_BASE_PTR->ERQ |= DMA_ERQ_ERQ0_MASK;
   \   00000028   0x....             LDR.N    R0,??DataTable10_36  ;; 0x4000800c
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000030   0x....             LDR.N    R1,??DataTable10_36  ;; 0x4000800c
   \   00000032   0x6008             STR      R0,[R1, #+0]
    682                      }
    683                      Line_counter ++; // 行数整定
   \                     ??v_Beholder_Interupt_FuncPtr_2: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable10_39
   \   00000036   0x8800             LDRH     R0,[R0, #+0]
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0x....             LDR.N    R1,??DataTable10_39
   \   0000003C   0x8008             STRH     R0,[R1, #+0]
    684                  }
    685                  Line_Port->ISFR |= 1 << Line_Pin; // 清中断
   \                     ??v_Beholder_Interupt_FuncPtr_1: (+1)
   \   0000003E   0x....             LDR.N    R0,??DataTable10_37  ;; 0x4004c0a0
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000046   0x....             LDR.N    R1,??DataTable10_37  ;; 0x4004c0a0
   \   00000048   0x6008             STR      R0,[R1, #+0]
    686              } 
    687          
    688          //    static uint8 temp_forSave = 0;
    689              /* 场中断 */
    690              if( 1 == ((Frame_Port->ISFR >> Frame_Pin)&1) ) // 场中断
   \                     ??v_Beholder_Interupt_FuncPtr_0: (+1)
   \   0000004A   0x....             LDR.N    R0,??DataTable10_37  ;; 0x4004c0a0
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0xF3C0 0x20C0      UBFX     R0,R0,#+11,#+1
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xF000 0x8117      BEQ.W    ??v_Beholder_Interupt_FuncPtr_3
    691              {
    692                 // temp_frame_viewer++;
    693                  Frame_Port->ISFR |= 1 << Frame_Pin; // 清中断
   \   00000058   0x....             LDR.N    R0,??DataTable10_37  ;; 0x4004c0a0
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000060   0x....             LDR.N    R1,??DataTable10_37  ;; 0x4004c0a0
   \   00000062   0x6008             STR      R0,[R1, #+0]
    694                  if( 1 == (( Frame_GPIO_Port->PDIR >> Frame_Pin )&1) ) //上升沿
   \   00000064   0x....             LDR.N    R0,??DataTable10_40  ;; 0x400ff0d0
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF3C0 0x20C0      UBFX     R0,R0,#+11,#+1
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD00C             BEQ.N    ??v_Beholder_Interupt_FuncPtr_4
    695                  {
    696                      //if( 1 == FrameVaild_flag ){self_Beholder.errorNum |= 0x1;}
    697                      if( 1 == sure_open_framePositive )
   \   00000070   0x....             LDR.N    R0,??DataTable10_41
   \   00000072   0x7800             LDRB     R0,[R0, #+0]
   \   00000074   0x2801             CMP      R0,#+1
   \   00000076   0xF040 0x8106      BNE.W    ??v_Beholder_Interupt_FuncPtr_3
    698                      {
    699                          FrameVaild_flag = 1; // 开启行有效
   \   0000007A   0x....             LDR.N    R0,??DataTable10_38
   \   0000007C   0x2101             MOVS     R1,#+1
   \   0000007E   0x7001             STRB     R1,[R0, #+0]
    700                          set_irq_priority(PIT1_IRQn,4);//设置中断优先级
   \   00000080   0x2104             MOVS     R1,#+4
   \   00000082   0x2045             MOVS     R0,#+69
   \   00000084   0x.... 0x....      BL       set_irq_priority
   \   00000088   0xE0FD             B.N      ??v_Beholder_Interupt_FuncPtr_3
    701                      }
    702          //            Line_counter = 0;
    703                  }
    704                  else // 下降沿
    705                  { 
    706                      DMA_BASE_PTR->ERQ &=~ DMA_ERQ_ERQ0_MASK;//关闭DMA
   \                     ??v_Beholder_Interupt_FuncPtr_4: (+1)
   \   0000008A   0x....             LDR.N    R0,??DataTable10_36  ;; 0x4000800c
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x0840             LSRS     R0,R0,#+1
   \   00000090   0x0040             LSLS     R0,R0,#+1
   \   00000092   0x....             LDR.N    R1,??DataTable10_36  ;; 0x4000800c
   \   00000094   0x6008             STR      R0,[R1, #+0]
    707                      set_irq_priority(PIT1_IRQn,2);
   \   00000096   0x2102             MOVS     R1,#+2
   \   00000098   0x2045             MOVS     R0,#+69
   \   0000009A   0x.... 0x....      BL       set_irq_priority
    708                      enable_irq(PIT1_IRQn);
   \   0000009E   0x2045             MOVS     R0,#+69
   \   000000A0   0x.... 0x....      BL       enable_irq
    709                      m_Control.image_Be2control_time++;
   \   000000A4   0x....             LDR.N    R0,??DataTable10_42
   \   000000A6   0xF8D0 0x0080      LDR      R0,[R0, #+128]
   \   000000AA   0x1C40             ADDS     R0,R0,#+1
   \   000000AC   0x....             LDR.N    R1,??DataTable10_42
   \   000000AE   0xF8C1 0x0080      STR      R0,[R1, #+128]
    710                      
    711                      do//采集与控制
    712                      {
    713                          /*----- 以下为信息采集 -----*/
    714                          m_Control.CanCheck = 0;
   \   000000B2   0x....             LDR.N    R0,??DataTable10_42
   \   000000B4   0x2100             MOVS     R1,#+0
   \   000000B6   0x7201             STRB     R1,[R0, #+8]
    715                          modeMachine(' ');//更新
   \   000000B8   0x....             LDR.N    R0,??DataTable10_43
   \   000000BA   0x2120             MOVS     R1,#+32
   \   000000BC   0xF880 0x1020      STRB     R1,[R0, #+32]
    716                          //b_GetMotor_electric(ADC1_BASE_PTR,16,&m_Control.LeftMotorElec);//电压信息获取
    717                          //b_GetMotor_electric(ADC0_BASE_PTR,16,&m_Control.RightMotorElec);
    718                          
    719                          if(m_Control.starting_time > m_system.timer)
   \   000000C0   0x....             LDR.N    R0,??DataTable10_44
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0x....             LDR.N    R1,??DataTable10_42
   \   000000C6   0x69C9             LDR      R1,[R1, #+28]
   \   000000C8   0x4288             CMP      R0,R1
   \   000000CA   0xD224             BCS.N    ??v_Beholder_Interupt_FuncPtr_5
    720                          {
    721                              if((m_Control.starting_time - 1000 == m_system.timer)
    722                               //||(m_Control.starting_time - 2000 == m_system.timer)  
    723                               ||(m_Control.starting_time - 3000 == m_system.timer)
    724                               ||(m_Control.starting_time - 4000 == m_system.timer)
    725                               //||(m_Control.starting_time - 5000 == m_system.timer)
    726                                 )
   \   000000CC   0x....             LDR.N    R0,??DataTable10_42
   \   000000CE   0x69C0             LDR      R0,[R0, #+28]
   \   000000D0   0xF5B0 0x707A      SUBS     R0,R0,#+1000
   \   000000D4   0x....             LDR.N    R1,??DataTable10_44
   \   000000D6   0x6809             LDR      R1,[R1, #+0]
   \   000000D8   0x4288             CMP      R0,R1
   \   000000DA   0xD00F             BEQ.N    ??v_Beholder_Interupt_FuncPtr_6
   \   000000DC   0x....             LDR.N    R0,??DataTable10_42
   \   000000DE   0x69C0             LDR      R0,[R0, #+28]
   \   000000E0   0xF6A0 0x30B8      SUBW     R0,R0,#+3000
   \   000000E4   0x....             LDR.N    R1,??DataTable10_44
   \   000000E6   0x6809             LDR      R1,[R1, #+0]
   \   000000E8   0x4288             CMP      R0,R1
   \   000000EA   0xD007             BEQ.N    ??v_Beholder_Interupt_FuncPtr_6
   \   000000EC   0x....             LDR.N    R0,??DataTable10_42
   \   000000EE   0x69C0             LDR      R0,[R0, #+28]
   \   000000F0   0xF5B0 0x607A      SUBS     R0,R0,#+4000
   \   000000F4   0x....             LDR.N    R1,??DataTable10_44
   \   000000F6   0x6809             LDR      R1,[R1, #+0]
   \   000000F8   0x4288             CMP      R0,R1
   \   000000FA   0xD10C             BNE.N    ??v_Beholder_Interupt_FuncPtr_5
    727                              {
    728                                  v_BuzzerBeepSet(500);
   \                     ??v_Beholder_Interupt_FuncPtr_6: (+1)
   \   000000FC   0xF44F 0x70FA      MOV      R0,#+500
   \   00000100   0x.... 0x....      BL       v_BuzzerBeepSet
    729                                  v_speed_set2pwm(0,0,2);
   \   00000104   0x2202             MOVS     R2,#+2
   \   00000106   0x2100             MOVS     R1,#+0
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x.... 0x....      BL       v_speed_set2pwm
    730                                  set_irq_priority(PIT1_IRQn,4);//设置中断优先级
   \   0000010E   0x2104             MOVS     R1,#+4
   \   00000110   0x2045             MOVS     R0,#+69
   \   00000112   0x.... 0x....      BL       set_irq_priority
    731                                  //disable_irq(PIT1_IRQn);
    732                              }
    733                          }
    734                          
    735                          if((m_Control.runningEnd_time > m_system.timer)&&(m_system.timer > m_Control.starting_time))//可以运行
   \                     ??v_Beholder_Interupt_FuncPtr_5: (+1)
   \   00000116   0x....             LDR.N    R0,??DataTable10_44
   \   00000118   0x6800             LDR      R0,[R0, #+0]
   \   0000011A   0x....             LDR.N    R1,??DataTable10_42
   \   0000011C   0x6989             LDR      R1,[R1, #+24]
   \   0000011E   0x4288             CMP      R0,R1
   \   00000120   0xD233             BCS.N    ??v_Beholder_Interupt_FuncPtr_7
   \   00000122   0x....             LDR.N    R0,??DataTable10_42
   \   00000124   0x69C0             LDR      R0,[R0, #+28]
   \   00000126   0x....             LDR.N    R1,??DataTable10_44
   \   00000128   0x6809             LDR      R1,[R1, #+0]
   \   0000012A   0x4288             CMP      R0,R1
   \   0000012C   0xD22D             BCS.N    ??v_Beholder_Interupt_FuncPtr_7
    736                          {
    737                              set_irq_priority(PIT1_IRQn,2);//设置中断优先级=>周期中断
   \   0000012E   0x2102             MOVS     R1,#+2
   \   00000130   0x2045             MOVS     R0,#+69
   \   00000132   0x.... 0x....      BL       set_irq_priority
    738                              
    739                              if(1 == m_Control.start_motorRunning_flag)
   \   00000136   0x....             LDR.N    R0,??DataTable10_42
   \   00000138   0x7B80             LDRB     R0,[R0, #+14]
   \   0000013A   0x2801             CMP      R0,#+1
   \   0000013C   0xD118             BNE.N    ??v_Beholder_Interupt_FuncPtr_8
    740                              {
    741                                  for(uint8 loop = 0;loop < 10;loop++)
   \   0000013E   0x2400             MOVS     R4,#+0
   \   00000140   0xE010             B.N      ??v_Beholder_Interupt_FuncPtr_9
    742                                  {
    743                                      v_leftMotor_pwmOut(loop * 50,1);
   \                     ??v_Beholder_Interupt_FuncPtr_10: (+1)
   \   00000142   0x2101             MOVS     R1,#+1
   \   00000144   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000146   0x2032             MOVS     R0,#+50
   \   00000148   0xFB14 0xF000      SMULBB   R0,R4,R0
   \   0000014C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000014E   0x.... 0x....      BL       v_leftMotor_pwmOut
    744                                      v_rightMotor_pwmOut(loop * 50,1);
   \   00000152   0x2101             MOVS     R1,#+1
   \   00000154   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000156   0x2032             MOVS     R0,#+50
   \   00000158   0xFB14 0xF000      SMULBB   R0,R4,R0
   \   0000015C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000015E   0x.... 0x....      BL       v_rightMotor_pwmOut
    745                                  }
   \   00000162   0x1C64             ADDS     R4,R4,#+1
   \                     ??v_Beholder_Interupt_FuncPtr_9: (+1)
   \   00000164   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000166   0x2C0A             CMP      R4,#+10
   \   00000168   0xDBEB             BLT.N    ??v_Beholder_Interupt_FuncPtr_10
    746                                  m_Control.start_motorRunning_flag = 0;
   \   0000016A   0x....             LDR.N    R0,??DataTable10_42
   \   0000016C   0x2100             MOVS     R1,#+0
   \   0000016E   0x7381             STRB     R1,[R0, #+14]
    747                              }
    748                              
    749                              
    750                              if((m_system.timer > m_Control.starting_time + 1000))
   \                     ??v_Beholder_Interupt_FuncPtr_8: (+1)
   \   00000170   0x....             LDR.N    R0,??DataTable10_42
   \   00000172   0x69C0             LDR      R0,[R0, #+28]
   \   00000174   0xF510 0x707A      ADDS     R0,R0,#+1000
   \   00000178   0x....             LDR.N    R1,??DataTable10_44
   \   0000017A   0x6809             LDR      R1,[R1, #+0]
   \   0000017C   0x4288             CMP      R0,R1
   \   0000017E   0xD212             BCS.N    ??v_Beholder_Interupt_FuncPtr_11
    751                              {
    752                                  v_Uart_GetPicture_InRunning(1,2);
   \   00000180   0x2102             MOVS     R1,#+2
   \   00000182   0x2001             MOVS     R0,#+1
   \   00000184   0x.... 0x....      BL       v_Uart_GetPicture_InRunning
   \   00000188   0xE00D             B.N      ??v_Beholder_Interupt_FuncPtr_11
    753                              }
    754                              
    755                              
    756                              /*
    757                              m_need_tx.MidLine[m_need_tx.counter] = m_Control.image_control_n;
    758                              
    759                              m_need_tx.LeftMotorGiV[m_need_tx.counter] = m_Control.LeftGiveSpd;
    760                              m_need_tx.RightMotorGiV[m_need_tx.counter] = m_Control.RightGiveSpd;
    761                              
    762                              m_need_tx.LeftMotorPWM[m_need_tx.counter] = m_Control.LeftMotorPWM;
    763                              m_need_tx.LeftMotorSpeed[m_need_tx.counter] = m_Control.LeftMotorSpeed;
    764                              
    765                              
    766                              m_need_tx.RightMotorPWM[m_need_tx.counter] = m_Control.RightMotorPWM;
    767                              m_need_tx.RightMotorSpeed[m_need_tx.counter] = m_Control.RightMotorSpeed;//m_Control.RightMotorSpeed;
    768                              m_need_tx.ServoVar[m_need_tx.counter] = m_Control.ServoDeg;
    769                              m_need_tx.ServoGraduated[m_need_tx.counter] = m_Control.LeftRightRatio;
    770                              
    771                              m_need_tx.Information_Unnamed_Mark001[m_need_tx.counter / 2] = m_self_Motor_Para.L_counter * m_Control.Motor_ControlPara_I_Number;
    772                              m_need_tx.Information_Unnamed_Mark001[1500/2 + m_need_tx.counter / 2] = m_self_Motor_Para.R_counter * m_Control.Motor_ControlPara_I_Number;
    773          
    774                              m_need_tx.counter ++;
    775                              
    776                              if((1 == m_need_tx.counter)||//20ms一次，50Hz=>以半秒给
    777                                 (51 == m_need_tx.counter)||
    778                                 (101 == m_need_tx.counter)||
    779                                 (151 == m_need_tx.counter)||
    780                                 (201 == m_need_tx.counter)||
    781                                 (251 == m_need_tx.counter)  
    782                                )
    783                              {
    784                                  m_Control.BuzzerPoint = 0;
    785                                  v_BuzzerBeepSet(200);//开启蜂鸣器
    786                              }
    787                              else
    788                              {
    789                                  m_Control.BuzzerPoint = -5000;
    790                              }
    791                              */
    792                              
    793                          }
    794                          else
    795                          {
    796                              m_Control.start_motorRunning_flag = 1;
   \                     ??v_Beholder_Interupt_FuncPtr_7: (+1)
   \   0000018A   0x....             LDR.N    R0,??DataTable10_42
   \   0000018C   0x2101             MOVS     R1,#+1
   \   0000018E   0x7381             STRB     R1,[R0, #+14]
    797                              m_need_tx.counter = 0;
   \   00000190   0x....             LDR.N    R0,??DataTable10_45
   \   00000192   0x2100             MOVS     R1,#+0
   \   00000194   0x8001             STRH     R1,[R0, #+0]
    798                              v_leftMotor_pwmOut(0,3);
   \   00000196   0x2103             MOVS     R1,#+3
   \   00000198   0x2000             MOVS     R0,#+0
   \   0000019A   0x.... 0x....      BL       v_leftMotor_pwmOut
    799                              v_rightMotor_pwmOut(0,3);
   \   0000019E   0x2103             MOVS     R1,#+3
   \   000001A0   0x2000             MOVS     R0,#+0
   \   000001A2   0x.... 0x....      BL       v_rightMotor_pwmOut
    800                          }
    801                      }while(0);
    802                                  
    803                      
    804                      
    805                      
    806                      m_self_Beholder.LineCounter = Line_counter;//行数计数
   \                     ??v_Beholder_Interupt_FuncPtr_11: (+1)
   \   000001A6   0x....             LDR.N    R0,??DataTable10_2
   \   000001A8   0x....             LDR.N    R1,??DataTable10_39
   \   000001AA   0x8809             LDRH     R1,[R1, #+0]
   \   000001AC   0x8081             STRH     R1,[R0, #+4]
    807                      Line_counter = 0; // 重置
   \   000001AE   0x....             LDR.N    R0,??DataTable10_39
   \   000001B0   0x2100             MOVS     R1,#+0
   \   000001B2   0x8001             STRH     R1,[R0, #+0]
    808                      
    809                      
    810                      FrameVaild_flag = 0;
   \   000001B4   0x....             LDR.N    R0,??DataTable10_38
   \   000001B6   0x2100             MOVS     R1,#+0
   \   000001B8   0x7001             STRB     R1,[R0, #+0]
    811                      DMA_BASE_PTR ->TCD[0].DADDR = (uint32)(uint16*)view_BeholderDataArray; // 选择输出位置
   \   000001BA   0x....             LDR.N    R0,??DataTable10_27  ;; 0x40009010
   \   000001BC   0x....             LDR.N    R1,??DataTable10_28
   \   000001BE   0x6001             STR      R1,[R0, #+0]
    812                      DMA_BASE_PTR ->TCD[0].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(Beholder_PerLine_MaxActivePix);
   \   000001C0   0x....             LDR.N    R0,??DataTable10_30  ;; 0x40009016
   \   000001C2   0x21B9             MOVS     R1,#+185
   \   000001C4   0x8001             STRH     R1,[R0, #+0]
    813                      DMA_BASE_PTR ->TCD[0].BITER_ELINKNO = DMA_BITER_ELINKNO_BITER(Beholder_PerLine_MaxActivePix);
   \   000001C6   0x....             LDR.N    R0,??DataTable10_31  ;; 0x4000901e
   \   000001C8   0x21B9             MOVS     R1,#+185
   \   000001CA   0x8001             STRH     R1,[R0, #+0]
    814                      
    815          
    816                      
    817                      
    818                      v_system_clocked();//系统时钟
   \   000001CC   0x.... 0x....      BL       v_system_clocked
    819                      
    820                      for(uint8 loop = 0;loop < Beholder_LineY_MAX;loop++)
   \   000001D0   0x2000             MOVS     R0,#+0
   \   000001D2   0xE02E             B.N      ??v_Beholder_Interupt_FuncPtr_12
    821                      {
    822                          for(uint8 inter = 0;inter < 185;inter++)
    823                          {
    824                              uint16 n = view_BeholderDataArray[loop][inter]&0x03FFu;
   \                     ??v_Beholder_Interupt_FuncPtr_13: (+1)
   \   000001D4   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001D8   0xF44F 0x71B9      MOV      R1,#+370
   \   000001DC   0x....             LDR.N    R3,??DataTable10_28
   \   000001DE   0xFB01 0x3100      MLA      R1,R1,R0,R3
   \   000001E2   0xF831 0x1012      LDRH     R1,[R1, R2, LSL #+1]
   \   000001E6   0x0589             LSLS     R1,R1,#+22       ;; ZeroExtS R1,R1,#+22,#+22
   \   000001E8   0x0D89             LSRS     R1,R1,#+22
    825                              float f_n = (float)n;
   \   000001EA   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001EC   0xEE00 0x1A10      VMOV     S0,R1
   \   000001F0   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
    826                              n = (uint8)(-f_n*f_n/4096.f + f_n/2.f);
   \   000001F4   0xEEF1 0x0A40      VNEG.F32 S1,S0
   \   000001F8   0xEE60 0x0A80      VMUL.F32 S1,S1,S0
   \   000001FC   0xED9F 0x....      VLDR.W   S2,??DataTable10_1  ;; 0x45800000
   \   00000200   0xEEC0 0x0A81      VDIV.F32 S1,S1,S2
   \   00000204   0xEEB0 0x1A00      VMOV.F32 S2,#2.0
   \   00000208   0xEE80 0x0A01      VDIV.F32 S0,S0,S2
   \   0000020C   0xEE30 0x0A80      VADD.F32 S0,S1,S0
   \   00000210   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000214   0xEE10 0x1A10      VMOV     R1,S0
   \   00000218   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
    827                              m_ImageBeholder_Data[loop][inter] = n;//高光压缩
   \   0000021A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000021C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000021E   0x23B9             MOVS     R3,#+185
   \   00000220   0x....             LDR.N    R4,??DataTable10_46
   \   00000222   0xFB03 0x4300      MLA      R3,R3,R0,R4
   \   00000226   0x54D1             STRB     R1,[R2, R3]
    828                          }
   \   00000228   0x1C52             ADDS     R2,R2,#+1
   \                     ??v_Beholder_Interupt_FuncPtr_14: (+1)
   \   0000022A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000022C   0x2AB9             CMP      R2,#+185
   \   0000022E   0xDBD1             BLT.N    ??v_Beholder_Interupt_FuncPtr_13
   \   00000230   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_Beholder_Interupt_FuncPtr_12: (+1)
   \   00000232   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000234   0x283C             CMP      R0,#+60
   \   00000236   0xDA01             BGE.N    ??v_Beholder_Interupt_FuncPtr_15
   \   00000238   0x2200             MOVS     R2,#+0
   \   0000023A   0xE7F6             B.N      ??v_Beholder_Interupt_FuncPtr_14
    829                      }
    830                      
    831                      if(0 == m_system.uart_Txflag)//未进入
   \                     ??v_Beholder_Interupt_FuncPtr_15: (+1)
   \   0000023C   0x....             LDR.N    R0,??DataTable10_44
   \   0000023E   0x7C00             LDRB     R0,[R0, #+16]
   \   00000240   0x2800             CMP      R0,#+0
   \   00000242   0xD107             BNE.N    ??v_Beholder_Interupt_FuncPtr_16
    832                      {
    833                          m_system.uarttx_timer ++;
   \   00000244   0x....             LDR.N    R0,??DataTable10_44
   \   00000246   0x6940             LDR      R0,[R0, #+20]
   \   00000248   0x1C40             ADDS     R0,R0,#+1
   \   0000024A   0x....             LDR.N    R1,??DataTable10_44
   \   0000024C   0x6148             STR      R0,[R1, #+20]
    834                          m_system.uart_Txflag = 1;//设定控制进行标志位
   \   0000024E   0x....             LDR.N    R0,??DataTable10_44
   \   00000250   0x2101             MOVS     R1,#+1
   \   00000252   0x7401             STRB     R1,[R0, #+16]
    835                      }
    836                      //================================================================//
    837                      //进入控制代码部分
    838                      /*----------图像处理部分----------*/
    839                      if(0 != m_Control.image_ratio[7])//x = (30*h/a)*y + 30/a
   \                     ??v_Beholder_Interupt_FuncPtr_16: (+1)
   \   00000254   0x....             LDR.N    R0,??DataTable10_42
   \   00000256   0xED90 0x0A18      VLDR     S0,[R0, #+96]
   \   0000025A   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   0000025E   0xEEF1 0xFA10      FMSTAT   
   \   00000262   0xD008             BEQ.N    ??v_Beholder_Interupt_FuncPtr_17
    840                      {
    841                          
    842                          v_ImageCut();//进行图像处理
   \   00000264   0x.... 0x....      BL       v_ImageCut
    843                          m_Control.CanCheck = 1;
   \   00000268   0x....             LDR.N    R0,??DataTable10_42
   \   0000026A   0x2101             MOVS     R1,#+1
   \   0000026C   0x7201             STRB     R1,[R0, #+8]
    844          
    845                          v_ImageOptimalization();
   \   0000026E   0x.... 0x....      BL       v_ImageOptimalization
    846                          //f_getSteerCurve();//进行时间测试
    847                          do//舵机输出
    848                          {
    849                              v_steer_set2pwm();
   \   00000272   0x.... 0x....      BL       v_steer_set2pwm
    850                          }while(0);
    851                          
    852                      }
    853                      
    854                      sure_open_framePositive = 1;
   \                     ??v_Beholder_Interupt_FuncPtr_17: (+1)
   \   00000276   0x....             LDR.N    R0,??DataTable10_41
   \   00000278   0x2101             MOVS     R1,#+1
   \   0000027A   0x7001             STRB     R1,[R0, #+0]
    855                      m_self_Beholder.FrameNum ++;
   \   0000027C   0x....             LDR.N    R0,??DataTable10_2
   \   0000027E   0x6800             LDR      R0,[R0, #+0]
   \   00000280   0x1C40             ADDS     R0,R0,#+1
   \   00000282   0x....             LDR.N    R1,??DataTable10_2
   \   00000284   0x6008             STR      R0,[R1, #+0]
    856                  }
    857              }
    858              
    859              
    860          }
   \                     ??v_Beholder_Interupt_FuncPtr_3: (+1)
   \   00000286   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??FrameVaild_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     ??Line_counter:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     ??sure_open_framePositive:
   \   00000000                      DS8 1
    861          

   \                                 In section .text, align 2, keep-with-next
    862          uint8 b_Beholder_SetGain_35(uint8 GainSet)
    863          {
   \                     b_Beholder_SetGain_35: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    864              if(GainSet > 0x3Fu)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C40             CMP      R4,#+64
   \   0000000A   0xD301             BCC.N    ??b_Beholder_SetGain_35_0
    865              {
    866                  return 'F';
   \   0000000C   0x2046             MOVS     R0,#+70
   \   0000000E   0xE01F             B.N      ??b_Beholder_SetGain_35_1
    867              }
    868              if( 'T' != u8_SCCB_WriteReg_u16(Beholder_Addr,GainSet,BeholderReg_Gain_Set_35) )
   \                     ??b_Beholder_SetGain_35_0: (+1)
   \   00000010   0x2235             MOVS     R2,#+53
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000018   0x205C             MOVS     R0,#+92
   \   0000001A   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
   \   0000001E   0x2854             CMP      R0,#+84
   \   00000020   0xD001             BEQ.N    ??b_Beholder_SetGain_35_2
    869              {
    870                  return 'F';
   \   00000022   0x2046             MOVS     R0,#+70
   \   00000024   0xE014             B.N      ??b_Beholder_SetGain_35_1
    871              }
    872              uint16 read_out = 0;
   \                     ??b_Beholder_SetGain_35_2: (+1)
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    873              if( 'T' != u8_SCCB_ReadReg_u16(Beholder_Addr,&read_out,BeholderReg_Gain_Set_35) )
   \   0000002C   0x2235             MOVS     R2,#+53
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0x205C             MOVS     R0,#+92
   \   00000032   0x.... 0x....      BL       u8_SCCB_ReadReg_u16
   \   00000036   0x2854             CMP      R0,#+84
   \   00000038   0xD001             BEQ.N    ??b_Beholder_SetGain_35_3
    874              {
    875                  return 'F';
   \   0000003A   0x2046             MOVS     R0,#+70
   \   0000003C   0xE008             B.N      ??b_Beholder_SetGain_35_1
    876              }
    877              if(GainSet != read_out)
   \                     ??b_Beholder_SetGain_35_3: (+1)
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000044   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD001             BEQ.N    ??b_Beholder_SetGain_35_4
    878              {
    879                  return 'F';
   \   0000004A   0x2046             MOVS     R0,#+70
   \   0000004C   0xE000             B.N      ??b_Beholder_SetGain_35_1
    880              }
    881              return 'T';
   \                     ??b_Beholder_SetGain_35_4: (+1)
   \   0000004E   0x2054             MOVS     R0,#+84
   \                     ??b_Beholder_SetGain_35_1: (+1)
   \   00000050   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    882          }
    883          

   \                                 In section .text, align 2, keep-with-next
    884          void v_setShutterTime(uint16 shutterTime)
    885          {
   \                     v_setShutterTime: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    886              u8_SCCB_WriteReg_u16(Beholder_Addr,shutterTime,0x0B);
   \   00000002   0x220B             MOVS     R2,#+11
   \   00000004   0x0001             MOVS     R1,R0
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0x205C             MOVS     R0,#+92
   \   0000000A   0x.... 0x....      BL       u8_SCCB_WriteReg_u16
    887          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x4004C034         DC32     0x4004c034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x4004C030         DC32     0x4004c030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x400FF0D0         DC32     0x400ff0d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x400FF0D4         DC32     0x400ff0d4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x45800000         DC32     0x45800000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     m_self_Beholder

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     m_ImageAbstract

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x4004C000         DC32     0x4004c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x4004C004         DC32     0x4004c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x4004C008         DC32     0x4004c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x4004C00C         DC32     0x4004c00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x4004C010         DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x4004C014         DC32     0x4004c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x4004C01C         DC32     0x4004c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x4004C020         DC32     0x4004c020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x4004C024         DC32     0x4004c024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x4004C03C         DC32     0x4004c03c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x00010100         DC32     0x10100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x4004C028         DC32     0x4004c028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x00090100         DC32     0x90100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x4004C02C         DC32     0x4004c02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x000B0100         DC32     0xb0100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_20:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_21:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_22:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_23:
   \   00000000   0x40008000         DC32     0x40008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_24:
   \   00000000   0x4000901C         DC32     0x4000901c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_25:
   \   00000000   0x40009000         DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_26:
   \   00000000   0x40009004         DC32     0x40009004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_27:
   \   00000000   0x40009010         DC32     0x40009010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_28:
   \   00000000   0x........         DC32     view_BeholderDataArray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_29:
   \   00000000   0x40009014         DC32     0x40009014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_30:
   \   00000000   0x40009016         DC32     0x40009016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_31:
   \   00000000   0x4000901E         DC32     0x4000901e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_32:
   \   00000000   0x4000900C         DC32     0x4000900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_33:
   \   00000000   0x40009018         DC32     0x40009018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_34:
   \   00000000   0x40009008         DC32     0x40009008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_35:
   \   00000000   0x40009006         DC32     0x40009006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_36:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_37:
   \   00000000   0x4004C0A0         DC32     0x4004c0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_38:
   \   00000000   0x........         DC32     ??FrameVaild_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_39:
   \   00000000   0x........         DC32     ??Line_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_40:
   \   00000000   0x400FF0D0         DC32     0x400ff0d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_41:
   \   00000000   0x........         DC32     ??sure_open_framePositive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_42:
   \   00000000   0x........         DC32     m_Control

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_43:
   \   00000000   0x........         DC32     m_ModeMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_44:
   \   00000000   0x........         DC32     m_system

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_45:
   \   00000000   0x........         DC32     m_need_tx+0x6F54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_46:
   \   00000000   0x........         DC32     m_ImageBeholder_Data

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   b_Beholder_Init
        56   -> u8_SCCB_ReadReg_u16
        56   -> u8_SCCB_WriteReg_u16
        56   -> v_SCCB_Init
       8   b_Beholder_InteruptInit
         8   -> disable_irq
         8   -> set_vector_handler
      16   b_Beholder_SetGain_35
        16   -> u8_SCCB_ReadReg_u16
        16   -> u8_SCCB_WriteReg_u16
      16   u8_SCCB_Data_RxByte
        16   -> v_SCCB_Delay_Time
      16   u8_SCCB_Data_TxByte
        16   -> v_SCCB_Delay_Time
      24   u8_SCCB_ReadReg_u16
        24   -> u8_SCCB_Data_RxByte
        24   -> u8_SCCB_Data_TxByte
        24   -> u8_SCCB_Start
        24   -> u8_SCCB_Stop
        24   -> u8_SCCB_WaitACK
        24   -> v_SCCB_ACK
        24   -> v_SCCB_NoAck
      16   u8_SCCB_ReadReg_u8
        16   -> u8_SCCB_Data_RxByte
        16   -> u8_SCCB_Data_TxByte
        16   -> u8_SCCB_Start
        16   -> u8_SCCB_Stop
        16   -> u8_SCCB_WaitACK
        16   -> v_SCCB_NoAck
       8   u8_SCCB_Start
         8   -> v_SCCB_Delay_Time
       8   u8_SCCB_Stop
         8   -> v_SCCB_Delay_Time
       8   u8_SCCB_WaitACK
         8   -> v_SCCB_Delay_Time
      16   u8_SCCB_WriteReg_u16
        16   -> u8_SCCB_Data_TxByte
        16   -> u8_SCCB_Start
        16   -> u8_SCCB_Stop
        16   -> u8_SCCB_WaitACK
      16   u8_SCCB_WriteReg_u8
        16   -> u8_SCCB_Data_TxByte
        16   -> u8_SCCB_Start
        16   -> u8_SCCB_Stop
        16   -> u8_SCCB_WaitACK
       8   v_Beholder_Interupt_FuncPtr
         8   -> enable_irq
         8   -> set_irq_priority
         8   -> v_BuzzerBeepSet
         8   -> v_ImageCut
         8   -> v_ImageOptimalization
         8   -> v_Uart_GetPicture_InRunning
         8   -> v_leftMotor_pwmOut
         8   -> v_rightMotor_pwmOut
         8   -> v_speed_set2pwm
         8   -> v_steer_set2pwm
         8   -> v_system_clocked
       8   v_SCCB_ACK
         8   -> v_SCCB_Delay_Time
       0   v_SCCB_Delay_Time
       0   v_SCCB_Init
       8   v_SCCB_NoAck
         8   -> v_SCCB_Delay_Time
       8   v_setShutterTime
         8   -> u8_SCCB_WriteReg_u16


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_20
       4  ??DataTable10_21
       4  ??DataTable10_22
       4  ??DataTable10_23
       4  ??DataTable10_24
       4  ??DataTable10_25
       4  ??DataTable10_26
       4  ??DataTable10_27
       4  ??DataTable10_28
       4  ??DataTable10_29
       4  ??DataTable10_3
       4  ??DataTable10_30
       4  ??DataTable10_31
       4  ??DataTable10_32
       4  ??DataTable10_33
       4  ??DataTable10_34
       4  ??DataTable10_35
       4  ??DataTable10_36
       4  ??DataTable10_37
       4  ??DataTable10_38
       4  ??DataTable10_39
       4  ??DataTable10_4
       4  ??DataTable10_40
       4  ??DataTable10_41
       4  ??DataTable10_42
       4  ??DataTable10_43
       4  ??DataTable10_44
       4  ??DataTable10_45
       4  ??DataTable10_46
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       1  FrameVaild_flag
       4  Image_Timer
       2  Line_counter
     516  b_Beholder_Init
     552  b_Beholder_InteruptInit
      82  b_Beholder_SetGain_35
   11100  m_ImageBeholder_Data
      12  m_self_Beholder
       1  sure_open_framePositive
     144  u8_SCCB_Data_RxByte
     116  u8_SCCB_Data_TxByte
     174  u8_SCCB_ReadReg_u16
     134  u8_SCCB_ReadReg_u8
     192  u8_SCCB_Start
      94  u8_SCCB_Stop
     148  u8_SCCB_WaitACK
     126  u8_SCCB_WriteReg_u16
     100  u8_SCCB_WriteReg_u8
     648  v_Beholder_Interupt_FuncPtr
      74  v_SCCB_ACK
      14  v_SCCB_Delay_Time
      70  v_SCCB_Init
      92  v_SCCB_NoAck
      16  v_setShutterTime
   22200  view_BeholderDataArray

 
 33 320 bytes in section .bss
  3 500 bytes in section .text
 
  3 500 bytes of CODE memory
 33 320 bytes of DATA memory

Errors: none
Warnings: none
