###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      20/Jul/2015  17:10:45 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ShunAn_Panel\Pendulum_EndlessFormsMostBeau #
#                    tiful.c                                                  #
#    Command line =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ShunAn_Panel\Pendulum_EndlessFormsMostBeau #
#                    tiful.c -D IAR -D TWR_K60F120M -lCN                      #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\List\ -lB                        #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\List\ -o                         #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\Obj\ --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ -I D:\创作室\飞思卡尔智能小车\顺暗三号\代 #
#                    码\顺暗三号-华南赛最后七天-7.11\Library\ -I              #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\Library\BlessedAlien\ -I                   #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ShunAn_Panel\ -Ol --use_c++_inline         #
#    List file    =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\List\Pendulum_EndlessFormsMostBe #
#                    autiful.lst                                              #
#    Object file  =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\Obj\Pendulum_EndlessFormsMostBea #
#                    utiful.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛最后七天-7.11\ShunAn_Panel\Pendulum_EndlessFormsMostBeautiful.c
      1          #include "arm_cm4.h"
      2          #include "MK60F15.h"
      3          #include "ShunAn_Lib.h"
      4          #include "start_ShunAn.h"
      5          #include "ThePoet_ThePendulum.h"
      6          #include "Pendulum_EndlessFormsMostBeautiful.h"
      7          
      8          #include "Poet_ImageBeholder.h"//摄像头
      9          #include "Poet_Revelation.h"//
     10          
     11          #include "Poet_Buzzer.h"
     12          
     13          #include "Poet_InputInterface.h"
     14          #include "Poet_Motor.h"
     15          
     16          #include "Poet_Servo.h"

   \                                 In section .bss, align 4
     17          s_CarRunningMode m_CarRunningMode;
   \                     m_CarRunningMode:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     18          s_Control m_Control = {0};//控制参数定义
   \                     m_Control:
   \   00000000                      DS8 224

   \                                 In section .bss, align 4
     19          s_ImageAbstract m_ImageAbstract = {0};//图像处理
   \                     m_ImageAbstract:
   \   00000000                      DS8 560

   \                                 In section .bss, align 4
     20          unsigned short int u16_RevePanel[96][60];////图像数组
   \                     u16_RevePanel:
   \   00000000                      DS8 11520
     21          

   \                                 In section .bss, align 4
     22          s_ImageTesting m_ImageTesting;
   \                     m_ImageTesting:
   \   00000000                      DS8 140
     23          

   \                                 In section .text, align 4, keep-with-next
     24          void v_motor_doneFunc(void)
     25          {//这里涉及到中断操作，需要清中断
   \                     v_motor_doneFunc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     26              //这里
     27              PIT_Flag_Clear(PIT1);//清中断
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable4_1  ;; 0x4003711c
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable4_1  ;; 0x4003711c
   \   00000010   0x6008             STR      R0,[R1, #+0]
     28              m_Control.motor_control_time ++;//控制时间自加
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   00000016   0x6FC0             LDR      R0,[R0, #+124]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   0000001E   0x67C8             STR      R0,[R1, #+124]
     29              
     30              m_Control.LightChaserLogic_time_cut_1 = m_Control.LightChaserLogic;
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00000028   0x79C9             LDRB     R1,[R1, #+7]
   \   0000002A   0x7181             STRB     R1,[R0, #+6]
     31              m_Control.LightChaserLogic = b_GetLightChaserStatus();
   \   0000002C   0x.... 0x....      BL       b_GetLightChaserStatus
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00000034   0x71C8             STRB     R0,[R1, #+7]
     32              
     33              if(0 != vPtr_CheckLightingChaser){vPtr_CheckLightingChaser();}
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable4_3
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD003             BEQ.N    ??v_motor_doneFunc_0
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable4_3
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x4780             BLX      R0
     34              if(!(m_Control.motor_control_time % 5))//限制控制周期为4ms一控制
   \                     ??v_motor_doneFunc_0: (+1)
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   0000004C   0x6FC0             LDR      R0,[R0, #+124]
   \   0000004E   0x2105             MOVS     R1,#+5
   \   00000050   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000054   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xF040 0x80E7      BNE.W    ??v_motor_doneFunc_1
     35              {//10 ms一次
     36                  m_Control.LeftMotorSpeed_n_cut_1 = m_Control.LeftMotorSpeed;//以下为参数获取
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00000066   0x8E09             LDRH     R1,[R1, #+48]
   \   00000068   0x8681             STRH     R1,[R0, #+52]
     37                  m_Control.RightMotorSpeed_n_cut_1 = m_Control.RightMotorSpeed;
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00000072   0x8E49             LDRH     R1,[R1, #+50]
   \   00000074   0x86C1             STRH     R1,[R0, #+54]
     38                  m_Control.LeftMotorSpeed = n_GetMotor_speed(MOTOR_def_Left_speed_QD_com);//转速获取
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable4_4  ;; 0x40039000
   \   0000007A   0x.... 0x....      BL       n_GetMotor_speed
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00000082   0x8608             STRH     R0,[R1, #+48]
     39                  m_Control.RightMotorSpeed = -n_GetMotor_speed(MOTOR_def_Right_speed_QD_com);
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable4_5  ;; 0x400b8000
   \   00000088   0x.... 0x....      BL       n_GetMotor_speed
   \   0000008C   0x4240             RSBS     R0,R0,#+0
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00000092   0x8648             STRH     R0,[R1, #+50]
     40                  m_Control.ServoAngle = n_GetServoAngle();//获取当前舵机数值
   \   00000094   0x.... 0x....      BL       n_GetServoAngle
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   0000009C   0x8508             STRH     R0,[R1, #+40]
     41                  
     42                  if((0 == m_Control.start_motorRunning_flag)//计算当前的
     43                  &&((m_Control.runningEnd_time > m_system.timer)&&(m_system.timer > m_Control.starting_time)))
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   000000A2   0x7B80             LDRB     R0,[R0, #+14]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xF040 0x80C1      BNE.W    ??v_motor_doneFunc_1
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable4_6
   \   000000AE   0x6800             LDR      R0,[R0, #+0]
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   000000B4   0x6989             LDR      R1,[R1, #+24]
   \   000000B6   0x4288             CMP      R0,R1
   \   000000B8   0xF080 0x80B8      BCS.W    ??v_motor_doneFunc_1
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   000000C0   0x69C0             LDR      R0,[R0, #+28]
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   000000C6   0x6809             LDR      R1,[R1, #+0]
   \   000000C8   0x4288             CMP      R0,R1
   \   000000CA   0xF080 0x80AF      BCS.W    ??v_motor_doneFunc_1
     44                  {
     45                      //v_leftMotor_pwmOut(500,1);
     46                      //v_rightMotor_pwmOut(500,1);
     47                      m_Control.LeftRightRatio = n_GetServoGraduated(m_Control.ServoAngle);//给定转速率  
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   000000D2   0x8D00             LDRH     R0,[R0, #+40]
   \   000000D4   0x.... 0x....      BL       n_GetServoGraduated
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   000000DC   0x8188             STRH     R0,[R1, #+12]
     48                      
     49                      float Ratio = (__F_ABS((float)((float)m_Control.ServoDeg - 100.f)/100.f));//0-100
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   000000E2   0xF9B0 0x0020      LDRSH    R0,[R0, #+32]
   \   000000E6   0xEE00 0x0A10      VMOV     S0,R0
   \   000000EA   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000EE   0xEDDF 0x....      VLDR.W   S1,??DataTable0  ;; 0xc2c80000
   \   000000F2   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   000000F6   0xEDDF 0x....      VLDR.W   S1,??DataTable0_1  ;; 0x42c80000
   \   000000FA   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   000000FE   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00000102   0xEEF1 0xFA10      FMSTAT   
   \   00000106   0xD510             BPL.N    ??v_motor_doneFunc_2
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   0000010C   0xF9B0 0x0020      LDRSH    R0,[R0, #+32]
   \   00000110   0xEE00 0x0A10      VMOV     S0,R0
   \   00000114   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000118   0xEDDF 0x....      VLDR.W   S1,??DataTable0  ;; 0xc2c80000
   \   0000011C   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000120   0xEDDF 0x....      VLDR.W   S1,??DataTable0  ;; 0xc2c80000
   \   00000124   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000128   0xE00F             B.N      ??v_motor_doneFunc_3
   \                     ??v_motor_doneFunc_2: (+1)
   \   0000012A   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   0000012E   0xF9B0 0x0020      LDRSH    R0,[R0, #+32]
   \   00000132   0xEE00 0x0A10      VMOV     S0,R0
   \   00000136   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000013A   0xEDDF 0x....      VLDR.W   S1,??DataTable0  ;; 0xc2c80000
   \   0000013E   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000142   0xEDDF 0x....      VLDR.W   S1,??DataTable0_1  ;; 0x42c80000
   \   00000146   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
     50                      Ratio = Ratio * 100.f;
   \                     ??v_motor_doneFunc_3: (+1)
   \   0000014A   0xEDDF 0x....      VLDR.W   S1,??DataTable0_1  ;; 0x42c80000
   \   0000014E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
     51                      //low = 10000*a - 2a*low*100 + high
     52                      //a = (low-high)/(10000-2*100*low)
     53                      /*float a = (m_Control.speed_min-m_Control.speed_max)/(10000-2*100*m_Control.speed_min);
     54                      float b = - m_Control.speed_min * 2 * a;
     55                      float c = m_Control.speed_max;*/
     56                      
     57                      if(Ratio < 25)
   \   00000152   0xEEF3 0x0A09      VMOV.F32 S1,#25.0
   \   00000156   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   0000015A   0xEEF1 0xFA10      FMSTAT   
   \   0000015E   0xD524             BPL.N    ??v_motor_doneFunc_4
     58                      {//Max - Min
     59                          float K = (m_Control.speed_max - m_Control.speed_cut)/(0-25);
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   00000164   0x8800             LDRH     R0,[R0, #+0]
   \   00000166   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   0000016A   0x8849             LDRH     R1,[R1, #+2]
   \   0000016C   0x1A40             SUBS     R0,R0,R1
   \   0000016E   0xF07F 0x0118      MVNS     R1,#+24
   \   00000172   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000176   0xEE00 0x0A90      VMOV     S1,R0
   \   0000017A   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
     60                          float B = m_Control.speed_cut - K*25;
   \   0000017E   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   00000182   0x8840             LDRH     R0,[R0, #+2]
   \   00000184   0xEE01 0x0A10      VMOV     S2,R0
   \   00000188   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   0000018C   0xEEF3 0x1A09      VMOV.F32 S3,#25.0
   \   00000190   0xEE00 0x1AE1      VMLS.F32 S2,S1,S3
     61                          m_Control.GiveSpeed = K*Ratio + B;
   \   00000194   0xEE00 0x1A80      VMLA.F32 S2,S1,S0
   \   00000198   0xEEBD 0x0AC1      VCVT.S32.F32 S0,S2
   \   0000019C   0xEE10 0x0A10      VMOV     R0,S0
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   000001A4   0xF8A1 0x006C      STRH     R0,[R1, #+108]
   \   000001A8   0xE023             B.N      ??v_motor_doneFunc_5
     62                      }
     63                      else
     64                      {
     65                          float K = (m_Control.speed_cut - m_Control.speed_min)/(25-100);
   \                     ??v_motor_doneFunc_4: (+1)
   \   000001AA   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   000001AE   0x8840             LDRH     R0,[R0, #+2]
   \   000001B0   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   000001B4   0x8889             LDRH     R1,[R1, #+4]
   \   000001B6   0x1A40             SUBS     R0,R0,R1
   \   000001B8   0xF07F 0x014A      MVNS     R1,#+74
   \   000001BC   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000001C0   0xEE00 0x0A90      VMOV     S1,R0
   \   000001C4   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
     66                          float B = m_Control.speed_min - K*100;
   \   000001C8   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   000001CC   0x8880             LDRH     R0,[R0, #+4]
   \   000001CE   0xEE01 0x0A10      VMOV     S2,R0
   \   000001D2   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   000001D6   0xEDDF 0x....      VLDR.W   S3,??DataTable0_1  ;; 0x42c80000
   \   000001DA   0xEE00 0x1AE1      VMLS.F32 S2,S1,S3
     67                          m_Control.GiveSpeed = K*Ratio + B;
   \   000001DE   0xEE00 0x1A80      VMLA.F32 S2,S1,S0
   \   000001E2   0xEEBD 0x0AC1      VCVT.S32.F32 S0,S2
   \   000001E6   0xEE10 0x0A10      VMOV     R0,S0
   \   000001EA   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   000001EE   0xF8A1 0x006C      STRH     R0,[R1, #+108]
     68                      }
     69                      
     70                      //m_Control.GiveSpeed = GR_MotorSpeed3[(unsigned int)Ratio];//m_Control.speed_min;//a*Ratio*Ratio + b*Ratio + c;
     71                      //if(m_Control.GiveSpeed > 220){m_Control.GiveSpeed = 220;}
     72                          ///(uint16)((1.f-Ratio*Ratio)*(m_Control.speed_max-m_Control.speed_min) + m_Control.speed_min);
     73                      if((20 == m_Control.servo_imageYstopLine)||(1 == m_ImageAbstract.RtAngle_isLasting))
   \                     ??v_motor_doneFunc_5: (+1)
   \   000001F2   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   000001F6   0xF890 0x0084      LDRB     R0,[R0, #+132]
   \   000001FA   0x2814             CMP      R0,#+20
   \   000001FC   0xD005             BEQ.N    ??v_motor_doneFunc_6
   \   000001FE   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000202   0xF890 0x01E0      LDRB     R0,[R0, #+480]
   \   00000206   0x2801             CMP      R0,#+1
   \   00000208   0xD106             BNE.N    ??v_motor_doneFunc_7
     74                      {m_Control.GiveSpeed = m_Control.speed_min;}
   \                     ??v_motor_doneFunc_6: (+1)
   \   0000020A   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   0000020E   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00000212   0x8889             LDRH     R1,[R1, #+4]
   \   00000214   0xF8A0 0x106C      STRH     R1,[R0, #+108]
     75                      m_Control.v_MotorControlSpeed((sint16)(m_Control.GiveSpeed));
   \                     ??v_motor_doneFunc_7: (+1)
   \   00000218   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   0000021C   0xF9B0 0x006C      LDRSH    R0,[R0, #+108]
   \   00000220   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000222   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00000226   0xF8D1 0x10DC      LDR      R1,[R1, #+220]
   \   0000022A   0x4788             BLX      R1
     76                      //v_speed_Give((sint16)(m_Control.GiveSpeed / 10.f));
     77                  }//电机控制至此结束
     78              }
     79              
     80          }
   \                     ??v_motor_doneFunc_1: (+1)
   \   0000022C   0xBD01             POP      {R0,PC}          ;; return
     81          

   \                                 In section .text, align 2, keep-with-next
     82          void v_ImageCutInformationShow(uint8 mode)//===== -图像展示- =====//
     83          {
   \                     v_ImageCutInformationShow: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
     84              //if(0 == m_ImageAbstract.isImageInformationShowing)
     85              //{
     86              //    return;//如果不展示则退出
     87              //}
     88              //if(0 == m_ImageAbstract.DataShowOK_flag)
     89              //{return;}
     90              s_color Red;
     91              Red.A_Blue_31 = 0;Red.B_Green_63 = 0;Red.C_Red_31 = 31;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   00000012   0x201F             MOVS     R0,#+31
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
     92              s_color Green;
     93              Green.A_Blue_31 = 0;Green.B_Green_63 = 63;Green.C_Red_31 = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF88D 0x000E      STRB     R0,[SP, #+14]
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0xF88D 0x000D      STRB     R0,[SP, #+13]
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF88D 0x000C      STRB     R0,[SP, #+12]
     94              s_color Black;
     95              Black.A_Blue_31 = 0;Black.B_Green_63 = 0;Black.C_Red_31 = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xF88D 0x0008      STRB     R0,[SP, #+8]
     96              s_color Blue;
     97              Blue.A_Blue_31 = 31;Blue.B_Green_63 = 0;Blue.C_Red_31 = 0;
   \   0000003C   0x201F             MOVS     R0,#+31
   \   0000003E   0xF88D 0x0006      STRB     R0,[SP, #+6]
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF88D 0x0004      STRB     R0,[SP, #+4]
     98              
     99              for(uint8 loop = m_ImageAbstract.Show_Start_Y_Position;loop < m_ImageAbstract.Show_Last_Y_Position;loop++)
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000052   0xF890 0x51E1      LDRB     R5,[R0, #+481]
   \   00000056   0xE073             B.N      ??v_ImageCutInformationShow_0
    100              {
    101                  if(255 != m_ImageAbstract.Right_UpBlack2White[loop])
   \                     ??v_ImageCutInformationShow_1: (+1)
   \   00000058   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   0000005E   0x1828             ADDS     R0,R5,R0
   \   00000060   0xF890 0x011C      LDRB     R0,[R0, #+284]
   \   00000064   0x28FF             CMP      R0,#+255
   \   00000066   0xD00E             BEQ.N    ??v_ImageCutInformationShow_2
    102                  {
    103                      v_ColorRev_PutPoint(m_ImageAbstract.Right_UpBlack2White[loop]/2,loop,&Blue);
   \   00000068   0xAA01             ADD      R2,SP,#+4
   \   0000006A   0x0029             MOVS     R1,R5
   \   0000006C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000074   0x1828             ADDS     R0,R5,R0
   \   00000076   0xF890 0x011C      LDRB     R0,[R0, #+284]
   \   0000007A   0x2302             MOVS     R3,#+2
   \   0000007C   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \   00000080   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000082   0x.... 0x....      BL       v_ColorRev_PutPoint
    104                  }
    105                  if(255 != m_ImageAbstract.Left_UpBlack2White[loop])
   \                     ??v_ImageCutInformationShow_2: (+1)
   \   00000086   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   0000008C   0x1828             ADDS     R0,R5,R0
   \   0000008E   0xF890 0x00E0      LDRB     R0,[R0, #+224]
   \   00000092   0x28FF             CMP      R0,#+255
   \   00000094   0xD00E             BEQ.N    ??v_ImageCutInformationShow_3
    106                  {
    107                      v_ColorRev_PutPoint(m_ImageAbstract.Left_UpBlack2White[loop]/2,loop,&Green);
   \   00000096   0xAA03             ADD      R2,SP,#+12
   \   00000098   0x0029             MOVS     R1,R5
   \   0000009A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   000000A2   0x1828             ADDS     R0,R5,R0
   \   000000A4   0xF890 0x00E0      LDRB     R0,[R0, #+224]
   \   000000A8   0x2302             MOVS     R3,#+2
   \   000000AA   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \   000000AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B0   0x.... 0x....      BL       v_ColorRev_PutPoint
    108                  }
    109                  if(255 != m_ImageAbstract.Right[loop])
   \                     ??v_ImageCutInformationShow_3: (+1)
   \   000000B4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   000000BA   0x1828             ADDS     R0,R5,R0
   \   000000BC   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   000000C0   0x28FF             CMP      R0,#+255
   \   000000C2   0xD00E             BEQ.N    ??v_ImageCutInformationShow_4
    110                  {
    111                      v_ColorRev_PutPoint(m_ImageAbstract.Right[loop]/2,loop,&Blue);
   \   000000C4   0xAA01             ADD      R2,SP,#+4
   \   000000C6   0x0029             MOVS     R1,R5
   \   000000C8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000CA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   000000D0   0x1828             ADDS     R0,R5,R0
   \   000000D2   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   000000D6   0x2302             MOVS     R3,#+2
   \   000000D8   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \   000000DC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DE   0x.... 0x....      BL       v_ColorRev_PutPoint
    112                  }
    113                  if(255 != m_ImageAbstract.Left[loop])
   \                     ??v_ImageCutInformationShow_4: (+1)
   \   000000E2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   000000E8   0x1828             ADDS     R0,R5,R0
   \   000000EA   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   000000EE   0x28FF             CMP      R0,#+255
   \   000000F0   0xD00E             BEQ.N    ??v_ImageCutInformationShow_5
    114                  {
    115                      v_ColorRev_PutPoint(m_ImageAbstract.Left[loop]/2,loop,&Green);
   \   000000F2   0xAA03             ADD      R2,SP,#+12
   \   000000F4   0x0029             MOVS     R1,R5
   \   000000F6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   000000FE   0x1828             ADDS     R0,R5,R0
   \   00000100   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00000104   0x2302             MOVS     R3,#+2
   \   00000106   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \   0000010A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010C   0x.... 0x....      BL       v_ColorRev_PutPoint
    116                  }
    117                  if(255 != m_ImageAbstract.Central[loop])
   \                     ??v_ImageCutInformationShow_5: (+1)
   \   00000110   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000116   0x1828             ADDS     R0,R5,R0
   \   00000118   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   0000011C   0x28FF             CMP      R0,#+255
   \   0000011E   0xD00E             BEQ.N    ??v_ImageCutInformationShow_6
    118                  {
    119                      v_ColorRev_PutPoint(m_ImageAbstract.Central[loop]/2,loop,&Red);
   \   00000120   0xAA00             ADD      R2,SP,#+0
   \   00000122   0x0029             MOVS     R1,R5
   \   00000124   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000126   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   0000012C   0x1828             ADDS     R0,R5,R0
   \   0000012E   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   00000132   0x2302             MOVS     R3,#+2
   \   00000134   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \   00000138   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013A   0x.... 0x....      BL       v_ColorRev_PutPoint
    120                  }
    121                  //v_ColorRev_PutPoint((uint8)m_Control.image_control_n,loop,&Blue);
    122              }
   \                     ??v_ImageCutInformationShow_6: (+1)
   \   0000013E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??v_ImageCutInformationShow_0: (+1)
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000144   0xF890 0x01E2      LDRB     R0,[R0, #+482]
   \   00000148   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000014A   0x4285             CMP      R5,R0
   \   0000014C   0xD384             BCC.N    ??v_ImageCutInformationShow_1
    123              if(1 == mode){return;}
   \   0000014E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000150   0x2C01             CMP      R4,#+1
   \   00000152   0xF000 0x80F2      BEQ.W    ??v_ImageCutInformationShow_7
    124              for(uint8 loop = 0;loop < 90;loop++)
   \                     ??v_ImageCutInformationShow_8: (+1)
   \   00000156   0x2400             MOVS     R4,#+0
   \   00000158   0xE00D             B.N      ??v_ImageCutInformationShow_9
    125              {
    126                  if(loop<45)
    127                  {
    128                      v_ColorRev_PutPoint(m_ImageAbstract.LastFrame_CentralPos/2,loop,&Blue);
    129                  }
    130                  else
    131                  {
    132                      v_ColorRev_PutPoint(m_ImageAbstract.LastFrame_CentralPos/2,loop,&Red);
   \                     ??v_ImageCutInformationShow_10: (+1)
   \   0000015A   0xAA00             ADD      R2,SP,#+0
   \   0000015C   0x0021             MOVS     R1,R4
   \   0000015E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000164   0xF890 0x01D4      LDRB     R0,[R0, #+468]
   \   00000168   0x2302             MOVS     R3,#+2
   \   0000016A   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \   0000016E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000170   0x.... 0x....      BL       v_ColorRev_PutPoint
    133                  }
   \                     ??v_ImageCutInformationShow_11: (+1)
   \   00000174   0x1C64             ADDS     R4,R4,#+1
   \                     ??v_ImageCutInformationShow_9: (+1)
   \   00000176   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000178   0x2C5A             CMP      R4,#+90
   \   0000017A   0xDA10             BGE.N    ??v_ImageCutInformationShow_12
   \   0000017C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000017E   0x2C2D             CMP      R4,#+45
   \   00000180   0xDAEB             BGE.N    ??v_ImageCutInformationShow_10
   \   00000182   0xAA01             ADD      R2,SP,#+4
   \   00000184   0x0021             MOVS     R1,R4
   \   00000186   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   0000018C   0xF890 0x01D4      LDRB     R0,[R0, #+468]
   \   00000190   0x2302             MOVS     R3,#+2
   \   00000192   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \   00000196   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000198   0x.... 0x....      BL       v_ColorRev_PutPoint
   \   0000019C   0xE7EA             B.N      ??v_ImageCutInformationShow_11
    134                  
    135              }
    136              for(uint8 loop = 0;loop < 60;loop++)
   \                     ??v_ImageCutInformationShow_12: (+1)
   \   0000019E   0x2400             MOVS     R4,#+0
   \   000001A0   0xE009             B.N      ??v_ImageCutInformationShow_13
    137              {
    138                  //v_ColorRev_PutPoint(m_ImageAbstract.LastFrame_CentralPos,loop,&Blue);
    139                  v_ColorRev_PutPoint(loop,m_ImageAbstract.Last_Y_Position,&Black);
   \                     ??v_ImageCutInformationShow_14: (+1)
   \   000001A2   0xAA02             ADD      R2,SP,#+8
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   000001A8   0xF890 0x11D1      LDRB     R1,[R0, #+465]
   \   000001AC   0x0020             MOVS     R0,R4
   \   000001AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001B0   0x.... 0x....      BL       v_ColorRev_PutPoint
    140                  //if((loop < 20)&&(loop > 40))
    141                  //{
    142                  //    //v_ColorRev_PutPoint(loop,m_Control.servo_imageYstopLine,&Black);
    143                  //    v_ColorRev_PutPoint(loop,m_ImageAbstract.Last_Y_Position,&Blue);
    144                  //}
    145              }
   \   000001B4   0x1C64             ADDS     R4,R4,#+1
   \                     ??v_ImageCutInformationShow_13: (+1)
   \   000001B6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001B8   0x2C3C             CMP      R4,#+60
   \   000001BA   0xDBF2             BLT.N    ??v_ImageCutInformationShow_14
    146              //m_ImageAbstract.DataShowOK_flag = 0;//消除标志位
    147              if(255 != m_ImageAbstract.LonlyLine_ShutDown_Y)
   \   000001BC   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   000001C0   0xF890 0x0229      LDRB     R0,[R0, #+553]
   \   000001C4   0x28FF             CMP      R0,#+255
   \   000001C6   0xD00E             BEQ.N    ??v_ImageCutInformationShow_15
    148              {
    149                  for(uint8 inter = 0;inter < 96;inter ++)
   \   000001C8   0x2400             MOVS     R4,#+0
   \   000001CA   0xE009             B.N      ??v_ImageCutInformationShow_16
    150                  {
    151                      v_ColorRev_PutPoint(inter,m_ImageAbstract.LonlyLine_ShutDown_Y,&Red);
   \                     ??v_ImageCutInformationShow_17: (+1)
   \   000001CC   0xAA00             ADD      R2,SP,#+0
   \   000001CE   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   000001D2   0xF890 0x1229      LDRB     R1,[R0, #+553]
   \   000001D6   0x0020             MOVS     R0,R4
   \   000001D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001DA   0x.... 0x....      BL       v_ColorRev_PutPoint
    152                      //v_ColorRev_PutPoint(inter,m_ImageAbstract.LonlyLine_Line_End_About_Y,&Blue);
    153                  }
   \   000001DE   0x1C64             ADDS     R4,R4,#+1
   \                     ??v_ImageCutInformationShow_16: (+1)
   \   000001E0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001E2   0x2C60             CMP      R4,#+96
   \   000001E4   0xDBF2             BLT.N    ??v_ImageCutInformationShow_17
    154              }
    155              
    156              
    157              if(255 != m_ImageAbstract.CutY_secondLine)
   \                     ??v_ImageCutInformationShow_15: (+1)
   \   000001E6   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   000001EA   0x7A80             LDRB     R0,[R0, #+10]
   \   000001EC   0x28FF             CMP      R0,#+255
   \   000001EE   0xD00D             BEQ.N    ??v_ImageCutInformationShow_18
    158              {
    159                  for(uint8 inter = 0;inter < 96;inter ++)
   \   000001F0   0x2400             MOVS     R4,#+0
   \   000001F2   0xE008             B.N      ??v_ImageCutInformationShow_19
    160                  {
    161                      v_ColorRev_PutPoint(inter,m_ImageAbstract.CutY_secondLine,&Red);
   \                     ??v_ImageCutInformationShow_20: (+1)
   \   000001F4   0xAA00             ADD      R2,SP,#+0
   \   000001F6   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   000001FA   0x7A81             LDRB     R1,[R0, #+10]
   \   000001FC   0x0020             MOVS     R0,R4
   \   000001FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000200   0x.... 0x....      BL       v_ColorRev_PutPoint
    162                  }
   \   00000204   0x1C64             ADDS     R4,R4,#+1
   \                     ??v_ImageCutInformationShow_19: (+1)
   \   00000206   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000208   0x2C60             CMP      R4,#+96
   \   0000020A   0xDBF3             BLT.N    ??v_ImageCutInformationShow_20
    163              }
    164              if(255 != m_ImageAbstract.CutY_firstLine)
   \                     ??v_ImageCutInformationShow_18: (+1)
   \   0000020C   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000210   0x7A40             LDRB     R0,[R0, #+9]
   \   00000212   0x28FF             CMP      R0,#+255
   \   00000214   0xD00D             BEQ.N    ??v_ImageCutInformationShow_21
    165              {
    166                  for(uint8 inter = 0;inter < 96;inter ++)
   \   00000216   0x2400             MOVS     R4,#+0
   \   00000218   0xE008             B.N      ??v_ImageCutInformationShow_22
    167                  {
    168                      v_ColorRev_PutPoint(inter,m_ImageAbstract.CutY_firstLine,&Red);
   \                     ??v_ImageCutInformationShow_23: (+1)
   \   0000021A   0xAA00             ADD      R2,SP,#+0
   \   0000021C   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000220   0x7A41             LDRB     R1,[R0, #+9]
   \   00000222   0x0020             MOVS     R0,R4
   \   00000224   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000226   0x.... 0x....      BL       v_ColorRev_PutPoint
    169                  }
   \   0000022A   0x1C64             ADDS     R4,R4,#+1
   \                     ??v_ImageCutInformationShow_22: (+1)
   \   0000022C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000022E   0x2C60             CMP      R4,#+96
   \   00000230   0xDBF3             BLT.N    ??v_ImageCutInformationShow_23
    170              }
    171                  
    172                  
    173              if(255 != m_ImageAbstract.BlackBarHeight_End)
   \                     ??v_ImageCutInformationShow_21: (+1)
   \   00000232   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000236   0x7E00             LDRB     R0,[R0, #+24]
   \   00000238   0x28FF             CMP      R0,#+255
   \   0000023A   0xD00D             BEQ.N    ??v_ImageCutInformationShow_24
    174              {
    175                  for(uint8 inter = 0;inter < 96;inter ++)
   \   0000023C   0x2400             MOVS     R4,#+0
   \   0000023E   0xE008             B.N      ??v_ImageCutInformationShow_25
    176                  {
    177                      v_ColorRev_PutPoint(inter,m_ImageAbstract.BlackBarHeight_Start,&Blue);
   \                     ??v_ImageCutInformationShow_26: (+1)
   \   00000240   0xAA01             ADD      R2,SP,#+4
   \   00000242   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000246   0x7DC1             LDRB     R1,[R0, #+23]
   \   00000248   0x0020             MOVS     R0,R4
   \   0000024A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000024C   0x.... 0x....      BL       v_ColorRev_PutPoint
    178                  }
   \   00000250   0x1C64             ADDS     R4,R4,#+1
   \                     ??v_ImageCutInformationShow_25: (+1)
   \   00000252   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000254   0x2C60             CMP      R4,#+96
   \   00000256   0xDBF3             BLT.N    ??v_ImageCutInformationShow_26
    179              }
    180              if(255 != m_ImageAbstract.BlackBarHeight_Start)
   \                     ??v_ImageCutInformationShow_24: (+1)
   \   00000258   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   0000025C   0x7DC0             LDRB     R0,[R0, #+23]
   \   0000025E   0x28FF             CMP      R0,#+255
   \   00000260   0xD00D             BEQ.N    ??v_ImageCutInformationShow_27
    181              {
    182                  for(uint8 inter = 0;inter < 96;inter ++)
   \   00000262   0x2400             MOVS     R4,#+0
   \   00000264   0xE008             B.N      ??v_ImageCutInformationShow_28
    183                  {
    184                      v_ColorRev_PutPoint(inter,m_ImageAbstract.BlackBarHeight_End,&Blue);
   \                     ??v_ImageCutInformationShow_29: (+1)
   \   00000266   0xAA01             ADD      R2,SP,#+4
   \   00000268   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   0000026C   0x7E01             LDRB     R1,[R0, #+24]
   \   0000026E   0x0020             MOVS     R0,R4
   \   00000270   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000272   0x.... 0x....      BL       v_ColorRev_PutPoint
    185                  }
   \   00000276   0x1C64             ADDS     R4,R4,#+1
   \                     ??v_ImageCutInformationShow_28: (+1)
   \   00000278   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000027A   0x2C60             CMP      R4,#+96
   \   0000027C   0xDBF3             BLT.N    ??v_ImageCutInformationShow_29
    186              }
    187              
    188              
    189              if(255 != m_ImageAbstract.LonlyLine_ShutDown_X)
   \                     ??v_ImageCutInformationShow_27: (+1)
   \   0000027E   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000282   0xF890 0x0228      LDRB     R0,[R0, #+552]
   \   00000286   0x28FF             CMP      R0,#+255
   \   00000288   0xD012             BEQ.N    ??v_ImageCutInformationShow_30
    190              {
    191                  for(uint8 inter = 0;inter < 60;inter ++)
   \   0000028A   0x2400             MOVS     R4,#+0
   \   0000028C   0xE00D             B.N      ??v_ImageCutInformationShow_31
    192                  {
    193                      v_ColorRev_PutPoint(m_ImageAbstract.LonlyLine_ShutDown_X/2,inter,&Black);
   \                     ??v_ImageCutInformationShow_32: (+1)
   \   0000028E   0xAA02             ADD      R2,SP,#+8
   \   00000290   0x0021             MOVS     R1,R4
   \   00000292   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000294   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000298   0xF890 0x0228      LDRB     R0,[R0, #+552]
   \   0000029C   0x2302             MOVS     R3,#+2
   \   0000029E   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \   000002A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002A4   0x.... 0x....      BL       v_ColorRev_PutPoint
    194                  }
   \   000002A8   0x1C64             ADDS     R4,R4,#+1
   \                     ??v_ImageCutInformationShow_31: (+1)
   \   000002AA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002AC   0x2C3C             CMP      R4,#+60
   \   000002AE   0xDBEE             BLT.N    ??v_ImageCutInformationShow_32
    195              }
    196              for(uint8 loop = 0;loop < 60;loop++)//检测跳变次数
   \                     ??v_ImageCutInformationShow_30: (+1)
   \   000002B0   0x2400             MOVS     R4,#+0
   \   000002B2   0xE00B             B.N      ??v_ImageCutInformationShow_33
    197              {
    198                  
    199                  
    200                  if('K' == m_ImageAbstract.happened_suddenly_True[loop])
    201                  {
    202                      for(uint8 inter = 0;inter < 96;inter ++)
    203                      {
    204                          v_ColorRev_PutPoint(inter,loop,&Black);
    205                      }
    206                  }
    207                  if('W' == m_ImageAbstract.happened_suddenly_True[loop])
    208                  {
    209                      for(uint8 inter = 0;inter < 96;inter ++)
    210                      {
    211                          v_ColorRev_PutPoint(inter,loop,&Red);
    212                      }
    213                  }
    214                  if('B' == m_ImageAbstract.happened_suddenly_True[loop])
    215                  {
    216                      for(uint8 inter = 0;inter < 96;inter ++)
    217                      {
    218                          v_ColorRev_PutPoint(inter,loop,&Green);
   \                     ??v_ImageCutInformationShow_34: (+1)
   \   000002B4   0xAA03             ADD      R2,SP,#+12
   \   000002B6   0x0021             MOVS     R1,R4
   \   000002B8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002BA   0x0028             MOVS     R0,R5
   \   000002BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002BE   0x.... 0x....      BL       v_ColorRev_PutPoint
    219                      }
   \   000002C2   0x1C6D             ADDS     R5,R5,#+1
   \                     ??v_ImageCutInformationShow_35: (+1)
   \   000002C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002C6   0x2D60             CMP      R5,#+96
   \   000002C8   0xDBF4             BLT.N    ??v_ImageCutInformationShow_34
   \                     ??v_ImageCutInformationShow_36: (+1)
   \   000002CA   0x1C64             ADDS     R4,R4,#+1
   \                     ??v_ImageCutInformationShow_33: (+1)
   \   000002CC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002CE   0x2C3C             CMP      R4,#+60
   \   000002D0   0xDA33             BGE.N    ??v_ImageCutInformationShow_37
   \   000002D2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002D4   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   000002D8   0x1820             ADDS     R0,R4,R0
   \   000002DA   0xF890 0x01E4      LDRB     R0,[R0, #+484]
   \   000002DE   0x284B             CMP      R0,#+75
   \   000002E0   0xD10C             BNE.N    ??v_ImageCutInformationShow_38
   \   000002E2   0x2500             MOVS     R5,#+0
   \   000002E4   0xE007             B.N      ??v_ImageCutInformationShow_39
   \                     ??v_ImageCutInformationShow_40: (+1)
   \   000002E6   0xAA02             ADD      R2,SP,#+8
   \   000002E8   0x0021             MOVS     R1,R4
   \   000002EA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002EC   0x0028             MOVS     R0,R5
   \   000002EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002F0   0x.... 0x....      BL       v_ColorRev_PutPoint
   \   000002F4   0x1C6D             ADDS     R5,R5,#+1
   \                     ??v_ImageCutInformationShow_39: (+1)
   \   000002F6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002F8   0x2D60             CMP      R5,#+96
   \   000002FA   0xDBF4             BLT.N    ??v_ImageCutInformationShow_40
   \                     ??v_ImageCutInformationShow_38: (+1)
   \   000002FC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002FE   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   00000302   0x1820             ADDS     R0,R4,R0
   \   00000304   0xF890 0x01E4      LDRB     R0,[R0, #+484]
   \   00000308   0x2857             CMP      R0,#+87
   \   0000030A   0xD10C             BNE.N    ??v_ImageCutInformationShow_41
   \   0000030C   0x2500             MOVS     R5,#+0
   \   0000030E   0xE007             B.N      ??v_ImageCutInformationShow_42
   \                     ??v_ImageCutInformationShow_43: (+1)
   \   00000310   0xAA00             ADD      R2,SP,#+0
   \   00000312   0x0021             MOVS     R1,R4
   \   00000314   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000316   0x0028             MOVS     R0,R5
   \   00000318   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000031A   0x.... 0x....      BL       v_ColorRev_PutPoint
   \   0000031E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??v_ImageCutInformationShow_42: (+1)
   \   00000320   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000322   0x2D60             CMP      R5,#+96
   \   00000324   0xDBF4             BLT.N    ??v_ImageCutInformationShow_43
   \                     ??v_ImageCutInformationShow_41: (+1)
   \   00000326   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000328   0x.... 0x....      LDR.W    R0,??DataTable4_7
   \   0000032C   0x1820             ADDS     R0,R4,R0
   \   0000032E   0xF890 0x01E4      LDRB     R0,[R0, #+484]
   \   00000332   0x2842             CMP      R0,#+66
   \   00000334   0xD1C9             BNE.N    ??v_ImageCutInformationShow_36
   \   00000336   0x2500             MOVS     R5,#+0
   \   00000338   0xE7C4             B.N      ??v_ImageCutInformationShow_35
    220                  }
    221              }
    222          }
   \                     ??v_ImageCutInformationShow_37: (+1)
   \                     ??v_ImageCutInformationShow_7: (+1)
   \   0000033A   0xB005             ADD      SP,SP,#+20
   \   0000033C   0xBD30             POP      {R4,R5,PC}       ;; return
    223          
    224          

   \                                 In section .text, align 4, keep-with-next
    225          uint8 b_getCurve_Point(math_f32* used_X,math_f32 used_Y,math_f32 near_X,math_f32 near_Y,math_f32 far_X,math_f32 far_Y,math_f32 Curve)
    226          {//最核心代码，根据曲率绘制点 
   \                     b_getCurve_Point: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B08      VPUSH    {D8-D11}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0xEEB0 0x8A40      VMOV.F32 S16,S0
    227              math_f32 X_Mid = (near_X + far_X) * 0.5f;
   \   0000000C   0xEE30 0x0AA1      VADD.F32 S0,S1,S3
   \   00000010   0xEEB6 0x3A00      VMOV.F32 S6,#0.5
   \   00000014   0xEE60 0x9A03      VMUL.F32 S19,S0,S6
    228              math_f32 Y_Mid = (near_Y + far_Y) * 0.5f;//确定中间位置
   \   00000018   0xEE31 0x0A02      VADD.F32 S0,S2,S4
   \   0000001C   0xEEB6 0x3A00      VMOV.F32 S6,#0.5
   \   00000020   0xEE20 0xAA03      VMUL.F32 S20,S0,S6
    229              math_f32 Round_halfLong = 0.f;
   \   00000024   0xED9F 0x....      VLDR.W   S18,??DataTable2  ;; 0x0
    230              if(0.f == Curve)
   \   00000028   0xEEF5 0x2A40      VCMP.F32 S5,#0.0
   \   0000002C   0xEEF1 0xFA10      FMSTAT   
   \   00000030   0xD10F             BNE.N    ??b_getCurve_Point_0
    231              {//直线 
    232          	*used_X = (used_Y-near_Y)*(far_X-near_X)/(far_Y-near_Y) + near_X;
   \   00000032   0xEE38 0x0A41      VSUB.F32 S0,S16,S2
   \   00000036   0xEE71 0x1AE0      VSUB.F32 S3,S3,S1
   \   0000003A   0xEE20 0x0A21      VMUL.F32 S0,S0,S3
   \   0000003E   0xEE32 0x1A41      VSUB.F32 S2,S4,S2
   \   00000042   0xEE80 0x0A01      VDIV.F32 S0,S0,S2
   \   00000046   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   0000004A   0xED84 0x0A00      VSTR     S0,[R4, #0]
    233          	return 1;
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0xE04C             B.N      ??b_getCurve_Point_1
    234              }
    235              else
    236              {
    237          	math_f32 isRight = (Curve < 0.f)?-1.f:1.f;//确定曲率走向 //小于零右旋 
   \                     ??b_getCurve_Point_0: (+1)
   \   00000052   0xEEF5 0x2A40      VCMP.F32 S5,#0.0
   \   00000056   0xEEF1 0xFA10      FMSTAT   
   \   0000005A   0xD502             BPL.N    ??b_getCurve_Point_2
   \   0000005C   0xEEFF 0x8A00      VMOV.F32 S17,#-1.0
   \   00000060   0xE001             B.N      ??b_getCurve_Point_3
   \                     ??b_getCurve_Point_2: (+1)
   \   00000062   0xEEF7 0x8A00      VMOV.F32 S17,#1.0
    238                  Round_halfLong = 1.f / __F_ABS(Curve);
   \                     ??b_getCurve_Point_3: (+1)
   \   00000066   0xEEF5 0x2A40      VCMP.F32 S5,#0.0
   \   0000006A   0xEEF1 0xFA10      FMSTAT   
   \   0000006E   0xD502             BPL.N    ??b_getCurve_Point_4
   \   00000070   0xEEF1 0x2A62      VNEG.F32 S5,S5
   \   00000074   0xE7FF             B.N      ??b_getCurve_Point_5
   \                     ??b_getCurve_Point_4: (+1)
   \                     ??b_getCurve_Point_5: (+1)
   \   00000076   0xEEB7 0x0A00      VMOV.F32 S0,#1.0
   \   0000007A   0xEE80 0x9A22      VDIV.F32 S18,S0,S5
    239                  math_f32 X_Cut = (far_X - near_X);// * 0.5f;
   \   0000007E   0xEE71 0xAAE0      VSUB.F32 S21,S3,S1
    240          	math_f32 Y_Cut = (far_Y - near_Y);// * 0.5f;//半长 
   \   00000082   0xEE32 0xBA41      VSUB.F32 S22,S4,S2
    241          		
    242          	math_f32 Round_halfLong_Down = (X_Cut*X_Cut + Y_Cut*Y_Cut);//半径下面的那条线
   \   00000086   0xEE2A 0x0AAA      VMUL.F32 S0,S21,S21
   \   0000008A   0xEE0B 0x0A0B      VMLA.F32 S0,S22,S22
    243          	math_f32 RoundPoint_LastWilds = (Round_halfLong*Round_halfLong - 0.25f*Round_halfLong_Down);//求最后一步的长度
   \   0000008E   0xEE69 0x0A09      VMUL.F32 S1,S18,S18
   \   00000092   0xEEB5 0x1A00      VMOV.F32 S2,#0.25
   \   00000096   0xEE40 0x0A41      VMLS.F32 S1,S0,S2
    244          	math_f32 small_change = SquareRootFloat(__F_ABS(RoundPoint_LastWilds / Round_halfLong_Down));//(y2-y1)y = (x1-x2)x + C
   \   0000009A   0xEE80 0x1A80      VDIV.F32 S2,S1,S0
   \   0000009E   0xEEB5 0x1A40      VCMP.F32 S2,#0.0
   \   000000A2   0xEEF1 0xFA10      FMSTAT   
   \   000000A6   0xD504             BPL.N    ??b_getCurve_Point_6
   \   000000A8   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \   000000AC   0xEEB1 0x0A40      VNEG.F32 S0,S0
   \   000000B0   0xE001             B.N      ??b_getCurve_Point_7
   \                     ??b_getCurve_Point_6: (+1)
   \   000000B2   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \                     ??b_getCurve_Point_7: (+1)
   \   000000B6   0x.... 0x....      BL       SquareRootFloat
    245          		
    246          	math_f32 RoundX0 = isRight*Y_Cut*(small_change) + X_Mid;//确定原点 
   \   000000BA   0xEE68 0x0A8B      VMUL.F32 S1,S17,S22
   \   000000BE   0xEE40 0x9A80      VMLA.F32 S19,S1,S0
    247          	math_f32 RoundY0 = -isRight*X_Cut*(small_change) + Y_Mid;
   \   000000C2   0xEEF1 0x0A68      VNEG.F32 S1,S17
   \   000000C6   0xEE60 0x0AAA      VMUL.F32 S1,S1,S21
   \   000000CA   0xEE00 0xAA80      VMLA.F32 S20,S1,S0
    248          
    249          	math_f32 Y_CutVar_WithRoundUsed = (RoundY0 - used_Y);//Y偏置 
   \   000000CE   0xEE7A 0x0A48      VSUB.F32 S1,S20,S16
    250          	math_f32 X_Change = SquareRootFloat(Round_halfLong*Round_halfLong 
    251          					- Y_CutVar_WithRoundUsed*Y_CutVar_WithRoundUsed);
   \   000000D2   0xEE29 0x0A09      VMUL.F32 S0,S18,S18
   \   000000D6   0xEE00 0x0AE0      VMLS.F32 S0,S1,S1
   \   000000DA   0x.... 0x....      BL       SquareRootFloat
    252          	*used_X = -isRight*X_Change + RoundX0;
   \   000000DE   0xEEF1 0x0A68      VNEG.F32 S1,S17
   \   000000E2   0xEE40 0x9A80      VMLA.F32 S19,S1,S0
   \   000000E6   0xEDC4 0x9A00      VSTR     S19,[R4, #0]
    253          	return 0;
   \   000000EA   0x2000             MOVS     R0,#+0
   \                     ??b_getCurve_Point_1: (+1)
   \   000000EC   0xECBD 0x8B08      VPOP     {D8-D11}
   \   000000F0   0xBD10             POP      {R4,PC}          ;; return
    254              }
    255          }
    256          

   \                                 In section .text, align 2, keep-with-next
    257          float f_Get3pointsCurve(uint8 x_1,uint8 x_2,uint8 x_3,uint8 y_1,uint8 y_2,uint8 y_3)
    258          {
   \                     f_Get3pointsCurve: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
    259              sint16 x_12_cut = (x_1 - x_2);
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x1A44             SUBS     R4,R0,R1
    260              sint16 x_32_cut = (x_3 - x_2);
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x1A55             SUBS     R5,R2,R1
    261              sint16 x_31_cut = (x_3 - x_1);
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x1A12             SUBS     R2,R2,R0
   \   00000018   0x9908             LDR      R1,[SP, #+32]
    262              sint16 y_12_cut = (y_1 - y_2);
   \   0000001A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   0x1A5E             SUBS     R6,R3,R1
   \   00000020   0x9809             LDR      R0,[SP, #+36]
    263              sint16 y_32_cut = (y_3 - y_2);
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x1A41             SUBS     R1,R0,R1
    264              sint16 y_31_cut = (y_3 - y_1);
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000002C   0x1AC0             SUBS     R0,R0,R3
    265              float S_4 = (x_32_cut * y_12_cut - x_12_cut * y_32_cut) * 2.f;//面积
   \   0000002E   0xFB15 0xF306      SMULBB   R3,R5,R6
   \   00000032   0xFB14 0xF701      SMULBB   R7,R4,R1
   \   00000036   0x1BDB             SUBS     R3,R3,R7
   \   00000038   0xEE00 0x3A10      VMOV     S0,R3
   \   0000003C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000040   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000044   0xEE20 0x8A20      VMUL.F32 S16,S0,S1
    266              float l_12 = (x_12_cut*x_12_cut + y_12_cut*y_12_cut);
   \   00000048   0xFB14 0xF304      SMULBB   R3,R4,R4
   \   0000004C   0xFB16 0x3306      SMLABB   R3,R6,R6,R3
   \   00000050   0xEE00 0x3A10      VMOV     S0,R3
   \   00000054   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
    267              float l_23 = (x_32_cut*x_32_cut + y_32_cut*y_32_cut);
   \   00000058   0xFB15 0xF305      SMULBB   R3,R5,R5
   \   0000005C   0xFB11 0x3101      SMLABB   R1,R1,R1,R3
   \   00000060   0xEE00 0x1A90      VMOV     S1,R1
   \   00000064   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
    268              float l_13 = (x_31_cut*x_31_cut + y_31_cut*y_31_cut);
   \   00000068   0xFB12 0xF102      SMULBB   R1,R2,R2
   \   0000006C   0xFB10 0x1000      SMLABB   R0,R0,R0,R1
   \   00000070   0xEE01 0x0A10      VMOV     S2,R0
   \   00000074   0xEEB8 0x1AC1      VCVT.F32.S32 S2,S2
    269              float curve = S_4 * SquareRootBedivFloat(l_12 * l_23 * l_13);
   \   00000078   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000007C   0xEE20 0x0A01      VMUL.F32 S0,S0,S2
   \   00000080   0x.... 0x....      BL       SquareRootBedivFloat
   \   00000084   0xEE28 0x0A00      VMUL.F32 S0,S16,S0
    270              return curve;
   \   00000088   0xECBD 0x8B02      VPOP     {D8}
   \   0000008C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    271          }
    272          
    273          //全主元高斯法

   \                                 In section .text, align 4, keep-with-next
    274          uint8 b_solve8x8_Ax_b(float AB_input[8][9], float X[8])
    275          {
   \                     b_solve8x8_Ax_b: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   \   00000002   0xB0CA             SUB      SP,SP,#+296
    276              float AB[8][9];
    277                  for(uint8 loop = 0;loop < 8;loop++)
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0xE013             B.N      ??b_solve8x8_Ax_b_0
    278                  {
    279                      for(uint8 inter = 0;inter < 9;inter++)
    280                      {
    281                          AB[loop][inter] = AB_input[loop][inter];
   \                     ??b_solve8x8_Ax_b_1: (+1)
   \   00000008   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0x2424             MOVS     R4,#+36
   \   0000000E   0xAD02             ADD      R5,SP,#+8
   \   00000010   0xFB04 0x5402      MLA      R4,R4,R2,R5
   \   00000014   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000016   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000018   0x2524             MOVS     R5,#+36
   \   0000001A   0xFB05 0x0502      MLA      R5,R5,R2,R0
   \   0000001E   0xF855 0x5023      LDR      R5,[R5, R3, LSL #+2]
   \   00000022   0xF844 0x5023      STR      R5,[R4, R3, LSL #+2]
    282                      }
   \   00000026   0x1C5B             ADDS     R3,R3,#+1
   \                     ??b_solve8x8_Ax_b_2: (+1)
   \   00000028   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000002A   0x2B09             CMP      R3,#+9
   \   0000002C   0xDBEC             BLT.N    ??b_solve8x8_Ax_b_1
   \   0000002E   0x1C52             ADDS     R2,R2,#+1
   \                     ??b_solve8x8_Ax_b_0: (+1)
   \   00000030   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000032   0x2A08             CMP      R2,#+8
   \   00000034   0xDA01             BGE.N    ??b_solve8x8_Ax_b_3
   \   00000036   0x2300             MOVS     R3,#+0
   \   00000038   0xE7F6             B.N      ??b_solve8x8_Ax_b_2
    283                  }
    284          	// AX = B
    285          	// 矩阵赋值[行][列]
    286          	uint8 Row_MainElementChange_Temp[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };//列主元保留交换特性//与列变换同时进行 
   \                     ??b_solve8x8_Ax_b_3: (+1)
   \   0000003A   0xA800             ADD      R0,SP,#+0
   \   0000003C   0x.... 0x....      LDR.W    R2,??DataTable4_8
   \   00000040   0xCA18             LDM      R2!,{R3,R4}
   \   00000042   0xC018             STM      R0!,{R3,R4}
   \   00000044   0x3A08             SUBS     R2,R2,#+8
   \   00000046   0x3808             SUBS     R0,R0,#+8
    287          	//float AB[8][9];
    288                  /*
    289          	for (uint16 lineNum = 0; lineNum < 8; lineNum++)
    290          	{
    291          		for (uint8 RowCtr = 0; RowCtr < 8; RowCtr++)
    292          		{
    293          			AB[lineNum][RowCtr] = A[lineNum][RowCtr];
    294          		}
    295          	}
    296          	for (uint8 ExRow_LineCtr = 0; ExRow_LineCtr<8; ExRow_LineCtr++)
    297          	{
    298          		AB[ExRow_LineCtr][8] = B[ExRow_LineCtr];
    299          	}
    300                  */
    301          	//========================================================================//
    302          	//以下为初等行变换 
    303          	uint8 Line_BeWithRowChange = 0;//AB矩阵的秩//非0，列变行变，列变行不变 
   \   00000048   0x2000             MOVS     R0,#+0
    304          	uint8 Row_Ctr = 0;//列计数 
   \   0000004A   0x2200             MOVS     R2,#+0
    305          	for (Row_Ctr = 0; Row_Ctr < 9; Row_Ctr++)//选取每列，目标就是消去此列所有元素或只剩下一个1//依赖行信息 
   \   0000004C   0x2300             MOVS     R3,#+0
   \   0000004E   0x001A             MOVS     R2,R3
   \   00000050   0xE001             B.N      ??b_solve8x8_Ax_b_4
    306          	{
    307          		//====================================================================//
    308          		//秩确认 
    309          		if (8 == Row_Ctr)//确认AB矩阵秩是否满秩 
    310          		{
    311          			if (8 == Line_BeWithRowChange)
    312          			{
    313          				//cout << "满秩" << endl;
    314          			}
    315          			else
    316          			{
    317          				//cout << "不满秩" <<endl;//return 'F';//非满秩 
    318                                          return 'F';
    319          			}
    320          			break;//满秩 
    321          		}
    322          		//====================================================================//
    323          		//求解方程组 
    324          		do//获取本行信息//换取全主元消去法 
    325          		{
    326          			//获取最大值信息 
    327          			uint8 Max_Num_Line_address = Line_BeWithRowChange;//认定此时数值最大
    328          			uint8 Max_Num_Row_address = Row_Ctr;
    329          			float Max_Num_Var = __F_ABS(AB[Line_BeWithRowChange][Row_Ctr]);//最大值 
    330          			for (uint8 Line_ForFindMax_loop = Max_Num_Line_address; Line_ForFindMax_loop < 8; Line_ForFindMax_loop++)
    331          			{
    332          				for (uint8 Row_ForFindMax_loop = Max_Num_Row_address; Row_ForFindMax_loop<8; Row_ForFindMax_loop++)
    333          				{
    334          					if ((__F_ABS(AB[Line_ForFindMax_loop][Row_ForFindMax_loop])) > Max_Num_Var)
    335          					{
    336          						Max_Num_Var = __F_ABS(AB[Line_ForFindMax_loop][Row_ForFindMax_loop]);//最大值赋值
    337          						Max_Num_Line_address = Line_ForFindMax_loop;//行赋值 
    338          						Max_Num_Row_address = Row_ForFindMax_loop;//列赋值 
    339          					}
    340          				}
    341          			}
    342          			//行列交换 
    343          			if ((0.0 != Max_Num_Var) && (Line_BeWithRowChange != Max_Num_Line_address) && (Row_Ctr != Max_Num_Row_address))//同列各行最大值确定非零 
    344          			{
    345          				//行变换
    346          				float lineRow_tempForChange = 0.0;
    347          				for (uint8 loop = 0; loop < 9; loop++)//行交换 
    348          				{
    349          					lineRow_tempForChange = AB[Line_BeWithRowChange][loop];
    350          					AB[Line_BeWithRowChange][loop] = AB[Max_Num_Line_address][loop];
    351          					AB[Max_Num_Line_address][loop] = lineRow_tempForChange;
    352          				}
    353          				//列变换 
    354          				for (uint8 loop = 0; loop < 8; loop++)
    355          				{
    356          					//列交换 
    357          					lineRow_tempForChange = AB[loop][Row_Ctr];
    358          					AB[loop][Row_Ctr] = AB[loop][Max_Num_Row_address];
    359          					AB[loop][Max_Num_Row_address] = lineRow_tempForChange;
    360          					//参数变换
    361          				}
    362          				uint8 changeFloatTemp = 0;
    363          				changeFloatTemp = Row_MainElementChange_Temp[Row_Ctr];//Row_Ctr有可能不等于 Row_MainElementChange_Temp[Row_Ctr]
    364          				Row_MainElementChange_Temp[Row_Ctr] = Row_MainElementChange_Temp[Max_Num_Row_address];
    365          				Row_MainElementChange_Temp[Max_Num_Row_address] = changeFloatTemp;
    366          			}
    367          		} while (0);
    368          		//
    369          		if (0.0 != AB[Line_BeWithRowChange][Row_Ctr])//本次元素是否为0
    370          		{
    371          			//本行以外信息 （下次从此更新）//行信息继承、列信息继承
    372          			float self_Line_GaiaNum = AB[Line_BeWithRowChange][Row_Ctr];//选取本行归一化数值
    373          			for (uint8 self_Line_RowCtr = Row_Ctr; self_Line_RowCtr < 9; self_Line_RowCtr++)
    374          			{
    375          				AB[Line_BeWithRowChange][self_Line_RowCtr] = AB[Line_BeWithRowChange][self_Line_RowCtr] / self_Line_GaiaNum;//本行归一化
    376          			}
    377          			for (uint8 Cal_Line_Ctr = Line_BeWithRowChange + 1; Cal_Line_Ctr < 8; Cal_Line_Ctr++)//行增广，列起始点与行同向
    378          			{
    379          				//主元素不为0，消去本行所有元素
    380          				//删除本行外其余行的数值
    381          				float Die_SammLikeGaiaLinesRow = AB[Cal_Line_Ctr][Row_Ctr] / AB[Line_BeWithRowChange][Row_Ctr];//获取消除增益
    382          				//cout << "Die_SammLikeGaiaLinesRow" << Die_SammLikeGaiaLinesRow << endl;//用于测试 
    383          				//*****************************************************************************//
    384          				for (uint8 ExLine_RowNumCtr = Row_Ctr; ExLine_RowNumCtr < 9; ExLine_RowNumCtr++)//从目标原始行开始，每行固定消去
    385          				{
    386          					AB[Cal_Line_Ctr][ExLine_RowNumCtr] = AB[Cal_Line_Ctr][ExLine_RowNumCtr] - //行固定，列增广
    387          						Die_SammLikeGaiaLinesRow * AB[Line_BeWithRowChange][ExLine_RowNumCtr];//
    388          					//参数描述
    389          				}//****************************************************************************//
    390          			}
    391          			Line_BeWithRowChange++;//与列变换同行 			
   \                     ??b_solve8x8_Ax_b_5: (+1)
   \   00000052   0x1C40             ADDS     R0,R0,#+1
   \                     ??b_solve8x8_Ax_b_6: (+1)
   \   00000054   0x1C52             ADDS     R2,R2,#+1
   \                     ??b_solve8x8_Ax_b_4: (+1)
   \   00000056   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000058   0x2A09             CMP      R2,#+9
   \   0000005A   0xDA07             BGE.N    ??b_solve8x8_Ax_b_7
   \   0000005C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000005E   0x2A08             CMP      R2,#+8
   \   00000060   0xD106             BNE.N    ??b_solve8x8_Ax_b_8
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x2808             CMP      R0,#+8
   \   00000066   0xD001             BEQ.N    ??b_solve8x8_Ax_b_9
   \   00000068   0x2046             MOVS     R0,#+70
   \   0000006A   0xE1ED             B.N      ??b_solve8x8_Ax_b_10
    392          		}//else//{//为0则忽略本次 //}
    393          	}//=======================================================================//
    394          	//回代计算//满秩时候可得最优解
    395          	/*
    396          	cout << endl;
    397          	for (uint8 loop = 0; loop < 8; loop++)
    398          	{
    399          		for (uint8 row_loop = 0; row_loop < 9; row_loop++)
    400          		{
    401          			cout << AB[loop][row_loop] << " ";
    402          		}
    403          		cout << endl;
    404          		cout << endl;
    405          		cout << endl;
    406          		//cout << X[Row_MainElementChange_Temp[loop]] << endl;//loop行所在信息即 Row_MainElementChange_Temp[loop]应存储信息 
    407          	}
    408          	*/
    409          
    410          	//cout << "秩" << (float)Line_BeWithRowChange << endl;
    411          	Line_BeWithRowChange -= 1;//秩为行秩，满秩的时候数值为8，故必须删去一个数值//求取秩所在的行坐标
   \                     ??b_solve8x8_Ax_b_9: (+1)
   \                     ??b_solve8x8_Ax_b_7: (+1)
   \   0000006C   0x1E40             SUBS     R0,R0,#+1
    412          	for (sint8 LineCtr_Cyclotron = Line_BeWithRowChange; LineCtr_Cyclotron >= 0; LineCtr_Cyclotron--)//从秩开始，逐步向上减去
   \   0000006E   0xE175             B.N      ??b_solve8x8_Ax_b_11
   \                     ??b_solve8x8_Ax_b_8: (+1)
   \   00000070   0x0004             MOVS     R4,R0
   \   00000072   0x0013             MOVS     R3,R2
   \   00000074   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x2524             MOVS     R5,#+36
   \   0000007A   0xAE02             ADD      R6,SP,#+8
   \   0000007C   0xFB05 0x6500      MLA      R5,R5,R0,R6
   \   00000080   0xEB15 0x0582      ADDS     R5,R5,R2, LSL #+2
   \   00000084   0xED95 0x0A00      VLDR     S0,[R5, #0]
   \   00000088   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   0000008C   0xEEF1 0xFA10      FMSTAT   
   \   00000090   0xD50C             BPL.N    ??b_solve8x8_Ax_b_12
   \   00000092   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x2524             MOVS     R5,#+36
   \   00000098   0xAE02             ADD      R6,SP,#+8
   \   0000009A   0xFB05 0x6500      MLA      R5,R5,R0,R6
   \   0000009E   0xEB15 0x0582      ADDS     R5,R5,R2, LSL #+2
   \   000000A2   0xED95 0x0A00      VLDR     S0,[R5, #0]
   \   000000A6   0xEEB1 0x0A40      VNEG.F32 S0,S0
   \   000000AA   0xE009             B.N      ??b_solve8x8_Ax_b_13
   \                     ??b_solve8x8_Ax_b_12: (+1)
   \   000000AC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B0   0x2524             MOVS     R5,#+36
   \   000000B2   0xAE02             ADD      R6,SP,#+8
   \   000000B4   0xFB05 0x6500      MLA      R5,R5,R0,R6
   \   000000B8   0xF855 0x5022      LDR      R5,[R5, R2, LSL #+2]
   \   000000BC   0xEE00 0x5A10      VMOV     S0,R5
   \                     ??b_solve8x8_Ax_b_13: (+1)
   \   000000C0   0x0025             MOVS     R5,R4
   \   000000C2   0xE000             B.N      ??b_solve8x8_Ax_b_14
   \                     ??b_solve8x8_Ax_b_15: (+1)
   \   000000C4   0x1C6D             ADDS     R5,R5,#+1
   \                     ??b_solve8x8_Ax_b_14: (+1)
   \   000000C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C8   0x2D08             CMP      R5,#+8
   \   000000CA   0xDA5B             BGE.N    ??b_solve8x8_Ax_b_16
   \   000000CC   0x001E             MOVS     R6,R3
   \   000000CE   0xE00C             B.N      ??b_solve8x8_Ax_b_17
   \                     ??b_solve8x8_Ax_b_18: (+1)
   \   000000D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D4   0x2324             MOVS     R3,#+36
   \   000000D6   0xAC02             ADD      R4,SP,#+8
   \   000000D8   0xFB03 0x4305      MLA      R3,R3,R5,R4
   \   000000DC   0xF853 0x3026      LDR      R3,[R3, R6, LSL #+2]
   \   000000E0   0xEE00 0x3A10      VMOV     S0,R3
   \                     ??b_solve8x8_Ax_b_19: (+1)
   \   000000E4   0x002C             MOVS     R4,R5
   \   000000E6   0x0033             MOVS     R3,R6
   \                     ??b_solve8x8_Ax_b_20: (+1)
   \   000000E8   0x1C76             ADDS     R6,R6,#+1
   \                     ??b_solve8x8_Ax_b_17: (+1)
   \   000000EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000EC   0x2E08             CMP      R6,#+8
   \   000000EE   0xDAE9             BGE.N    ??b_solve8x8_Ax_b_15
   \   000000F0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000F2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000F4   0x2724             MOVS     R7,#+36
   \   000000F6   0xF10D 0x0C08      ADD      R12,SP,#+8
   \   000000FA   0xFB07 0xC705      MLA      R7,R7,R5,R12
   \   000000FE   0xEB17 0x0786      ADDS     R7,R7,R6, LSL #+2
   \   00000102   0xEDD7 0x0A00      VLDR     S1,[R7, #0]
   \   00000106   0xEEF5 0x0A40      VCMP.F32 S1,#0.0
   \   0000010A   0xEEF1 0xFA10      FMSTAT   
   \   0000010E   0xD50D             BPL.N    ??b_solve8x8_Ax_b_21
   \   00000110   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000112   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000114   0x2724             MOVS     R7,#+36
   \   00000116   0xF10D 0x0C08      ADD      R12,SP,#+8
   \   0000011A   0xFB07 0xC705      MLA      R7,R7,R5,R12
   \   0000011E   0xEB17 0x0786      ADDS     R7,R7,R6, LSL #+2
   \   00000122   0xEDD7 0x0A00      VLDR     S1,[R7, #0]
   \   00000126   0xEEF1 0x0A60      VNEG.F32 S1,S1
   \   0000012A   0xE00A             B.N      ??b_solve8x8_Ax_b_22
   \                     ??b_solve8x8_Ax_b_21: (+1)
   \   0000012C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000012E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000130   0x2724             MOVS     R7,#+36
   \   00000132   0xF10D 0x0C08      ADD      R12,SP,#+8
   \   00000136   0xFB07 0xC705      MLA      R7,R7,R5,R12
   \   0000013A   0xF857 0x7026      LDR      R7,[R7, R6, LSL #+2]
   \   0000013E   0xEE00 0x7A90      VMOV     S1,R7
   \                     ??b_solve8x8_Ax_b_22: (+1)
   \   00000142   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000146   0xEEF1 0xFA10      FMSTAT   
   \   0000014A   0xD5CD             BPL.N    ??b_solve8x8_Ax_b_20
   \   0000014C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000014E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000150   0x2324             MOVS     R3,#+36
   \   00000152   0xAC02             ADD      R4,SP,#+8
   \   00000154   0xFB03 0x4305      MLA      R3,R3,R5,R4
   \   00000158   0xEB13 0x0386      ADDS     R3,R3,R6, LSL #+2
   \   0000015C   0xED93 0x0A00      VLDR     S0,[R3, #0]
   \   00000160   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00000164   0xEEF1 0xFA10      FMSTAT   
   \   00000168   0xD5B2             BPL.N    ??b_solve8x8_Ax_b_18
   \   0000016A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000016C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000016E   0x2324             MOVS     R3,#+36
   \   00000170   0xAC02             ADD      R4,SP,#+8
   \   00000172   0xFB03 0x4305      MLA      R3,R3,R5,R4
   \   00000176   0xEB13 0x0386      ADDS     R3,R3,R6, LSL #+2
   \   0000017A   0xED93 0x0A00      VLDR     S0,[R3, #0]
   \   0000017E   0xEEB1 0x0A40      VNEG.F32 S0,S0
   \   00000182   0xE7AF             B.N      ??b_solve8x8_Ax_b_19
   \                     ??b_solve8x8_Ax_b_16: (+1)
   \   00000184   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00000188   0xEEF1 0xFA10      FMSTAT   
   \   0000018C   0xD06C             BEQ.N    ??b_solve8x8_Ax_b_23
   \   0000018E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000190   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000192   0x42A0             CMP      R0,R4
   \   00000194   0xD068             BEQ.N    ??b_solve8x8_Ax_b_23
   \   00000196   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000198   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000019A   0x429A             CMP      R2,R3
   \   0000019C   0xD064             BEQ.N    ??b_solve8x8_Ax_b_23
   \   0000019E   0xED9F 0x....      VLDR.W   S0,??DataTable4  ;; 0x0
   \   000001A2   0x2500             MOVS     R5,#+0
   \   000001A4   0xE025             B.N      ??b_solve8x8_Ax_b_24
   \                     ??b_solve8x8_Ax_b_25: (+1)
   \   000001A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001AA   0x2624             MOVS     R6,#+36
   \   000001AC   0xAF02             ADD      R7,SP,#+8
   \   000001AE   0xFB06 0x7600      MLA      R6,R6,R0,R7
   \   000001B2   0xF856 0x6025      LDR      R6,[R6, R5, LSL #+2]
   \   000001B6   0xEE00 0x6A10      VMOV     S0,R6
   \   000001BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001BE   0x2624             MOVS     R6,#+36
   \   000001C0   0xAF02             ADD      R7,SP,#+8
   \   000001C2   0xFB06 0x7600      MLA      R6,R6,R0,R7
   \   000001C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001C8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001CA   0x2724             MOVS     R7,#+36
   \   000001CC   0xF10D 0x0C08      ADD      R12,SP,#+8
   \   000001D0   0xFB07 0xC704      MLA      R7,R7,R4,R12
   \   000001D4   0xF857 0x7025      LDR      R7,[R7, R5, LSL #+2]
   \   000001D8   0xF846 0x7025      STR      R7,[R6, R5, LSL #+2]
   \   000001DC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001E0   0x2624             MOVS     R6,#+36
   \   000001E2   0xAF02             ADD      R7,SP,#+8
   \   000001E4   0xFB06 0x7604      MLA      R6,R6,R4,R7
   \   000001E8   0xEB16 0x0685      ADDS     R6,R6,R5, LSL #+2
   \   000001EC   0xED86 0x0A00      VSTR     S0,[R6, #0]
   \   000001F0   0x1C6D             ADDS     R5,R5,#+1
   \                     ??b_solve8x8_Ax_b_24: (+1)
   \   000001F2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001F4   0x2D09             CMP      R5,#+9
   \   000001F6   0xDBD6             BLT.N    ??b_solve8x8_Ax_b_25
   \   000001F8   0x2400             MOVS     R4,#+0
   \   000001FA   0xE024             B.N      ??b_solve8x8_Ax_b_26
   \                     ??b_solve8x8_Ax_b_27: (+1)
   \   000001FC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001FE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000200   0x2524             MOVS     R5,#+36
   \   00000202   0xAE02             ADD      R6,SP,#+8
   \   00000204   0xFB05 0x6504      MLA      R5,R5,R4,R6
   \   00000208   0xF855 0x5022      LDR      R5,[R5, R2, LSL #+2]
   \   0000020C   0xEE00 0x5A10      VMOV     S0,R5
   \   00000210   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000212   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000214   0x2524             MOVS     R5,#+36
   \   00000216   0xAE02             ADD      R6,SP,#+8
   \   00000218   0xFB05 0x6504      MLA      R5,R5,R4,R6
   \   0000021C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000021E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000220   0x2624             MOVS     R6,#+36
   \   00000222   0xAF02             ADD      R7,SP,#+8
   \   00000224   0xFB06 0x7604      MLA      R6,R6,R4,R7
   \   00000228   0xF856 0x6023      LDR      R6,[R6, R3, LSL #+2]
   \   0000022C   0xF845 0x6022      STR      R6,[R5, R2, LSL #+2]
   \   00000230   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000232   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000234   0x2524             MOVS     R5,#+36
   \   00000236   0xAE02             ADD      R6,SP,#+8
   \   00000238   0xFB05 0x6504      MLA      R5,R5,R4,R6
   \   0000023C   0xEB15 0x0583      ADDS     R5,R5,R3, LSL #+2
   \   00000240   0xED85 0x0A00      VSTR     S0,[R5, #0]
   \   00000244   0x1C64             ADDS     R4,R4,#+1
   \                     ??b_solve8x8_Ax_b_26: (+1)
   \   00000246   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000248   0x2C08             CMP      R4,#+8
   \   0000024A   0xDBD7             BLT.N    ??b_solve8x8_Ax_b_27
   \   0000024C   0x2400             MOVS     R4,#+0
   \   0000024E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000250   0xAD00             ADD      R5,SP,#+0
   \   00000252   0x5D55             LDRB     R5,[R2, R5]
   \   00000254   0x002C             MOVS     R4,R5
   \   00000256   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000258   0xAD00             ADD      R5,SP,#+0
   \   0000025A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000025C   0xAE00             ADD      R6,SP,#+0
   \   0000025E   0x5D9E             LDRB     R6,[R3, R6]
   \   00000260   0x5556             STRB     R6,[R2, R5]
   \   00000262   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000264   0xAD00             ADD      R5,SP,#+0
   \   00000266   0x555C             STRB     R4,[R3, R5]
   \                     ??b_solve8x8_Ax_b_23: (+1)
   \   00000268   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000026A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000026C   0x2324             MOVS     R3,#+36
   \   0000026E   0xAC02             ADD      R4,SP,#+8
   \   00000270   0xFB03 0x4300      MLA      R3,R3,R0,R4
   \   00000274   0xEB13 0x0382      ADDS     R3,R3,R2, LSL #+2
   \   00000278   0xED93 0x0A00      VLDR     S0,[R3, #0]
   \   0000027C   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00000280   0xEEF1 0xFA10      FMSTAT   
   \   00000284   0xF43F 0xAEE6      BEQ.W    ??b_solve8x8_Ax_b_6
   \   00000288   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000028A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000028C   0x2324             MOVS     R3,#+36
   \   0000028E   0xAC02             ADD      R4,SP,#+8
   \   00000290   0xFB03 0x4300      MLA      R3,R3,R0,R4
   \   00000294   0xF853 0x3022      LDR      R3,[R3, R2, LSL #+2]
   \   00000298   0xEE00 0x3A10      VMOV     S0,R3
   \   0000029C   0x0013             MOVS     R3,R2
   \   0000029E   0xE016             B.N      ??b_solve8x8_Ax_b_28
   \                     ??b_solve8x8_Ax_b_29: (+1)
   \   000002A0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000002A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002A4   0x2424             MOVS     R4,#+36
   \   000002A6   0xAD02             ADD      R5,SP,#+8
   \   000002A8   0xFB04 0x5400      MLA      R4,R4,R0,R5
   \   000002AC   0xEB14 0x0483      ADDS     R4,R4,R3, LSL #+2
   \   000002B0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000002B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002B4   0x2524             MOVS     R5,#+36
   \   000002B6   0xAE02             ADD      R6,SP,#+8
   \   000002B8   0xFB05 0x6500      MLA      R5,R5,R0,R6
   \   000002BC   0xEB15 0x0583      ADDS     R5,R5,R3, LSL #+2
   \   000002C0   0xEDD5 0x0A00      VLDR     S1,[R5, #0]
   \   000002C4   0xEEC0 0x0A80      VDIV.F32 S1,S1,S0
   \   000002C8   0xEDC4 0x0A00      VSTR     S1,[R4, #0]
   \   000002CC   0x1C5B             ADDS     R3,R3,#+1
   \                     ??b_solve8x8_Ax_b_28: (+1)
   \   000002CE   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000002D0   0x2B09             CMP      R3,#+9
   \   000002D2   0xDBE5             BLT.N    ??b_solve8x8_Ax_b_29
   \   000002D4   0x1C43             ADDS     R3,R0,#+1
   \   000002D6   0xE024             B.N      ??b_solve8x8_Ax_b_30
   \                     ??b_solve8x8_Ax_b_31: (+1)
   \   000002D8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002DA   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000002DC   0x2524             MOVS     R5,#+36
   \   000002DE   0xAE02             ADD      R6,SP,#+8
   \   000002E0   0xFB05 0x6503      MLA      R5,R5,R3,R6
   \   000002E4   0xEB15 0x0584      ADDS     R5,R5,R4, LSL #+2
   \   000002E8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002EC   0x2624             MOVS     R6,#+36
   \   000002EE   0xAF02             ADD      R7,SP,#+8
   \   000002F0   0xFB06 0x7600      MLA      R6,R6,R0,R7
   \   000002F4   0xEB16 0x0684      ADDS     R6,R6,R4, LSL #+2
   \   000002F8   0xEDD6 0x0A00      VLDR     S1,[R6, #0]
   \   000002FC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002FE   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000300   0x2624             MOVS     R6,#+36
   \   00000302   0xAF02             ADD      R7,SP,#+8
   \   00000304   0xFB06 0x7603      MLA      R6,R6,R3,R7
   \   00000308   0xEB16 0x0684      ADDS     R6,R6,R4, LSL #+2
   \   0000030C   0xED96 0x1A00      VLDR     S2,[R6, #0]
   \   00000310   0xEE00 0x1A60      VMLS.F32 S2,S0,S1
   \   00000314   0xED85 0x1A00      VSTR     S2,[R5, #0]
   \   00000318   0x1C64             ADDS     R4,R4,#+1
   \                     ??b_solve8x8_Ax_b_32: (+1)
   \   0000031A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000031C   0x2C09             CMP      R4,#+9
   \   0000031E   0xDBDB             BLT.N    ??b_solve8x8_Ax_b_31
   \   00000320   0x1C5B             ADDS     R3,R3,#+1
   \                     ??b_solve8x8_Ax_b_30: (+1)
   \   00000322   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000324   0x2B08             CMP      R3,#+8
   \   00000326   0xF6BF 0xAE94      BGE.W    ??b_solve8x8_Ax_b_5
   \   0000032A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000032C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000032E   0x2424             MOVS     R4,#+36
   \   00000330   0xAD02             ADD      R5,SP,#+8
   \   00000332   0xFB04 0x5403      MLA      R4,R4,R3,R5
   \   00000336   0xEB14 0x0482      ADDS     R4,R4,R2, LSL #+2
   \   0000033A   0xED94 0x0A00      VLDR     S0,[R4, #0]
   \   0000033E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000340   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000342   0x2424             MOVS     R4,#+36
   \   00000344   0xAD02             ADD      R5,SP,#+8
   \   00000346   0xFB04 0x5400      MLA      R4,R4,R0,R5
   \   0000034A   0xEB14 0x0482      ADDS     R4,R4,R2, LSL #+2
   \   0000034E   0xEDD4 0x0A00      VLDR     S1,[R4, #0]
   \   00000352   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000356   0x0014             MOVS     R4,R2
   \   00000358   0xE7DF             B.N      ??b_solve8x8_Ax_b_32
   \                     ??b_solve8x8_Ax_b_33: (+1)
   \   0000035A   0x1E40             SUBS     R0,R0,#+1
   \                     ??b_solve8x8_Ax_b_11: (+1)
   \   0000035C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000035E   0x2800             CMP      R0,#+0
   \   00000360   0xD460             BMI.N    ??b_solve8x8_Ax_b_34
    413          	{
    414          		//break;
    415          		uint8 LineMaxFinder_UpperNum = 8;//总共选有行//计数用//可以将每行起始位置赋值给此数，不过这样就要求这个得跳出这个循环
   \   00000362   0x2308             MOVS     R3,#+8
    416          		uint8 EachLine_StarRowNum = 0;//初始化失误：Line_BeWithRowChange - 1;2015.2.8
   \   00000364   0x2200             MOVS     R2,#+0
   \   00000366   0xE001             B.N      ??b_solve8x8_Ax_b_35
    417          		while (LineMaxFinder_UpperNum)//获取所在行的纵坐标//满秩时将不服从主阵
    418          		{
    419          			if (0.0 != AB[LineCtr_Cyclotron][EachLine_StarRowNum])//此步为的是获取需要减去行的首有数值的数据 
    420          			{
    421          				break;
    422          			}
    423          			EachLine_StarRowNum++;
   \                     ??b_solve8x8_Ax_b_36: (+1)
   \   00000368   0x1C52             ADDS     R2,R2,#+1
    424          			LineMaxFinder_UpperNum--;
   \   0000036A   0x1E5B             SUBS     R3,R3,#+1
   \                     ??b_solve8x8_Ax_b_35: (+1)
   \   0000036C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000036E   0x2B00             CMP      R3,#+0
   \   00000370   0xD00E             BEQ.N    ??b_solve8x8_Ax_b_37
   \   00000372   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000374   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000376   0x2424             MOVS     R4,#+36
   \   00000378   0xAD02             ADD      R5,SP,#+8
   \   0000037A   0xFB10 0x5404      SMLABB   R4,R0,R4,R5
   \   0000037E   0xEB14 0x0482      ADDS     R4,R4,R2, LSL #+2
   \   00000382   0xED94 0x0A00      VLDR     S0,[R4, #0]
   \   00000386   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   0000038A   0xEEF1 0xFA10      FMSTAT   
   \   0000038E   0xD0EB             BEQ.N    ??b_solve8x8_Ax_b_36
    425          		}
    426          		//cout <<"EachLine_StarRowNum"<<(float)EachLine_StarRowNum<<endl;//测试用 
    427          		//cout << "LineMaxFinder_UpperNum" <<(float)LineMaxFinder_UpperNum<<endl;
    428          		if (0 != LineMaxFinder_UpperNum)//为搜寻到最后一行
   \                     ??b_solve8x8_Ax_b_37: (+1)
   \   00000390   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000392   0x2B00             CMP      R3,#+0
   \   00000394   0xD0E1             BEQ.N    ??b_solve8x8_Ax_b_33
    429          		{
    430          			//EachLine_StarRowNum为本行起始位置
    431          			//先行减，后移动列
    432          			for (uint8 Line_Ctr = 0; Line_Ctr < LineCtr_Cyclotron; Line_Ctr++)//从RowCtr到LineCtr_Cyclotron所在行
   \   00000396   0x2300             MOVS     R3,#+0
   \   00000398   0xE024             B.N      ??b_solve8x8_Ax_b_38
    433          			{
    434          				float Die_ForLine = AB[Line_Ctr][EachLine_StarRowNum] / AB[LineCtr_Cyclotron][EachLine_StarRowNum];//先求取截去增益
    435          
    436          				//cout << "Die_ForLine" << Die_ForLine <<endl;
    437          				for (uint8 RowCtr_ForChace = EachLine_StarRowNum; RowCtr_ForChace < 9; RowCtr_ForChace++)//为回代计数
    438          				{
    439          					AB[Line_Ctr][RowCtr_ForChace] = AB[Line_Ctr][RowCtr_ForChace] - Die_ForLine * AB[LineCtr_Cyclotron][RowCtr_ForChace];
   \                     ??b_solve8x8_Ax_b_39: (+1)
   \   0000039A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000039C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000039E   0x2524             MOVS     R5,#+36
   \   000003A0   0xAE02             ADD      R6,SP,#+8
   \   000003A2   0xFB05 0x6503      MLA      R5,R5,R3,R6
   \   000003A6   0xEB15 0x0584      ADDS     R5,R5,R4, LSL #+2
   \   000003AA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003AC   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   000003AE   0x2624             MOVS     R6,#+36
   \   000003B0   0xAF02             ADD      R7,SP,#+8
   \   000003B2   0xFB10 0x7606      SMLABB   R6,R0,R6,R7
   \   000003B6   0xEB16 0x0684      ADDS     R6,R6,R4, LSL #+2
   \   000003BA   0xEDD6 0x0A00      VLDR     S1,[R6, #0]
   \   000003BE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003C0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000003C2   0x2624             MOVS     R6,#+36
   \   000003C4   0xAF02             ADD      R7,SP,#+8
   \   000003C6   0xFB06 0x7603      MLA      R6,R6,R3,R7
   \   000003CA   0xEB16 0x0684      ADDS     R6,R6,R4, LSL #+2
   \   000003CE   0xED96 0x1A00      VLDR     S2,[R6, #0]
   \   000003D2   0xEE00 0x1A60      VMLS.F32 S2,S0,S1
   \   000003D6   0xED85 0x1A00      VSTR     S2,[R5, #0]
    440          				}
   \   000003DA   0x1C64             ADDS     R4,R4,#+1
   \                     ??b_solve8x8_Ax_b_40: (+1)
   \   000003DC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003DE   0x2C09             CMP      R4,#+9
   \   000003E0   0xDBDB             BLT.N    ??b_solve8x8_Ax_b_39
   \   000003E2   0x1C5B             ADDS     R3,R3,#+1
   \                     ??b_solve8x8_Ax_b_38: (+1)
   \   000003E4   0x001C             MOVS     R4,R3
   \   000003E6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003E8   0x0005             MOVS     R5,R0
   \   000003EA   0xB26D             SXTB     R5,R5            ;; SignExt  R5,R5,#+24,#+24
   \   000003EC   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000003EE   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   000003F0   0x42AC             CMP      R4,R5
   \   000003F2   0xDAB2             BGE.N    ??b_solve8x8_Ax_b_33
   \   000003F4   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003F6   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000003F8   0x2424             MOVS     R4,#+36
   \   000003FA   0xAD02             ADD      R5,SP,#+8
   \   000003FC   0xFB04 0x5403      MLA      R4,R4,R3,R5
   \   00000400   0xEB14 0x0482      ADDS     R4,R4,R2, LSL #+2
   \   00000404   0xED94 0x0A00      VLDR     S0,[R4, #0]
   \   00000408   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000040A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000040C   0x2424             MOVS     R4,#+36
   \   0000040E   0xAD02             ADD      R5,SP,#+8
   \   00000410   0xFB10 0x5404      SMLABB   R4,R0,R4,R5
   \   00000414   0xEB14 0x0482      ADDS     R4,R4,R2, LSL #+2
   \   00000418   0xEDD4 0x0A00      VLDR     S1,[R4, #0]
   \   0000041C   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000420   0x0014             MOVS     R4,R2
   \   00000422   0xE7DB             B.N      ??b_solve8x8_Ax_b_40
    441          			}
    442          		}
    443          	}
    444          	//========================================================================//
    445          	//存入X中 => 最后的元素 
    446          	for (uint8 loop = 0; loop < 8; loop++)
   \                     ??b_solve8x8_Ax_b_34: (+1)
   \   00000424   0x2000             MOVS     R0,#+0
   \   00000426   0xE00B             B.N      ??b_solve8x8_Ax_b_41
    447          	{
    448          		X[Row_MainElementChange_Temp[loop]] = AB[loop][8];//loop行所在信息即 Row_MainElementChange_Temp[loop]应存储信息 
   \                     ??b_solve8x8_Ax_b_42: (+1)
   \   00000428   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000042A   0xAA00             ADD      R2,SP,#+0
   \   0000042C   0x5C82             LDRB     R2,[R0, R2]
   \   0000042E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000430   0x2324             MOVS     R3,#+36
   \   00000432   0xAC02             ADD      R4,SP,#+8
   \   00000434   0xFB03 0x4300      MLA      R3,R3,R0,R4
   \   00000438   0x6A1B             LDR      R3,[R3, #+32]
   \   0000043A   0xF841 0x3022      STR      R3,[R1, R2, LSL #+2]
    449          	}
   \   0000043E   0x1C40             ADDS     R0,R0,#+1
   \                     ??b_solve8x8_Ax_b_41: (+1)
   \   00000440   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000442   0x2808             CMP      R0,#+8
   \   00000444   0xDBF0             BLT.N    ??b_solve8x8_Ax_b_42
    450          	//Line_BeWithRowChange => 行秩 
    451          	/*
    452          	cout << endl;
    453          	for (uint8 loop = 0; loop < 8; loop++)
    454          	{
    455          		for (uint8 row_loop = 0; row_loop < 9; row_loop++)
    456          		{
    457          			cout << AB[loop][row_loop] << " ";
    458          		}
    459          		cout << endl;
    460          		cout << endl;
    461          		cout << endl;
    462          		//cout << X[Row_MainElementChange_Temp[loop]] << endl;//loop行所在信息即 Row_MainElementChange_Temp[loop]应存储信息 
    463          	}
    464          	*/
    465          
    466          	return 'T';
   \   00000446   0x2054             MOVS     R0,#+84
   \                     ??b_solve8x8_Ax_b_10: (+1)
   \   00000448   0xB04A             ADD      SP,SP,#+296
   \   0000044A   0xBCF0             POP      {R4-R7}
   \   0000044C   0x4770             BX       LR               ;; return
    467          }
    468          
    469          
    470          //============================================================================//
    471          //载入控制参数

   \                                 In section .text, align 2, keep-with-next
    472          void v_LoadingControlPara(s_Control* temp_Control,s_ImageAbstract* ImageAbstract)
    473          {//标定摄像头
    474              temp_Control->image_ratio[0] = 0.208748;//0.201252;//0.197369;//0.204188;//0.208997;//0.197502;//0.208333;//0.211618;//0.210896;//0.219466;//0.208334;//0.205882;//0.197133;//0.199867;//0.203863;//0.196078;//0.211268;//0.21544;//0.214521;
   \                     v_LoadingControlPara: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable4_9  ;; 0x3e55c209
   \   00000002   0x6442             STR      R2,[R0, #+68]
    475              temp_Control->image_ratio[1] = -0.28492;//-0.330947;//-0.346889;//-0.319372;//-0.322453;//-0.28698;//-0.347223;//-0.342706;//-0.368956;//-0.353542;//-0.359477;//-0.388292;//-0.339773;//-0.321889;//-0.372046;//-0.352113;//-0.314186;//-0.313531;
   \   00000004   0x....             LDR.N    R2,??DataTable4_10  ;; 0xbe91e109
   \   00000006   0x6482             STR      R2,[R0, #+72]
    476              temp_Control->image_ratio[2] = 4.49617;//7.18246;//7.02152;//5.69634;//7.00238;//6.60703;//6.66668;//6.15114;//6.85113;//7.229797;//8.11765;//8.04659;//7.80144;//6.65236;//7.45099;//5.98592;//4.9641;//6.10561;
   \   00000008   0x....             LDR.N    R2,??DataTable4_11  ;; 0x408fe0a0
   \   0000000A   0x64C2             STR      R2,[R0, #+76]
    477              temp_Control->image_ratio[3] = 1.49012e-08;//-1.49012e-08;//8.9407e-08;//-2.98023e-8;//0;//5.96046e-08;//2.98023e-08;//-1.49012e-08;//0;//4.47035e-08;//9.9407e-08;//2.98023e-08;//-2.98023e-08;//5.96046e-08;//-4.47035e-08;//-1.49012e-08;//-1.04308e-07;//1.49012e-8;
   \   0000000C   0x....             LDR.N    R2,??DataTable4_12  ;; 0x32800016
   \   0000000E   0x6502             STR      R2,[R0, #+80]
    478              temp_Control->image_ratio[4] = 0.548993;//0.299642;//0.460528;//0.418847;//0.286626;//0.259964;//0.3373;//0.303164;//0.470739;//0.34091;//0.48366;//0.382318;//0.499667;//0.515022;//0.351936;//0.598591;//0.399462;//0.41254;
   \   00000010   0x....             LDR.N    R2,??DataTable4_13  ;; 0x3f0c8ace
   \   00000012   0x6542             STR      R2,[R0, #+84]
    479              temp_Control->image_ratio[5] = -8.01251;//3.98927;//-2.43424;//2.30367;//8.32802;//9.61512;//4.28573;//8.20738;//0.839639;//9.5202;//-1.29413;//0.860222;//-3.43105;//-7.38198;//3.52942;//-9.96478;//8.4246;//-6.23711;//2.37625;
   \   00000014   0x....             LDR.N    R2,??DataTable4_14  ;; 0xc100333e
   \   00000016   0x6582             STR      R2,[R0, #+88]
    480              temp_Control->image_ratio[6] = -5.82077e-10;//4.07454e-10;//4.42378e-09;//-1.5134e-9;//5.82077e-11;//7.85803e-10;//-1.86265e-09;//-1.01863e-09;//2.32831e-09;//2.46291e-09;//5.82077e-10;//5.82077e-10;//-5.82077e-10;//2.32831e-10;//-2.79397e-09;//1.16415e-09;//-5.19503e-09;//1.28057e-9;
   \   00000018   0x....             LDR.N    R2,??DataTable4_15  ;; 0xb0200007
   \   0000001A   0x65C2             STR      R2,[R0, #+92]
    481              temp_Control->image_ratio[7] = -0.0118138;//-0.0129696;//-0.0131579;//-0.013089;//-0.0131369;//-0.0124914;//-0.0138889;//-0.0144991;//-0.0139949;//-0.0138889;//-0.0143791;//-0.0155317;//-0.0139907;//-0.0128755;//-0.0145802;//-0.0140845;//-0.0125673;//-0.0132013;
   \   0000001C   0x....             LDR.N    R2,??DataTable4_16  ;; 0xbc418eab
   \   0000001E   0x6602             STR      R2,[R0, #+96]
    482              
    483              ImageAbstract->LastFrame_CentralPos = 185/2;
   \   00000020   0x205C             MOVS     R0,#+92
   \   00000022   0xF881 0x01D4      STRB     R0,[R1, #+468]
    484          }
   \   00000026   0x4770             BX       LR               ;; return
    485          //uint8 x_Jumpread = 0;
    486          //uint8 viewer_car[60];

   \                                 In section .text, align 4, keep-with-next
    487          void v_ImageCut()//图像信息处理//selfjudge_SendMessage=>
    488          {
   \                     v_ImageCut: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0xB0B4             SUB      SP,SP,#+208
    489             // uint8 mayBeRampHappened = 0;
    490              
    491              uint8 LonlyLineCounter = 0;//更名以便于更改代码
   \   0000000A   0x2200             MOVS     R2,#+0
    492              
    493              uint8 TurnOnTheLonlyLine = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF88D 0x0023      STRB     R0,[SP, #+35]
    494              
    495              uint8 SideChangeOccur = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF88D 0x000D      STRB     R0,[SP, #+13]
    496              
    497              uint8 FindLitteWidthTurning = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF88D 0x0022      STRB     R0,[SP, #+34]
    498              uint8 TurningBeacauseVeryLittle__isHappened = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
    499              /*
    500              for(uint8 loop = 0;loop < 60;loop++)
    501              {
    502                  m_ImageTesting.Left_Side[loop] = 255;
    503                  m_ImageTesting.Right_Side[loop] = 255;
    504              }
    505              */
    506              uint8 showLonlyLineFindAboutUpSet = '.';
   \   00000020   0x212E             MOVS     R1,#+46
   \   00000022   0xF88D 0x1021      STRB     R1,[SP, #+33]
    507              uint8 becauseThisOutOfTheBlackRtAngle = '.';
   \   00000026   0x212E             MOVS     R1,#+46
   \   00000028   0xF88D 0x100E      STRB     R1,[SP, #+14]
    508              uint8 showBlackCutBar = ' ';
   \   0000002C   0x2120             MOVS     R1,#+32
   \   0000002E   0xF88D 0x102E      STRB     R1,[SP, #+46]
    509              //uint8 show_BuzzerInfor = ' ';
    510              uint8 show_About_RtAngle = ' ';
   \   00000032   0xF05F 0x0B20      MOVS     R11,#+32
    511              uint8 show_About_LonlyLine = ' ';
   \   00000036   0x2720             MOVS     R7,#+32
    512              uint8 show_isWrong = ' ';
   \   00000038   0x2120             MOVS     R1,#+32
   \   0000003A   0xF88D 0x100C      STRB     R1,[SP, #+12]
    513              uint8 showYcutDown = 's';
   \   0000003E   0x2173             MOVS     R1,#+115
   \   00000040   0xF88D 0x1014      STRB     R1,[SP, #+20]
    514              uint8 isOccurCross = 0;
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0xF88D 0x1020      STRB     R1,[SP, #+32]
    515              //uint8 firstAbout_ShutDownBackAbout_BlackLine = 0;
    516              //常数设置
    517              uint8 isHaveLonlyLineStartCorner = 0;
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0xF88D 0x100F      STRB     R1,[SP, #+15]
    518              uint8 HaveLonlyLineStartCornerLastLine = 255;
   \   00000050   0x21FF             MOVS     R1,#+255
   \   00000052   0xF88D 0x1015      STRB     R1,[SP, #+21]
    519              
    520              const uint16 constNum_X_MaxCounter = 184;//=>消除最后一个零点情况
   \   00000056   0x21B8             MOVS     R1,#+184
   \   00000058   0xF8AD 0x1016      STRH     R1,[SP, #+22]
    521              const uint16 constNum_Line_MaxCounter = 60;//
   \   0000005C   0x213C             MOVS     R1,#+60
    522              const uint16 constn_xFindJumpLine_Width = 3;//横向跨线//固定值
   \   0000005E   0x2403             MOVS     R4,#+3
    523              const uint8  constn_DeadLine_BeWith = 3;
   \   00000060   0x2303             MOVS     R3,#+3
   \   00000062   0xF88D 0x3009      STRB     R3,[SP, #+9]
    524              //========================================================================//
    525              //
    526              /*
    527              typedef
    528              struct
    529              {
    530                  uint8 y_start;
    531                  uint8 
    532              }s_BlackBarFindSecond;
    533              s_BlackBarFindSecond BlackBarFindSecond;
    534              */
    535              struct ___vaild_heightInterval//高度的最佳有效区域
    536              {
    537          	uint8 n_lastEnd_Y;// = m_height;//最终的Y数值 => 可以由绝对宽度定 => 但可以由break跳出循环结束
    538          	uint8 n_firstStart_Y;// = 0;//初始值
    539              }vaild_heightInterval;
    540              vaild_heightInterval.n_firstStart_Y = 0;
   \   00000066   0x2300             MOVS     R3,#+0
   \   00000068   0xF88D 0x3035      STRB     R3,[SP, #+53]
    541              vaild_heightInterval.n_lastEnd_Y = constNum_Line_MaxCounter;//
   \   0000006C   0x000B             MOVS     R3,R1
   \   0000006E   0xF88D 0x3034      STRB     R3,[SP, #+52]
    542              
    543              typedef 
    544              struct//图像绝对数据框架
    545              {
    546          	float f_width_ratio[2];//宽度变化率
    547          	float f_depth_ratio[5];//向前等量宽度对应的长度信息=>除以15即当前的纵向情况
    548              }s_Frame_Trk;
    549              s_Frame_Trk Frame_Trk;
    550              do//框架赋值//认定30为标准框架
    551              {
    552          	float a = m_Control.image_ratio[0];//float b = m_Control.image_ratio[1];//float c = m_Control.image_ratio[2];
   \   00000072   0xF8DF 0x3C98      LDR.W    R3,??v_ImageCut_0
   \   00000076   0xED93 0x0A11      VLDR     S0,[R3, #+68]
    553          	float e = m_Control.image_ratio[4];//float d = m_Control.image_ratio[3];
   \   0000007A   0xF8DF 0x3C90      LDR.W    R3,??v_ImageCut_0
   \   0000007E   0xEDD3 0x0A15      VLDR     S1,[R3, #+84]
    554          	float f = m_Control.image_ratio[5];//float g = m_Control.image_ratio[6];
   \   00000082   0xF8DF 0x3C88      LDR.W    R3,??v_ImageCut_0
   \   00000086   0xED93 0x1A16      VLDR     S2,[R3, #+88]
    555          	float h = m_Control.image_ratio[7];
   \   0000008A   0xF8DF 0x3C80      LDR.W    R3,??v_ImageCut_0
   \   0000008E   0xEDD3 0x1A18      VLDR     S3,[R3, #+96]
    556          	Frame_Trk.f_width_ratio[1] = 30.f * h / a;//float f_width_ratio[2];//x = (30*h/a)*y + 30/a//绝对宽度系数
   \   00000092   0xEEB3 0x2A0E      VMOV.F32 S4,#30.0
   \   00000096   0xEE21 0x2A82      VMUL.F32 S4,S3,S4
   \   0000009A   0xEE82 0x2A00      VDIV.F32 S4,S4,S0
   \   0000009E   0xED8D 0x2A10      VSTR     S4,[SP, #+64]
    557          	Frame_Trk.f_width_ratio[0] = 30.f / a;
   \   000000A2   0xEEB3 0x2A0E      VMOV.F32 S4,#30.0
   \   000000A6   0xEE82 0x0A00      VDIV.F32 S0,S4,S0
   \   000000AA   0xED8D 0x0A0F      VSTR     S0,[SP, #+60]
    558          
    559          	Frame_Trk.f_depth_ratio[0] = -30.f * h * h;//y*y
   \   000000AE   0xEEBB 0x0A0E      VMOV.F32 S0,#-30.0
   \   000000B2   0xEE21 0x0A80      VMUL.F32 S0,S3,S0
   \   000000B6   0xEE20 0x0A21      VMUL.F32 S0,S0,S3
   \   000000BA   0xED8D 0x0A11      VSTR     S0,[SP, #+68]
    560          	Frame_Trk.f_depth_ratio[1] = -60.f * h;//y
   \   000000BE   0xED9F 0x0A5D      VLDR.W   S0,??v_ImageCut_1  ;; 0xc2700000
   \   000000C2   0xEE21 0x0A80      VMUL.F32 S0,S3,S0
   \   000000C6   0xED8D 0x0A12      VSTR     S0,[SP, #+72]
    561          	Frame_Trk.f_depth_ratio[2] = -30.f;//1
   \   000000CA   0xF8DF 0x3C44      LDR.W    R3,??v_ImageCut_0+0x4  ;; 0xc1f00000
   \   000000CE   0x9313             STR      R3,[SP, #+76]
    562          
    563          	Frame_Trk.f_depth_ratio[3] = 30.f * h * h;//y
   \   000000D0   0xEEB3 0x0A0E      VMOV.F32 S0,#30.0
   \   000000D4   0xEE21 0x0A80      VMUL.F32 S0,S3,S0
   \   000000D8   0xEE20 0x0A21      VMUL.F32 S0,S0,S3
   \   000000DC   0xED8D 0x0A14      VSTR     S0,[SP, #+80]
    564          	Frame_Trk.f_depth_ratio[4] = (30.f + f)*h - e;//1
   \   000000E0   0xEEB3 0x0A0E      VMOV.F32 S0,#30.0
   \   000000E4   0xEE31 0x0A00      VADD.F32 S0,S2,S0
   \   000000E8   0xEE20 0x0A21      VMUL.F32 S0,S0,S3
   \   000000EC   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   000000F0   0xED8D 0x0A15      VSTR     S0,[SP, #+84]
    565          
    566          #define GetYaxis(Y)                     ((m_Control.image_ratio[4]*Y+m_Control.image_ratio[5])/(m_Control.image_ratio[7]*Y+1))
    567          
    568          #define GetWidthFromY(Y)                (Frame_Trk.f_depth_ratio[0]*y*y+\
    569                                                   Frame_Trk.f_depth_ratio[1]*y+\
    570                                                   Frame_Trk.f_depth_ratio[2])
    571                  
    572          #define Get45cmLengthFromY(y)        (Frame_Trk.f_depth_ratio[0]*y*y\
    573                                               +Frame_Trk.f_depth_ratio[1]*y\
    574                                               +Frame_Trk.f_depth_ratio[2])/\
    575                                               (Frame_Trk.f_depth_ratio[3]*y\
    576                                               +Frame_Trk.f_depth_ratio[4])
    577                  
    578              } while (0);
    579              //========================================================================//
    580              uint16 perLine_vaild_width = constNum_X_MaxCounter;// - 1;//185-1//一行有效宽度 => 184
   \   000000F4   0xF8BD 0x3016      LDRH     R3,[SP, #+22]
   \   000000F8   0xF8AD 0x302C      STRH     R3,[SP, #+44]
    581              //========================================================================//
    582              //sint16 lostDouble_UpestHeight = 0;//丢双边计数最大值
    583              uint8 lostDouble_TimerCounter = 0;//双边计时器
   \   000000FC   0x2300             MOVS     R3,#+0
   \   000000FE   0xF88D 0x3008      STRB     R3,[SP, #+8]
    584              uint8 lostDouble_UpestHeight = 255;
   \   00000102   0x23FF             MOVS     R3,#+255
   \   00000104   0xF88D 0x300B      STRB     R3,[SP, #+11]
    585              //uint8 lostDouble_AllCounter = 0;
    586              
    587              typedef
    588              enum
    589              {
    590                  LDb_WaitingDrawing,
    591                  LDb_None,
    592              }u_LostDoubleFlag;
    593              typedef
    594              struct
    595              {
    596                  u_LostDoubleFlag Flag;// = 0;
    597                  uint8 Gaia_X;// = 0;
    598                  uint8 Gaia_Y;// = 0;
    599              }s_LostDouble;//绘制丢失双边 => 最主要用的地方在十字
    600              s_LostDouble LostDouble;
    601              LostDouble.Flag = LDb_None;
   \   00000108   0x2301             MOVS     R3,#+1
   \   0000010A   0xF88D 0x3028      STRB     R3,[SP, #+40]
    602              LostDouble.Gaia_X = 0;
   \   0000010E   0x2300             MOVS     R3,#+0
   \   00000110   0xF88D 0x3029      STRB     R3,[SP, #+41]
    603              LostDouble.Gaia_Y = 0;
   \   00000114   0x2300             MOVS     R3,#+0
   \   00000116   0xF88D 0x302A      STRB     R3,[SP, #+42]
    604              
    605              /*
    606              typedef
    607              struct
    608              {
    609                  uint8 startLine;
    610                  uint8 LastWidthVar;
    611                  //uint8 LostDoubleTimer;
    612                  uint8 LastWitdh_YaxisVal;
    613                  u_Side TurnSide;
    614              }s_BlackBarAbout10cm;
    615              s_BlackBarAbout10cm BlackBarAbout10cm;
    616              BlackBarAbout10cm.startLine = 255;
    617              BlackBarAbout10cm.LastWidthVar = 255;
    618              BlackBarAbout10cm.LastWitdh_YaxisVal = 255;
    619              */
    620              //BlackBarAbout10cm.LostDoubleTimer = 0;
    621          
    622          
    623          
    624              /* //以下为基本流程
    625               * 持续 是 => 进行特殊寻线
    626               *      否 => 寻找是否满足直角条件
    627               * ------------------------------------------------------------------- *
    628               *
    629               */    
    630              uint16 x_startPos = m_ImageAbstract.LastFrame_CentralPos;//x轴起始位置，取值范围为0 - m_width//即中线所在位置
   \   0000011A   0xF8DF 0x3BF8      LDR.W    R3,??v_ImageCut_0+0x8
   \   0000011E   0xF893 0x61D4      LDRB     R6,[R3, #+468]
    631              sint16 x_startPos_n_add_one = m_ImageAbstract.LastFrame_CentralPos;//x(n+1)
   \   00000122   0xF8DF 0x3BF0      LDR.W    R3,??v_ImageCut_0+0x8
   \   00000126   0xF893 0x51D4      LDRB     R5,[R3, #+468]
    632              //========================================================================//
    633              //========================================================================//
    634              //由跳变决定的边沿位置
    635              typedef
    636              struct//边沿数据情况
    637              {
    638          	uint8 n_right_end;//Right截止下降沿
    639          	uint8 n_left_end;//Left截止下降沿
    640          	uint8 n_right_banDone;//Right侧出现上升沿
    641          	uint8 n_left_banDone;//Left侧出现上升沿
    642                  uint8 n_left_banDone_firstLine;
    643                  uint8 n_right_banDone_firstLine;
    644              }s_number_Trk;//赛道数据信息
    645              s_number_Trk number_Trk;//数值信号//以下一行为初始化
    646              number_Trk.n_left_banDone = 0;number_Trk.n_right_banDone = 0;number_Trk.n_left_end = 0;number_Trk.n_right_end = 0;
   \   0000012A   0x2300             MOVS     R3,#+0
   \   0000012C   0xF88D 0x301B      STRB     R3,[SP, #+27]
   \   00000130   0x2300             MOVS     R3,#+0
   \   00000132   0xF88D 0x301A      STRB     R3,[SP, #+26]
   \   00000136   0x2300             MOVS     R3,#+0
   \   00000138   0xF88D 0x3019      STRB     R3,[SP, #+25]
   \   0000013C   0x2300             MOVS     R3,#+0
   \   0000013E   0xF88D 0x3018      STRB     R3,[SP, #+24]
    647              //========================================================================//
    648          
    649              typedef
    650              struct
    651              {
    652                  uint8 Last_BlackLine_suddenlyHappen;//最近一次黑色行计数
    653                  /*uint8 LastBlackLine_add_15cm_Line;//15cm开外的X的位置
    654                  float LastBlackLine_add_15cm_LeftRow;//15cm开外的Y的位置
    655                  float LastBlackLine_add_15cm_RightRow;//15cm开外的Y的位置*/
    656                  uint8 LastBlackLine_RowSideWhich;
    657                  uint8 AllBeforeisBlack;
    658                  uint8 hasHappened_Once;
    659              }s_LastSide;//最后边
    660              s_LastSide LastSide;//最后一边
    661              //LastSide.now_color = color_NaN;
    662              LastSide.Last_BlackLine_suddenlyHappen = 255;//最后一次黑
   \   00000142   0x23FF             MOVS     R3,#+255
   \   00000144   0xF88D 0x3030      STRB     R3,[SP, #+48]
    663              LastSide.AllBeforeisBlack = 0;
   \   00000148   0x2300             MOVS     R3,#+0
   \   0000014A   0xF88D 0x3032      STRB     R3,[SP, #+50]
    664              LastSide.hasHappened_Once = 0;
   \   0000014E   0x2300             MOVS     R3,#+0
   \   00000150   0xF88D 0x3033      STRB     R3,[SP, #+51]
    665              //========================================================================//
    666              typedef
    667              struct
    668              {
    669          	uint8 leftSide_isDown;//是否有效边沿
    670          	uint8 rightSide_isDown;
    671                  
    672          	uint8 leftSide_isUp;//上升沿是否存在
    673          	uint8 rightSide_isUp;
    674              }s_LogicCondition;//逻辑信号结构体
    675              s_LogicCondition LogicCondition;//逻辑信息存在//以下一行为逻辑判定
    676              LogicCondition.leftSide_isDown = 0;LogicCondition.leftSide_isUp = 0;LogicCondition.rightSide_isDown = 0;LogicCondition.rightSide_isUp = 0;
   \   00000154   0x2300             MOVS     R3,#+0
   \   00000156   0xF88D 0x3010      STRB     R3,[SP, #+16]
   \   0000015A   0x2300             MOVS     R3,#+0
   \   0000015C   0xF88D 0x3012      STRB     R3,[SP, #+18]
   \   00000160   0x2300             MOVS     R3,#+0
   \   00000162   0xF88D 0x3011      STRB     R3,[SP, #+17]
   \   00000166   0x2300             MOVS     R3,#+0
   \   00000168   0xF88D 0x3013      STRB     R3,[SP, #+19]
    677          
    678          	//以下为信息值
    679              uint16 perLine_JumpNumVaild = 0;//跳变阈值//一行大于此数值时，跳变可以认定为合理
   \   0000016C   0xF05F 0x0A00      MOVS     R10,#+0
    680              uint16 perLine_JumpNumNonVaild = 0;//跳变无效值//一行小于此数值时，跳变认为为不合理
   \   00000170   0xF05F 0x0900      MOVS     R9,#+0
    681          	//理论来说，赛道在范围内越多，此数值越合理。
    682          	//而第一次获取跳变仍是不可知情形
    683              typedef
    684              struct
    685              {
    686                  u_Side side;
    687                  uint8 y_start;
    688                  uint8 y_end;
    689                  uint8 isHappened;
    690              }
    691              s_TurningBeacauseVeryLittle;
    692              s_TurningBeacauseVeryLittle TurningBeacauseVeryLittle;
    693              TurningBeacauseVeryLittle.isHappened = 0;
   \   00000174   0x2300             MOVS     R3,#+0
   \   00000176   0xF88D 0x3027      STRB     R3,[SP, #+39]
    694          	//=>故有一种思路，获取所有合理跳变数值，然后进行连续性判定
    695          	//若连续性判定合理，则认定为合适的点或边
    696          	//具体操作时，可以暂存另一数组，然后将情形填入
    697          
    698          	//===================================================//
    699          	//进入处理部分
    700          	//前部处理函数
    701              //=>有效高度区间设定
    702              vaild_heightInterval.n_firstStart_Y = 0;//
   \   0000017A   0x2300             MOVS     R3,#+0
   \   0000017C   0xF88D 0x3035      STRB     R3,[SP, #+53]
    703              vaild_heightInterval.n_lastEnd_Y = constNum_Line_MaxCounter;//行数计时
   \   00000180   0x000B             MOVS     R3,R1
   \   00000182   0xF88D 0x3034      STRB     R3,[SP, #+52]
    704              //
    705              do//首尾确认//vaild_heightInterval
    706              {
    707          	for (uint16 loop = 0; loop < constNum_Line_MaxCounter; loop++)//遍历全部宽度
   \   00000186   0x2300             MOVS     R3,#+0
   \   00000188   0xE000             B.N      ??v_ImageCut_2
   \                     ??v_ImageCut_3: (+1)
   \   0000018A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??v_ImageCut_2: (+1)
   \   0000018C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000018E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000190   0x428B             CMP      R3,R1
   \   00000192   0xD225             BCS.N    ??v_ImageCut_4
    708          	{
    709                      float TrkAll_width = Frame_Trk.f_width_ratio[1] * loop + Frame_Trk.f_width_ratio[0];
   \   00000194   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000196   0xEE00 0x3A10      VMOV     S0,R3
   \   0000019A   0xEEF8 0x0A40      VCVT.F32.U32 S1,S0
   \   0000019E   0xED9D 0x1A10      VLDR     S2,[SP, #+64]
   \   000001A2   0xED9D 0x0A0F      VLDR     S0,[SP, #+60]
   \   000001A6   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
    710                      float Trk_onePoint_width = TrkAll_width / 15.f;
   \   000001AA   0xEEF2 0x0A0E      VMOV.F32 S1,#15.0
   \   000001AE   0xEEC0 0x0A20      VDIV.F32 S1,S0,S1
    711                      if (TrkAll_width >= constNum_X_MaxCounter)//获取最近点
   \   000001B2   0xF8BD 0x0016      LDRH     R0,[SP, #+22]
   \   000001B6   0xEE01 0x0A10      VMOV     S2,R0
   \   000001BA   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   000001BE   0xEEB4 0x0A41      VCMP.F32 S0,S2
   \   000001C2   0xEEF1 0xFA10      FMSTAT   
   \   000001C6   0xDB02             BLT.N    ??v_ImageCut_5
    712                      {
    713                          vaild_heightInterval.n_firstStart_Y = loop;//获取最近
   \   000001C8   0x0018             MOVS     R0,R3
   \   000001CA   0xF88D 0x0035      STRB     R0,[SP, #+53]
    714                      }
    715                      if (Trk_onePoint_width <= 1)
   \                     ??v_ImageCut_5: (+1)
   \   000001CE   0xED9F 0x0ADB      VLDR.W   S0,??v_ImageCut_6  ;; 0x3f800001
   \   000001D2   0xEEF4 0x0A40      VCMP.F32 S1,S0
   \   000001D6   0xEEF1 0xFA10      FMSTAT   
   \   000001DA   0xD5D6             BPL.N    ??v_ImageCut_3
    716                      {
    717          		vaild_heightInterval.n_lastEnd_Y = loop;//获取最远
   \   000001DC   0xF88D 0x3034      STRB     R3,[SP, #+52]
    718          		break;//结束
    719                      }
    720          	}
    721              } while (0);
    722              m_ImageAbstract.Start_Y_Position = vaild_heightInterval.n_firstStart_Y;
   \                     ??v_ImageCut_4: (+1)
   \   000001E0   0xF8DF 0x0B30      LDR.W    R0,??v_ImageCut_0+0x8
   \   000001E4   0xF89D 0x1035      LDRB     R1,[SP, #+53]
   \   000001E8   0xF880 0x11D0      STRB     R1,[R0, #+464]
    723              //========================================================================//
    724              //========================================================================//
    725              //========================================================================//
    726              x_startPos = m_ImageAbstract.LastFrame_CentralPos;//将上次中值继承于本次 => 上一场的中值继承 =>这里跟单线有关系，需要将单线将此耦合删除
   \   000001EC   0xF8DF 0x0B24      LDR.W    R0,??v_ImageCut_0+0x8
   \   000001F0   0xF890 0x61D4      LDRB     R6,[R0, #+468]
    727              //========================================================================//
    728              //========================================================================//
    729              //========================================================================//
    730          //	x_startPos = m_width / 2;//初始赋值
    731              sint16 process_find_timer = -1;//进程搜寻时间
   \   000001F4   0xF05F 0x38FF      MOVS     R8,#-1
    732              //=====================================================================================================//
    733              //进入判断环节
    734              // Number全部初始化
    735              uint8 lr_n_cut_1_isExist = 3;//左右是否存在标志3=>不存在，0边1边2边
   \   000001F8   0x2003             MOVS     R0,#+3
   \   000001FA   0xF88D 0x000A      STRB     R0,[SP, #+10]
    736              
    737              m_Control.need_TurnLeft = 0;
   \   000001FE   0xF8DF 0x0B0C      LDR.W    R0,??v_ImageCut_0
   \   00000202   0x2100             MOVS     R1,#+0
   \   00000204   0x73C1             STRB     R1,[R0, #+15]
    738              m_Control.need_TurnRight = 0;
   \   00000206   0xF8DF 0x0B04      LDR.W    R0,??v_ImageCut_0
   \   0000020A   0x2100             MOVS     R1,#+0
   \   0000020C   0x7401             STRB     R1,[R0, #+16]
    739              m_Control.need_Hold = 0;
   \   0000020E   0xF8DF 0x0AFC      LDR.W    R0,??v_ImageCut_0
   \   00000212   0x2100             MOVS     R1,#+0
   \   00000214   0x7441             STRB     R1,[R0, #+17]
    740              number_Trk.n_left_banDone_firstLine = 255;
   \   00000216   0x20FF             MOVS     R0,#+255
   \   00000218   0xF88D 0x001C      STRB     R0,[SP, #+28]
    741              number_Trk.n_right_banDone_firstLine = 255;
   \   0000021C   0x20FF             MOVS     R0,#+255
   \   0000021E   0xF88D 0x001D      STRB     R0,[SP, #+29]
    742              //=====================================================================================================//
    743              uint16 LastJumpVaildNumber = 0;
   \   00000222   0x2000             MOVS     R0,#+0
   \   00000224   0xF8AD 0x003A      STRH     R0,[SP, #+58]
    744              //uint8 isNeed2FinderRight = 0;
    745              //uint8 isShould2FinderLeft = 0;
    746              
    747              u_Side TrkSide[60];
    748              //
    749              uint8 end_y_ctr = vaild_heightInterval.n_lastEnd_Y;//提前赋值给最终可能情况
   \   00000228   0xF89D 0xB034      LDRB     R11,[SP, #+52]
    750              for (uint8 y_ctr = vaild_heightInterval.n_firstStart_Y;
   \   0000022C   0xF89D 0x7035      LDRB     R7,[SP, #+53]
   \   00000230   0xE014             B.N      ??v_ImageCut_7
   \   00000232   0xBF00             Nop      
   \                     ??v_ImageCut_1:
   \   00000234   0xC2700000         DC32     0xc2700000
    751                          y_ctr < vaild_heightInterval.n_lastEnd_Y;
    752                          y_ctr++)//数值循环判定=>基本最早环节为185点以内，且最外处的宽度应小于 constn_xFindJumpLine_Width
    753              {
    754                  //m_ImageAbstract.Central[y_ctr] = x_startPos_n_add_one;
    755                  number_Trk.n_left_end = 255;
    756                  number_Trk.n_right_end = 255;
    757                  number_Trk.n_left_banDone = 255;
    758                  number_Trk.n_right_banDone = 255;
    759                  //程序进行时间=============================================//
    760          	process_find_timer++;//搜寻次数判定=>防止因为代码次序导致的失控
    761                  //
    762          	perLine_vaild_width = (uint16)(Frame_Trk.f_width_ratio[1] * (float)y_ctr + Frame_Trk.f_width_ratio[0]);//有效行的赛道有效宽
    763          	m_ImageAbstract.width[y_ctr] = perLine_vaild_width;
    764                  
    765                  //目标会一直寻找到下降沿或者寻找失败
    766                  
    767                  uint8 isMaybefoundShutDown = 0;
    768                  //====================================================================//
    769                  if(process_find_timer > 0)//肯定与上一场的信息做甄别
    770                  {
    771                      sint16 n_jumpVar = m_ImageBeholder_Data[y_ctr][x_startPos] - 
    772                                         m_ImageBeholder_Data[y_ctr - 1][x_startPos];
    773                      sint16 absn_jumpVar = __ABS(n_jumpVar);
    774                      if ((absn_jumpVar > perLine_JumpNumVaild)&&(absn_jumpVar > perLine_JumpNumNonVaild))
    775                      {
    776                          if(n_jumpVar < 0)
    777                          {
    778                              LastSide.Last_BlackLine_suddenlyHappen = y_ctr;//本次是
    779                              LastSide.hasHappened_Once = 1;
    780                              isMaybefoundShutDown = 1;
    781                              //break;这里找到了一个黑点
    782                          }
    783                      }
    784                      if(process_find_timer > 1)
    785                      {
    786                          n_jumpVar = m_ImageBeholder_Data[y_ctr][x_startPos] - m_ImageBeholder_Data[y_ctr - 2][x_startPos];
    787                          absn_jumpVar = __ABS(n_jumpVar);
    788                          if (absn_jumpVar > LastJumpVaildNumber)
    789                          {
    790                              if(n_jumpVar < 0)
    791                              {
    792                                  LastSide.Last_BlackLine_suddenlyHappen = y_ctr;//本次是
    793                                  LastSide.hasHappened_Once = 1;
    794                                  isMaybefoundShutDown = 1;
    795                                  //break;这里找到了一个黑点
    796                              }
    797                          }
    798                      }
    799                      LastJumpVaildNumber = (perLine_JumpNumVaild > perLine_JumpNumNonVaild)?perLine_JumpNumVaild:perLine_JumpNumNonVaild;
    800                  }//这里判断的是本次中心点的颜色
    801                  
    802                  
    803                  
    804                  do//获取每行的信息-----------------------------------------------------//
    805          	{//这段代码已经可以正确运行，故删去一些行剪短行数。这段代码的本意是得出合适的跳变数值。
    806                      uint8 perline_aver_pixelNumber = 0;uint8 perline_jump_max2min = 0;uint32 AllPixel_Counter = 0;
    807                      uint8 maxPixel = 0;uint8 minPixel = 255;uint8 BookLineNumber = 0;//记录的行数
    808                      for (uint16 loop = 0; loop < constNum_X_MaxCounter; loop++)//循环开始
    809                      {
    810                          if(0 != m_ImageBeholder_Data[y_ctr][loop])
    811                          {
    812                              BookLineNumber ++;AllPixel_Counter += m_ImageBeholder_Data[y_ctr][loop];
    813                              if (m_ImageBeholder_Data[y_ctr][loop] > maxPixel){ maxPixel = m_ImageBeholder_Data[y_ctr][loop]; }
    814                              if (m_ImageBeholder_Data[y_ctr][loop] < minPixel){ minPixel = m_ImageBeholder_Data[y_ctr][loop]; }
    815                          }
    816                      }//计数循环结束
    817                      perline_aver_pixelNumber = AllPixel_Counter / BookLineNumber;//均值
    818                      perline_jump_max2min = maxPixel - minPixel;//差值
    819                      perLine_JumpNumVaild = (uint8)((float)perline_jump_max2min * 0.4f);//两个跳变值
    820                      perLine_JumpNumNonVaild = (uint8)((float)perline_aver_pixelNumber * 0.4f);//两个跳变值
    821          	} while (0);//特征提取完毕---------------------------------------------//
    822                  /*如果是第一次判定，可以进行一次关于这个点究竟是黑点还是白点的判断*/
    823                  do//寻找左右线
    824          	{
    825                      //======宽度匹配==================================================//
    826                      uint16 n_find_half_mutlwidth = (uint16)((perLine_vaild_width * 1.414f * 1.25f)/2.f);//半绝对宽度乘以合理偏置=>分配给理论数值
    827                      sint16 x_rightLimitNum = x_startPos + n_find_half_mutlwidth;//右侧距离
    828                      sint16 x_leftLimitNum = x_startPos - n_find_half_mutlwidth;//左侧距离//理论合理限制
    829          			
    830                      uint16 tempx_rightLimitNum = x_rightLimitNum;
    831                      if (x_rightLimitNum > constNum_X_MaxCounter - constn_xFindJumpLine_Width)
    832                      { tempx_rightLimitNum = constNum_X_MaxCounter - constn_xFindJumpLine_Width; }//幅度限制
    833          
    834                      uint16 tempx_leftLimitNum = x_leftLimitNum;
    835                      if (x_leftLimitNum < constn_xFindJumpLine_Width){ tempx_leftLimitNum = constn_xFindJumpLine_Width; }//幅度限制
    836          			
    837                      if(process_find_timer <= constn_DeadLine_BeWith)//3啊！
    838                      {//更改前行
    839                          tempx_leftLimitNum = constn_xFindJumpLine_Width + constn_xFindJumpLine_Width;
    840                          tempx_rightLimitNum = constNum_X_MaxCounter - constn_xFindJumpLine_Width - constn_xFindJumpLine_Width;
    841                      }//这里的作用是忽略了当过度在左或右导致的循迹失败
    842                      
    843                      if(1 == TurningBeacauseVeryLittle.isHappened)
    844                      {
    845                          if(Sid_Left == TurningBeacauseVeryLittle.side)
    846                          {tempx_rightLimitNum = constNum_X_MaxCounter - constn_xFindJumpLine_Width - constn_xFindJumpLine_Width;}
    847                          if(Sid_Right == TurningBeacauseVeryLittle.side)
    848                          {tempx_leftLimitNum = constn_xFindJumpLine_Width + constn_xFindJumpLine_Width;}
    849                      }
    850                      //======右线是否存在==============================================//
    851                      LogicCondition.rightSide_isUp = 0;//是否存在上升沿
    852                      LogicCondition.rightSide_isDown = 0;//是否存在有效边沿
    853                      for (sint16 LINE_CTR = x_startPos;
    854                                  LINE_CTR + constn_xFindJumpLine_Width < tempx_rightLimitNum; 
    855                                  LINE_CTR++)//向右提线
    856                      {
    857          		sint16 n_jumpVar = m_ImageBeholder_Data[y_ctr][LINE_CTR] - m_ImageBeholder_Data[y_ctr][LINE_CTR + constn_xFindJumpLine_Width];
    858                          sint16 absn_jumpVar = __ABS(n_jumpVar);
    859          
    860          		if ((absn_jumpVar > perLine_JumpNumVaild)
    861                           && (absn_jumpVar > perLine_JumpNumNonVaild))
    862                          {
    863                              if (n_jumpVar > 0)//下降沿
    864                              {
    865          			number_Trk.n_right_end = LINE_CTR;
    866          			LogicCondition.rightSide_isDown = 1;
    867          			break;//跳出本循环
    868                              }
    869                              else//上升沿
    870                              {
    871                                  number_Trk.n_right_banDone = LINE_CTR;
    872                                  LogicCondition.rightSide_isUp = 1;
    873                              }
    874                          }
    875                      }//右线搜寻完毕
    876                      //======左线是否存在================================================================//
    877                      LogicCondition.leftSide_isUp = 0;
    878                      LogicCondition.leftSide_isDown = 0;
    879                      for (sint16 LINE_CTR = x_startPos; 
    880                                  LINE_CTR - constn_xFindJumpLine_Width >= tempx_leftLimitNum; 
    881                                  LINE_CTR--)
    882                      {
    883                          sint16 n_jumpVar = m_ImageBeholder_Data[y_ctr][LINE_CTR] - m_ImageBeholder_Data[y_ctr][LINE_CTR - constn_xFindJumpLine_Width];
    884          		sint16 absn_jumpVar = __ABS(n_jumpVar);
    885          
    886          		if ((absn_jumpVar > perLine_JumpNumVaild)
    887          		 && (absn_jumpVar > perLine_JumpNumNonVaild))
    888          		{
    889                              if (n_jumpVar > 0)//下降沿
    890                              {
    891          			number_Trk.n_left_end = LINE_CTR;
    892          			LogicCondition.leftSide_isDown = 1;
    893          			break;//跳出本循环
    894                              }
    895                              else//广义宽度
    896                              {
    897          			number_Trk.n_left_banDone = LINE_CTR;
    898          			LogicCondition.leftSide_isUp = 1;
    899                              }
    900                          }
    901                      }//左线搜寻完毕
    902                  } while (0);//左右线寻找完毕
    903                  
    904                  if(0 == process_find_timer)//0搜寻
    905                  {
    906                      number_Trk.n_left_banDone_firstLine = number_Trk.n_left_banDone;
    907                      number_Trk.n_right_banDone_firstLine = number_Trk.n_right_banDone;
    908                  }
    909                  
    910                  //====================================================================//
    911                  //以下这些用作处理终止线
    912                  
    913                  if(1 == isMaybefoundShutDown)
    914                  {//发发现了需要关闭的东西
    915                      if(((255!=number_Trk.n_right_banDone)&&(255!=number_Trk.n_left_banDone)
    916                        &&((number_Trk.n_right_banDone-number_Trk.n_left_banDone)<=1.414*(m_ImageAbstract.width[y_ctr]/15.f))))
    917                      { 
    918                          //这里仍需要认定下
    919                          //isHaveLonlyLineStartCorner = 1;//这里
    920                          HaveLonlyLineStartCornerLastLine = y_ctr;//认定这一行
    921                          //LonlyLine_Counter ++;
    922                      }
    923                      else
    924                      {
    925                          if((process_find_timer>0)/*&&(1 != m_ImageAbstract.RtAngle_isLasting)*/)//可以在这里强制关闭RtAngle
    926                          {//两个特殊处理不要在一起进行，虽然很好，但很悲惨
    927                              if((0 == TurningBeacauseVeryLittle.isHappened)&&(Sid_Double == TrkSide[y_ctr-1])
    928                              &&(__ABS(m_ImageAbstract.Right[y_ctr-1]-m_ImageAbstract.Left[y_ctr-1])<=m_ImageAbstract.width[y_ctr-1]/5))//9cm
    929                              {//当赛道情况为双边都存在的时候，并且上一条线非常小的时候，就可以这么断言//如若还不能完全判断，再说
    930          //============================================================================//
    931                                  showYcutDown = 'H'; 
    932                                  uint8 central_Pos = m_ImageAbstract.Central[y_ctr-1];
    933                                  uint8 finderStartY = y_ctr - 1;
    934                                  //这里搜寻的是y_ctr-1；//设定距离为宽度的一半就可以了
    935                                  uint8 right_pluto_Pos = 255;
    936                                  sint16 right_notTry = central_Pos + m_ImageAbstract.width[finderStartY]/2;//22.5cm这个就很不正常了，正常情况下应该在10*0.866
    937                                  if(right_notTry > 181-3){right_notTry = 181 - 3;}
    938                                  if(right_notTry < 3+3){right_notTry = 3+3;}
    939                                  for (sint16 LINE_CTR = central_Pos
    940                                      ;LINE_CTR + constn_xFindJumpLine_Width <= right_notTry;LINE_CTR++)//向右提线
    941                                  {sint16 n_jumpVar = m_ImageBeholder_Data[finderStartY][LINE_CTR]                           //这里是个实际的数
    942                                                    - m_ImageBeholder_Data[finderStartY][LINE_CTR + constn_xFindJumpLine_Width];
    943                                  sint16 absn_jumpVar = __ABS(n_jumpVar);//获取绝对值
    944                                  if ((absn_jumpVar > perLine_JumpNumVaild) && (absn_jumpVar > perLine_JumpNumNonVaild)
    945                                      && (n_jumpVar < 0)){right_pluto_Pos = LINE_CTR + constn_xFindJumpLine_Width;break;}//跳出本循环
    946                                  }//右线搜寻完毕
    947                                  uint8 left_pluto_Pos = 255;
    948                                  sint16 left_notTry = central_Pos - m_ImageAbstract.width[finderStartY]/2;
    949                                  if(left_notTry > 181-3){right_notTry = 181 - 3;}
    950                                  if(left_notTry < 3+3){right_notTry = 3+3;}
    951                                  for (sint16 LINE_CTR = central_Pos
    952                                      ;LINE_CTR - constn_xFindJumpLine_Width >= left_notTry;LINE_CTR--)
    953                                  {sint16 n_jumpVar = m_ImageBeholder_Data[finderStartY][LINE_CTR]
    954                                                    - m_ImageBeholder_Data[finderStartY][LINE_CTR - constn_xFindJumpLine_Width];
    955                                  sint16 absn_jumpVar = __ABS(n_jumpVar);//获取绝对值
    956                                  if ((absn_jumpVar > perLine_JumpNumVaild) && (absn_jumpVar > perLine_JumpNumNonVaild)
    957                                      && (n_jumpVar < 0)){left_pluto_Pos = LINE_CTR - constn_xFindJumpLine_Width;break;}//=>寻找到下一个边沿
    958                                  }//左线搜寻完毕
    959                                  if((left_pluto_Pos >= m_ImageAbstract.Left[finderStartY])&&(255 != m_ImageAbstract.Left[finderStartY]))
    960                                  {
    961                                      left_pluto_Pos = 255;
    962                                  }
    963                                  if((right_pluto_Pos <= m_ImageAbstract.Right[finderStartY])&&(255 != m_ImageAbstract.Right[finderStartY]))
    964                                  {
    965                                      right_pluto_Pos = 255;
    966                                  }//以上这里是维护pluto_Pos
    967                                  //以上维护pluto_Pos获取正常数值
    968                                  m_ImageTesting.FindLitteWidthTurning_LeftFinder = left_pluto_Pos;
    969                                  m_ImageTesting.FindLitteWidthTurning_RightFinder = right_pluto_Pos;
    970                                  //但这样还是存在误判，比如说撞上了某个角就整体出问题了
    971                                  //将2.5改为了2，但是还是存在两侧都不能找到边沿的情况，这时候要依赖另一种做法
    972                                  
    973                                  
    974                                  //以上是基本代码
    975                                  u_Side Dir = Sid_NaN;
    976                                  if(__ABS(left_pluto_Pos - central_Pos)>__ABS(right_pluto_Pos - central_Pos))
    977                                  {central_Pos = right_pluto_Pos;
    978                                  if(255 != central_Pos){Dir = Sid_Right;}}
    979                                  if(__ABS(left_pluto_Pos - central_Pos)<__ABS(right_pluto_Pos - central_Pos))
    980                                  {central_Pos = left_pluto_Pos;
    981                                  if(255 != central_Pos){Dir = Sid_Left;}}//确定中心点应在的位置
    982                                  if(Sid_NaN == Dir)//==============================//
    983                                  {//此处应跳出
    984                                      Dir = Sid_NaN;
    985                                      sint16 Y_counter_cut_5 = y_ctr-1 - 5;if(Y_counter_cut_5 < 0){Y_counter_cut_5 = 0;}
    986                                      sint16 counter_cutAdd = 0;//差分计数
    987                                      for(sint16 Y_counter = y_ctr-1;Y_counter > Y_counter_cut_5;Y_counter--)
    988                                      {
    989                                          counter_cutAdd += (m_ImageAbstract.Central[Y_counter] - m_ImageAbstract.Central[Y_counter-1]);
    990                                      }
    991                                      if(counter_cutAdd < 0){Dir = Sid_Right;}
    992                                      if(counter_cutAdd > 0){Dir = Sid_Left;}
    993                                  }//===================================================//
    994                                  //到目前为止，应该是稳定识别了
    995                                  
    996                                  
    997                                  //m_ImageTesting.centralPosTurning = central_Pos;
    998                                  m_ImageTesting.TurningSide = Dir;
    999                                  uint8 wirte_Pos[60];
   1000                                  uint8 y_Cut = 255;//y_Cut记录
   1001                                  if(Sid_Right == Dir)
   1002                                  {
   1003                                      FindLitteWidthTurning = 2;
   1004                                      showYcutDown = 'J';
   1005                                  }else
   1006                                  if(Sid_Left == Dir)
   1007                                  {
   1008                                      FindLitteWidthTurning = 1;
   1009                                      showYcutDown = 'j';
   1010                                  }
   1011                                  TurningBeacauseVeryLittle.y_end = y_ctr;
   1012          
   1013                                      TurningBeacauseVeryLittle.side = Dir;
   1014                                      TurningBeacauseVeryLittle.isHappened = 1;
   1015                                      //showYcutDown = 'K';
   1016                                      if(Sid_Left == TurningBeacauseVeryLittle.side)
   1017                                      {
   1018                                          number_Trk.n_right_end = x_startPos;
   1019                                          x_startPos = x_startPos - m_ImageAbstract.width[y_ctr]*0.45;
   1020                                          if(y_ctr > 2)
   1021                                          {
   1022                                              m_ImageAbstract.Central[y_ctr-1] = x_startPos;
   1023                                              m_ImageAbstract.Central[y_ctr-2] = x_startPos;
   1024                                          }
   1025                                          LogicCondition.leftSide_isDown = 0;
   1026                                          LogicCondition.rightSide_isDown = 1;
   1027                                      }
   1028                                      else if(Sid_Right == TurningBeacauseVeryLittle.side)
   1029                                      {
   1030                                          number_Trk.n_left_end = x_startPos;
   1031                                          x_startPos = x_startPos + m_ImageAbstract.width[y_ctr]*0.45;
   1032                                          if(y_ctr > 2)
   1033                                          {
   1034                                              m_ImageAbstract.Central[y_ctr-1] = x_startPos;
   1035                                              m_ImageAbstract.Central[y_ctr-2] = x_startPos;
   1036                                          }
   1037                                          LogicCondition.leftSide_isDown = 1;
   1038                                          LogicCondition.rightSide_isDown = 0;
   1039                                      }
   1040                                      /************************************/
   1041                                      /*m_ImageAbstract.RtAngle_isLasting = 0;*/ //这里的话如果有直角就直接退出直角。
   1042                                      /*m_ModeMachine.*//*becauseThisOutOfTheBlackRtAngle = 'K';*/
   1043                                      //这里添加
   1044                                      isMaybefoundShutDown = 0;
   1045                                      goto endOfthisIf;
   1046                              }
   1047                          }
   1048                          
   1049                          end_y_ctr = LastSide.Last_BlackLine_suddenlyHappen;//控制本次
   1050                          break;
   1051                      }
   1052                      isMaybefoundShutDown = 0;
   1053                  }/*(1 == isMaybefoundShutDown)*/
   1054          endOfthisIf:
   1055                  //====================================================================//
   1056                  //信息综合与机器学习效果所在区域
   1057                  m_ImageAbstract.Left_UpBlack2White[y_ctr] = 255;
   1058                  m_ImageAbstract.Right_UpBlack2White[y_ctr] = 255;
   1059          	if(2 == LogicCondition.leftSide_isDown + LogicCondition.rightSide_isDown)
   1060          	{//双边都存在，有时候这是最重要的代码
   1061                      TrkSide[y_ctr] = Sid_Double;
   1062                      lostDouble_TimerCounter = 0;//丢线寄存器清空
   1063                      x_startPos_n_add_one = (number_Trk.n_left_end + number_Trk.n_right_end) / 2;//获取中心值位置
   1064                      /*
   1065                      if(m_ImageAbstract.Right[y_ctr] - m_ImageAbstract.Left[y_ctr] >= 1.5*m_ImageAbstract.width[y_ctr])
   1066                      {
   1067                          mayBeRampHappened = 1;
   1068                      }
   1069                      */
   1070                      lr_n_cut_1_isExist = 2;//
   1071          	}
   1072          	else//进行左右线断定
   1073          	{
   1074                      if ((1 == LogicCondition.leftSide_isDown) || (1 == LogicCondition.rightSide_isDown))
   1075                      {
   1076                          lostDouble_TimerCounter = 0;//丢线寄存器清空
   1077          		if (1 == LogicCondition.leftSide_isDown)//左边界有效
   1078          		{
   1079                              TrkSide[y_ctr] = Sid_Left;
   1080                              x_startPos_n_add_one = (sint16)(number_Trk.n_left_end + perLine_vaild_width*0.45f);//相当于补边
   1081                              if((x_startPos_n_add_one < x_startPos)&&(process_find_timer > 2))//本次数值在上次数值的左边
   1082                              {
   1083                                  x_startPos_n_add_one = m_ImageAbstract.Central[y_ctr-1]//路径的PD作用
   1084                                                      + (m_ImageAbstract.Central[y_ctr-2]-m_ImageAbstract.Central[y_ctr-3]);
   1085                              }
   1086                              if((process_find_timer < constn_DeadLine_BeWith)&&(process_find_timer > 0))
   1087                              {
   1088                                  if(x_startPos_n_add_one < m_ImageAbstract.Central[y_ctr-1]){x_startPos_n_add_one = m_ImageAbstract.Central[y_ctr-1];}
   1089                              }
   1090                          }
   1091                          else//右边界有效
   1092          		{
   1093                              TrkSide[y_ctr] = Sid_Right;
   1094                              x_startPos_n_add_one = (sint16)(number_Trk.n_right_end - perLine_vaild_width*0.45f);//相当于补边
   1095                              if((x_startPos_n_add_one > x_startPos)&&(process_find_timer > 2))//本次数值在上次数值的右边
   1096                              {// 0 1 2 (3)
   1097                                  x_startPos_n_add_one = m_ImageAbstract.Central[y_ctr-1] 
   1098                                                      + (m_ImageAbstract.Central[y_ctr-2]-m_ImageAbstract.Central[y_ctr-3]);
   1099                              }
   1100                              if((process_find_timer < constn_DeadLine_BeWith)&&(process_find_timer > 0))
   1101                              {
   1102                                  if(x_startPos_n_add_one > m_ImageAbstract.Central[y_ctr-1]){x_startPos_n_add_one = m_ImageAbstract.Central[y_ctr-1];}
   1103                              }
   1104                          }//寻线结束
   1105                          if(2 == lr_n_cut_1_isExist)
   1106                          {
   1107                              if(process_find_timer > 2)//为了拐弯
   1108                              {
   1109                                  m_ImageAbstract.Central[y_ctr - 1] = x_startPos_n_add_one;//赋值给上次
   1110                                  m_ImageAbstract.Central[y_ctr - 2] = x_startPos_n_add_one;//赋值给上上次
   1111                              }
   1112                          }
   1113                          lr_n_cut_1_isExist = 1;//存在一条边                
   1114                      }
   1115                      if (((0 == LogicCondition.leftSide_isDown) && (0 == LogicCondition.rightSide_isDown))
   1116                      && (!(((255!=number_Trk.n_right_banDone)&&(255!=number_Trk.n_left_banDone)
   1117                  &&((number_Trk.n_right_banDone-number_Trk.n_left_banDone)<=1.414*(m_ImageAbstract.width[y_ctr]/15.f))))))
   1118                      {
   1119                          TrkSide[y_ctr] = Sid_None;
   1120                                          
   1121                          if((process_find_timer < constn_DeadLine_BeWith)&&(lostDouble_TimerCounter == process_find_timer))
   1122                          {//全白全黑很短，并且跟以前很近。
   1123                          //出现情况包括近端十字全白、急弯丢线、极度靠近单线内侧范围
   1124                              x_startPos_n_add_one = m_ImageAbstract.LastFrame_CentralPos;//
   1125                              //认定上次此时范围即本刻范围，维护好近处三点的全部情况
   1126                          }
   1127                          else//其余情况使用这一方法解决
   1128                          {
   1129                              x_startPos_n_add_one = x_startPos;//将上次数值给当前数值//可以用最小二乘，但运算复杂
   1130                          }
   1131                              
   1132                          if(process_find_timer > 3)//前馈补偿=>下三次才会生效
   1133                          {
   1134                              x_startPos_n_add_one = m_ImageAbstract.Central[y_ctr-1] + 
   1135                                                   ((m_ImageAbstract.Central[y_ctr-1] - m_ImageAbstract.Central[y_ctr-2])
   1136                                                   +(m_ImageAbstract.Central[y_ctr-2] - m_ImageAbstract.Central[y_ctr-3]))/2;
   1137                          }
   1138                          
   1139                          lostDouble_TimerCounter++;//丢线计数
   1140                          
   1141                          if(1 == lostDouble_TimerCounter)//丢失次数计数
   1142                          {//第一次双边都丢失记录下此刻若是十字的话，线应该走多远
   1143                              float son = Frame_Trk.f_depth_ratio[0] * y_ctr*y_ctr + Frame_Trk.f_depth_ratio[1] * y_ctr + Frame_Trk.f_depth_ratio[2];
   1144                              float mother = Frame_Trk.f_depth_ratio[3] * y_ctr + Frame_Trk.f_depth_ratio[4];
   1145                              lostDouble_UpestHeight = (sint16)(son / mother);//向前行走最大值
   1146                              //这里记录初值
   1147                              LostDouble.Gaia_Y = y_ctr;
   1148                          } 
   1149                          if(lostDouble_TimerCounter > lostDouble_UpestHeight/2)//丢线次数大于一半的话
   1150                          {
   1151                              LostDouble.Flag = LDb_WaitingDrawing;
   1152                              //这里等待终值
   1153                          }
   1154                          
   1155                          
   1156                          lr_n_cut_1_isExist = 0;//这个必须在此代码的末尾
   1157                      }//处理无边线情况的代码
   1158          	}//到目前为止，下降沿的信息识别全部完毕
   1159                  if(((255!=number_Trk.n_right_banDone)&&(255!=number_Trk.n_left_banDone)
   1160                  &&((number_Trk.n_right_banDone-number_Trk.n_left_banDone)<=1.414*(m_ImageAbstract.width[y_ctr]/15.f))))
   1161                  {
   1162                      lostDouble_TimerCounter = 0;//丢线寄存器清空
   1163                      
   1164                      TrkSide[y_ctr] = Sid_DoubleBlack;
   1165                      isHaveLonlyLineStartCorner = 1;
   1166                      x_startPos_n_add_one = (number_Trk.n_right_banDone+number_Trk.n_left_banDone)/2;
   1167                      
   1168                      HaveLonlyLineStartCornerLastLine = y_ctr;//认定这一行
   1169                  }
   1170                  
   1171                  if((LDb_WaitingDrawing == LostDouble.Flag)&&(0 == lostDouble_TimerCounter))
   1172                  {
   1173                      if(m_ImageAbstract.Start_Y_Position != LostDouble.Gaia_Y)
   1174                      {
   1175                          LostDouble.Flag = LDb_None;lostDouble_UpestHeight = 255;
   1176                          isOccurCross = 1;
   1177                          float Y_cut = y_ctr - (LostDouble.Gaia_Y - 1);
   1178                          float X_cut = m_ImageAbstract.Central[y_ctr] - 
   1179                                        m_ImageAbstract.Central[LostDouble.Gaia_Y - 1];
   1180                          float K = X_cut / Y_cut;
   1181                          float B = m_ImageAbstract.Central[LostDouble.Gaia_Y - 1] 
   1182                                  - K*(LostDouble.Gaia_Y - 1);
   1183                          for(uint8 loop = LostDouble.Gaia_Y - 1;
   1184                                    loop < y_ctr;
   1185                                    loop ++)
   1186                          {
   1187                              m_ImageAbstract.Central[loop] = (uint8)(K * (float)loop + B);
   1188                          }
   1189                      }
   1190                      else
   1191                      {
   1192                          LostDouble.Flag = LDb_None;lostDouble_UpestHeight = 255;
   1193                          isOccurCross = 1;
   1194                          float Y_cut = y_ctr - (m_ImageAbstract.Start_Y_Position);
   1195                          float X_cut = m_ImageAbstract.Central[y_ctr] - 
   1196                                        m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position];
   1197                          float K = X_cut / Y_cut;
   1198                          float B = m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position] 
   1199                                  - K*(m_ImageAbstract.Start_Y_Position);
   1200                          for(uint8 loop = m_ImageAbstract.Start_Y_Position;
   1201                                    loop < y_ctr;
   1202                                    loop ++)
   1203                          {
   1204                              m_ImageAbstract.Central[loop] = (uint8)(K * (float)loop + B);
   1205                          }
   1206                      }
   1207                  }
   1208                  
   1209                  if(255 != number_Trk.n_right_end)
   1210                  {
   1211                      uint8 right_pluto_Pos = 255;
   1212                      sint16 rightShutDown = number_Trk.n_right_end + m_ImageAbstract.width[y_ctr]/5;//9cm/继续放开11.5cm多些
   1213                      if(rightShutDown>181){rightShutDown = 181;}
   1214                      if(rightShutDown<3){rightShutDown = 3;}
   1215                      for (sint16 LINE_CTR = number_Trk.n_right_end;LINE_CTR + constn_xFindJumpLine_Width <= rightShutDown;LINE_CTR++)//向右提线
   1216                      {sint16 n_jumpVar = m_ImageBeholder_Data[y_ctr][LINE_CTR]                           //这里是个实际的数
   1217                                        - m_ImageBeholder_Data[y_ctr][LINE_CTR + constn_xFindJumpLine_Width];
   1218                      sint16 absn_jumpVar = __ABS(n_jumpVar);//获取绝对值
   1219                      if ((absn_jumpVar > perLine_JumpNumVaild) && (absn_jumpVar > perLine_JumpNumNonVaild)
   1220                          && (n_jumpVar < 0)){right_pluto_Pos = LINE_CTR + constn_xFindJumpLine_Width;break;}//跳出本循环
   1221                      }//右线搜寻完毕
   1222                      m_ImageAbstract.Right_UpBlack2White[y_ctr] = right_pluto_Pos;//255;
   1223                  }
   1224                  if(255 != number_Trk.n_left_end)
   1225                  {
   1226                      uint8 left_pluto_Pos = 255;
   1227                      sint16 leftShutDown = number_Trk.n_left_end - m_ImageAbstract.width[y_ctr]/5;//9cm
   1228                      if(leftShutDown>181){leftShutDown = 181;}
   1229                      if(leftShutDown<3){leftShutDown = 3;}
   1230                      for (sint16 LINE_CTR = number_Trk.n_left_end;LINE_CTR - constn_xFindJumpLine_Width >= leftShutDown;LINE_CTR--)
   1231                      {sint16 n_jumpVar = m_ImageBeholder_Data[y_ctr][LINE_CTR]
   1232                                        - m_ImageBeholder_Data[y_ctr][LINE_CTR - constn_xFindJumpLine_Width];
   1233                      sint16 absn_jumpVar = __ABS(n_jumpVar);//获取绝对值
   1234                      if ((absn_jumpVar > perLine_JumpNumVaild) && (absn_jumpVar > perLine_JumpNumNonVaild)
   1235                          && (n_jumpVar < 0)){left_pluto_Pos = LINE_CTR - constn_xFindJumpLine_Width;break;}//=>寻找到下一个边沿
   1236                      }//左线搜寻完毕
   1237                      m_ImageAbstract.Left_UpBlack2White[y_ctr] = left_pluto_Pos;//255;
   1238                  }
   1239                      
   1240                  if(x_startPos_n_add_one > constNum_X_MaxCounter - constn_xFindJumpLine_Width * 2)
   1241                  {x_startPos_n_add_one = constNum_X_MaxCounter - constn_xFindJumpLine_Width * 2;}//限幅抑制信息
   1242                  if(x_startPos_n_add_one < constn_xFindJumpLine_Width * 2)
   1243                  {x_startPos_n_add_one = constn_xFindJumpLine_Width * 2;}
   1244                  
   1245          
   1246                  
   1247                  m_ImageAbstract.Central[y_ctr] = x_startPos_n_add_one;
   1248                  m_ImageAbstract.Left[y_ctr] = number_Trk.n_left_end;//丢线即为255
   1249                  m_ImageAbstract.Right[y_ctr] = number_Trk.n_right_end;
   1250                  //m_ImageTesting.hazardvaildLine[y_ctr] = m_ImageAbstract.Central[y_ctr];
   1251                  
   1252                  end_y_ctr = y_ctr;//每次都更新   
   1253                  x_startPos = x_startPos_n_add_one;//中线继承
   1254                  
   1255                  if(1 == LastSide.AllBeforeisBlack)//消除一开始是黑色
   1256                  {
   1257                      LastSide.AllBeforeisBlack = 0;
   1258                      for(uint8 loop = 0;loop < y_ctr;loop++)
   1259                      {
   1260                          m_ImageAbstract.Central[loop] = m_ImageAbstract.Central[y_ctr];//
   \                     ??v_ImageCut_8: (+1)
   \   00000238   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000023A   0xF8DF 0x1AD8      LDR.W    R1,??v_ImageCut_0+0x8
   \   0000023E   0x1841             ADDS     R1,R0,R1
   \   00000240   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000242   0xF8DF 0x2AD0      LDR.W    R2,??v_ImageCut_0+0x8
   \   00000246   0x18BA             ADDS     R2,R7,R2
   \   00000248   0xF892 0x20A4      LDRB     R2,[R2, #+164]
   \   0000024C   0xF881 0x20A4      STRB     R2,[R1, #+164]
   1261                      }
   \   00000250   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_9: (+1)
   \   00000252   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000254   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000256   0x42B8             CMP      R0,R7
   \   00000258   0xD3EE             BCC.N    ??v_ImageCut_8
   \                     ??v_ImageCut_10: (+1)
   \   0000025A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??v_ImageCut_7: (+1)
   \   0000025C   0xF89D 0x0034      LDRB     R0,[SP, #+52]
   \   00000260   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000262   0x4287             CMP      R7,R0
   \   00000264   0xF080 0x84D3      BCS.W    ??v_ImageCut_11
   \   00000268   0x20FF             MOVS     R0,#+255
   \   0000026A   0xF88D 0x0019      STRB     R0,[SP, #+25]
   \   0000026E   0x20FF             MOVS     R0,#+255
   \   00000270   0xF88D 0x0018      STRB     R0,[SP, #+24]
   \   00000274   0x20FF             MOVS     R0,#+255
   \   00000276   0xF88D 0x001B      STRB     R0,[SP, #+27]
   \   0000027A   0x20FF             MOVS     R0,#+255
   \   0000027C   0xF88D 0x001A      STRB     R0,[SP, #+26]
   \   00000280   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000284   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000286   0xEE00 0x7A10      VMOV     S0,R7
   \   0000028A   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   0000028E   0xEDDD 0x0A10      VLDR     S1,[SP, #+64]
   \   00000292   0xED9D 0x1A0F      VLDR     S2,[SP, #+60]
   \   00000296   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   0000029A   0xEEBD 0x0AC1      VCVT.S32.F32 S0,S2
   \   0000029E   0xEE10 0x0A10      VMOV     R0,S0
   \   000002A2   0xF8AD 0x002C      STRH     R0,[SP, #+44]
   \   000002A6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002A8   0xF8DF 0x0A68      LDR.W    R0,??v_ImageCut_0+0x8
   \   000002AC   0xEB10 0x0047      ADDS     R0,R0,R7, LSL #+1
   \   000002B0   0xF9BD 0x102C      LDRSH    R1,[SP, #+44]
   \   000002B4   0xF8A0 0x1158      STRH     R1,[R0, #+344]
   \   000002B8   0x2000             MOVS     R0,#+0
   \   000002BA   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   000002BE   0xF1B8 0x0F01      CMP      R8,#+1
   \   000002C2   0xDB64             BLT.N    ??v_ImageCut_12
   \   000002C4   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000002C6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002C8   0x21B9             MOVS     R1,#+185
   \   000002CA   0xF8DF 0x2A4C      LDR.W    R2,??v_ImageCut_0+0xC
   \   000002CE   0xFB01 0x2107      MLA      R1,R1,R7,R2
   \   000002D2   0x5C71             LDRB     R1,[R6, R1]
   \   000002D4   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000002D6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002D8   0x22B9             MOVS     R2,#+185
   \   000002DA   0xF8DF 0x3A3C      LDR.W    R3,??v_ImageCut_0+0xC
   \   000002DE   0xFB02 0x3207      MLA      R2,R2,R7,R3
   \   000002E2   0x18B2             ADDS     R2,R6,R2
   \   000002E4   0xF812 0x2CB9      LDRB     R2,[R2, #-185]
   \   000002E8   0x1A89             SUBS     R1,R1,R2
   \   000002EA   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000002EC   0x2900             CMP      R1,#+0
   \   000002EE   0xD502             BPL.N    ??v_ImageCut_13
   \   000002F0   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000002F2   0x424A             RSBS     R2,R1,#+0
   \   000002F4   0xE000             B.N      ??v_ImageCut_14
   \                     ??v_ImageCut_13: (+1)
   \   000002F6   0x000A             MOVS     R2,R1
   \                     ??v_ImageCut_14: (+1)
   \   000002F8   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000002FC   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000002FE   0x4592             CMP      R10,R2
   \   00000300   0xDA0D             BGE.N    ??v_ImageCut_15
   \   00000302   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000306   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000308   0x4591             CMP      R9,R2
   \   0000030A   0xDA08             BGE.N    ??v_ImageCut_15
   \   0000030C   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000030E   0x2900             CMP      R1,#+0
   \   00000310   0xD505             BPL.N    ??v_ImageCut_15
   \   00000312   0xF88D 0x7030      STRB     R7,[SP, #+48]
   \   00000316   0x2001             MOVS     R0,#+1
   \   00000318   0xF88D 0x0033      STRB     R0,[SP, #+51]
   \   0000031C   0x2001             MOVS     R0,#+1
   \                     ??v_ImageCut_15: (+1)
   \   0000031E   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000322   0xF1B8 0x0F02      CMP      R8,#+2
   \   00000326   0xDB28             BLT.N    ??v_ImageCut_16
   \   00000328   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000032A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000032C   0x21B9             MOVS     R1,#+185
   \   0000032E   0xF8DF 0x29E8      LDR.W    R2,??v_ImageCut_0+0xC
   \   00000332   0xFB01 0x2107      MLA      R1,R1,R7,R2
   \   00000336   0x5C71             LDRB     R1,[R6, R1]
   \   00000338   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000033A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000033C   0x22B9             MOVS     R2,#+185
   \   0000033E   0xF8DF 0x39D8      LDR.W    R3,??v_ImageCut_0+0xC
   \   00000342   0xFB02 0x3207      MLA      R2,R2,R7,R3
   \   00000346   0x18B2             ADDS     R2,R6,R2
   \   00000348   0xF5B2 0x72B9      SUBS     R2,R2,#+370
   \   0000034C   0x7812             LDRB     R2,[R2, #+0]
   \   0000034E   0x1A89             SUBS     R1,R1,R2
   \   00000350   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000352   0x2900             CMP      R1,#+0
   \   00000354   0xD502             BPL.N    ??v_ImageCut_17
   \   00000356   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000358   0x424A             RSBS     R2,R1,#+0
   \   0000035A   0xE000             B.N      ??v_ImageCut_18
   \                     ??v_ImageCut_17: (+1)
   \   0000035C   0x000A             MOVS     R2,R1
   \                     ??v_ImageCut_18: (+1)
   \   0000035E   0xF8BD 0x303A      LDRH     R3,[SP, #+58]
   \   00000362   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000364   0x4293             CMP      R3,R2
   \   00000366   0xDA08             BGE.N    ??v_ImageCut_16
   \   00000368   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000036A   0x2900             CMP      R1,#+0
   \   0000036C   0xD505             BPL.N    ??v_ImageCut_16
   \   0000036E   0xF88D 0x7030      STRB     R7,[SP, #+48]
   \   00000372   0x2001             MOVS     R0,#+1
   \   00000374   0xF88D 0x0033      STRB     R0,[SP, #+51]
   \   00000378   0x2001             MOVS     R0,#+1
   \                     ??v_ImageCut_16: (+1)
   \   0000037A   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000037E   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000382   0x45D1             CMP      R9,R10
   \   00000384   0xD201             BCS.N    ??v_ImageCut_19
   \   00000386   0x46D1             MOV      R9,R10
   \   00000388   0xE7FF             B.N      ??v_ImageCut_20
   \                     ??v_ImageCut_19: (+1)
   \                     ??v_ImageCut_20: (+1)
   \   0000038A   0xF8AD 0x903A      STRH     R9,[SP, #+58]
   \                     ??v_ImageCut_12: (+1)
   \   0000038E   0xF05F 0x0900      MOVS     R9,#+0
   \   00000392   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000396   0x2100             MOVS     R1,#+0
   \   00000398   0x2200             MOVS     R2,#+0
   \   0000039A   0x23FF             MOVS     R3,#+255
   \   0000039C   0xF05F 0x0C00      MOVS     R12,#+0
   \   000003A0   0xF05F 0x0E00      MOVS     LR,#+0
   \   000003A4   0xE04E             B.N      ??v_ImageCut_21
   \                     ??v_ImageCut_22: (+1)
   \   000003A6   0xFA1F 0xFE8E      UXTH     LR,LR            ;; ZeroExt  LR,LR,#+16,#+16
   \   000003AA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000003AC   0xF05F 0x09B9      MOVS     R9,#+185
   \   000003B0   0xF8DF 0xA964      LDR.W    R10,??v_ImageCut_0+0xC
   \   000003B4   0xFB09 0xA907      MLA      R9,R9,R7,R10
   \   000003B8   0xF81E 0x9009      LDRB     R9,[LR, R9]
   \   000003BC   0xF1B9 0x0F00      CMP      R9,#+0
   \   000003C0   0xD03E             BEQ.N    ??v_ImageCut_23
   \   000003C2   0xF11C 0x0C01      ADDS     R12,R12,#+1
   \   000003C6   0xFA1F 0xFE8E      UXTH     LR,LR            ;; ZeroExt  LR,LR,#+16,#+16
   \   000003CA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000003CC   0xF05F 0x09B9      MOVS     R9,#+185
   \   000003D0   0xF8DF 0xA944      LDR.W    R10,??v_ImageCut_0+0xC
   \   000003D4   0xFB09 0xA907      MLA      R9,R9,R7,R10
   \   000003D8   0xF81E 0x9009      LDRB     R9,[LR, R9]
   \   000003DC   0xFA51 0xF189      UXTAB    R1,R1,R9
   \   000003E0   0xFA1F 0xFE8E      UXTH     LR,LR            ;; ZeroExt  LR,LR,#+16,#+16
   \   000003E4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000003E6   0xF05F 0x09B9      MOVS     R9,#+185
   \   000003EA   0xF8DF 0xA92C      LDR.W    R10,??v_ImageCut_0+0xC
   \   000003EE   0xFB09 0xA907      MLA      R9,R9,R7,R10
   \   000003F2   0xF81E 0x9009      LDRB     R9,[LR, R9]
   \   000003F6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003F8   0x454A             CMP      R2,R9
   \   000003FA   0xD209             BCS.N    ??v_ImageCut_24
   \   000003FC   0xFA1F 0xFE8E      UXTH     LR,LR            ;; ZeroExt  LR,LR,#+16,#+16
   \   00000400   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000402   0x22B9             MOVS     R2,#+185
   \   00000404   0xF8DF 0x9910      LDR.W    R9,??v_ImageCut_0+0xC
   \   00000408   0xFB02 0x9207      MLA      R2,R2,R7,R9
   \   0000040C   0xF81E 0x2002      LDRB     R2,[LR, R2]
   \                     ??v_ImageCut_24: (+1)
   \   00000410   0xFA1F 0xFE8E      UXTH     LR,LR            ;; ZeroExt  LR,LR,#+16,#+16
   \   00000414   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000416   0xF05F 0x09B9      MOVS     R9,#+185
   \   0000041A   0xF8DF 0xA8FC      LDR.W    R10,??v_ImageCut_0+0xC
   \   0000041E   0xFB09 0xA907      MLA      R9,R9,R7,R10
   \   00000422   0xF81E 0x9009      LDRB     R9,[LR, R9]
   \   00000426   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000428   0x4599             CMP      R9,R3
   \   0000042A   0xD209             BCS.N    ??v_ImageCut_23
   \   0000042C   0xFA1F 0xFE8E      UXTH     LR,LR            ;; ZeroExt  LR,LR,#+16,#+16
   \   00000430   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000432   0x23B9             MOVS     R3,#+185
   \   00000434   0xF8DF 0x98E0      LDR.W    R9,??v_ImageCut_0+0xC
   \   00000438   0xFB03 0x9307      MLA      R3,R3,R7,R9
   \   0000043C   0xF81E 0x3003      LDRB     R3,[LR, R3]
   \                     ??v_ImageCut_23: (+1)
   \   00000440   0xF11E 0x0E01      ADDS     LR,LR,#+1
   \                     ??v_ImageCut_21: (+1)
   \   00000444   0xF8BD 0x9016      LDRH     R9,[SP, #+22]
   \   00000448   0xFA1F 0xFE8E      UXTH     LR,LR            ;; ZeroExt  LR,LR,#+16,#+16
   \   0000044C   0x45CE             CMP      LR,R9
   \   0000044E   0xD3AA             BCC.N    ??v_ImageCut_22
   \   00000450   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000454   0xFBB1 0xF9FC      UDIV     R9,R1,R12
   \   00000458   0xEBB2 0x0A03      SUBS     R10,R2,R3
   \   0000045C   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000460   0xEE00 0xAA10      VMOV     S0,R10
   \   00000464   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000468   0xEDDF 0x0A35      VLDR.W   S1,??v_ImageCut_6+0x4  ;; 0x3ecccccd
   \   0000046C   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000470   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000474   0xEE10 0xAA10      VMOV     R10,S0
   \   00000478   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000047C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000480   0xEE00 0x9A10      VMOV     S0,R9
   \   00000484   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000488   0xEDDF 0x0A2D      VLDR.W   S1,??v_ImageCut_6+0x4  ;; 0x3ecccccd
   \   0000048C   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000490   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000494   0xEE10 0x9A10      VMOV     R9,S0
   \   00000498   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000049C   0xF8BD 0x102C      LDRH     R1,[SP, #+44]
   \   000004A0   0xEE00 0x1A10      VMOV     S0,R1
   \   000004A4   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   000004A8   0xEDDF 0x0A26      VLDR.W   S1,??v_ImageCut_6+0x8  ;; 0x3fb4fdf4
   \   000004AC   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000004B0   0xEEF7 0x0A04      VMOV.F32 S1,#1.25
   \   000004B4   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000004B8   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   000004BC   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   000004C0   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000004C4   0xEE10 0x1A10      VMOV     R1,S0
   \   000004C8   0x198A             ADDS     R2,R1,R6
   \   000004CA   0x1A73             SUBS     R3,R6,R1
   \   000004CC   0x0011             MOVS     R1,R2
   \   000004CE   0xF8BD 0xC016      LDRH     R12,[SP, #+22]
   \   000004D2   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000004D4   0xEBBC 0x0C04      SUBS     R12,R12,R4
   \   000004D8   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000004DA   0x4594             CMP      R12,R2
   \   000004DC   0xDA02             BGE.N    ??v_ImageCut_25
   \   000004DE   0xF8BD 0x1016      LDRH     R1,[SP, #+22]
   \   000004E2   0x1B09             SUBS     R1,R1,R4
   \                     ??v_ImageCut_25: (+1)
   \   000004E4   0x001A             MOVS     R2,R3
   \   000004E6   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   000004E8   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000004EA   0x42A3             CMP      R3,R4
   \   000004EC   0xDA00             BGE.N    ??v_ImageCut_26
   \   000004EE   0x0022             MOVS     R2,R4
   \                     ??v_ImageCut_26: (+1)
   \   000004F0   0xF89D 0x3009      LDRB     R3,[SP, #+9]
   \   000004F4   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   000004F6   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   000004FA   0x4543             CMP      R3,R8
   \   000004FC   0xDB04             BLT.N    ??v_ImageCut_27
   \   000004FE   0x1922             ADDS     R2,R4,R4
   \   00000500   0xF8BD 0x1016      LDRH     R1,[SP, #+22]
   \   00000504   0x1B09             SUBS     R1,R1,R4
   \   00000506   0x1B09             SUBS     R1,R1,R4
   \                     ??v_ImageCut_27: (+1)
   \   00000508   0xF89D 0x3027      LDRB     R3,[SP, #+39]
   \   0000050C   0x2B01             CMP      R3,#+1
   \   0000050E   0xD10C             BNE.N    ??v_ImageCut_28
   \   00000510   0xF89D 0x3024      LDRB     R3,[SP, #+36]
   \   00000514   0x2B0A             CMP      R3,#+10
   \   00000516   0xD103             BNE.N    ??v_ImageCut_29
   \   00000518   0xF8BD 0x1016      LDRH     R1,[SP, #+22]
   \   0000051C   0x1B09             SUBS     R1,R1,R4
   \   0000051E   0x1B09             SUBS     R1,R1,R4
   \                     ??v_ImageCut_29: (+1)
   \   00000520   0xF89D 0x3024      LDRB     R3,[SP, #+36]
   \   00000524   0x2B14             CMP      R3,#+20
   \   00000526   0xD100             BNE.N    ??v_ImageCut_28
   \   00000528   0x1922             ADDS     R2,R4,R4
   \                     ??v_ImageCut_28: (+1)
   \   0000052A   0x2300             MOVS     R3,#+0
   \   0000052C   0xF88D 0x3013      STRB     R3,[SP, #+19]
   \   00000530   0x2300             MOVS     R3,#+0
   \   00000532   0xF88D 0x3011      STRB     R3,[SP, #+17]
   \   00000536   0x0033             MOVS     R3,R6
   \   00000538   0xE00E             B.N      ??v_ImageCut_30
   \   0000053A   0xBF00             Nop      
   \                     ??v_ImageCut_6:
   \   0000053C   0x3F800001         DC32     0x3f800001
   \   00000540   0x3ECCCCCD         DC32     0x3ecccccd
   \   00000544   0x3FB4FDF4         DC32     0x3fb4fdf4
   \                     ??v_ImageCut_31: (+1)
   \   00000548   0x469E             MOV      LR,R3
   \   0000054A   0xF88D 0xE01A      STRB     LR,[SP, #+26]
   \   0000054E   0xF05F 0x0E01      MOVS     LR,#+1
   \   00000552   0xF88D 0xE013      STRB     LR,[SP, #+19]
   \                     ??v_ImageCut_32: (+1)
   \   00000556   0x1C5B             ADDS     R3,R3,#+1
   \                     ??v_ImageCut_30: (+1)
   \   00000558   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000055A   0xFA04 0xFC83      SXTAH    R12,R4,R3
   \   0000055E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000560   0x458C             CMP      R12,R1
   \   00000562   0xDA3C             BGE.N    ??v_ImageCut_33
   \   00000564   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00000566   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000568   0xF05F 0x0CB9      MOVS     R12,#+185
   \   0000056C   0xF8DF 0xE7A8      LDR.W    LR,??v_ImageCut_0+0xC
   \   00000570   0xFB0C 0xEC07      MLA      R12,R12,R7,LR
   \   00000574   0xF813 0xC00C      LDRB     R12,[R3, R12]
   \   00000578   0xF8CD 0xC000      STR      R12,[SP, #+0]
   \   0000057C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000057E   0xFA04 0xFC83      SXTAH    R12,R4,R3
   \   00000582   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000584   0xF05F 0x0BB9      MOVS     R11,#+185
   \   00000588   0xF8DF 0xE78C      LDR.W    LR,??v_ImageCut_0+0xC
   \   0000058C   0xFB0B 0xEE07      MLA      LR,R11,R7,LR
   \   00000590   0xF81C 0xE00E      LDRB     LR,[R12, LR]
   \   00000594   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \   00000598   0xEBBC 0x0C0E      SUBS     R12,R12,LR
   \   0000059C   0xFA0F 0xFC8C      SXTH     R12,R12          ;; SignExt  R12,R12,#+16,#+16
   \   000005A0   0xF1BC 0x0F00      CMP      R12,#+0
   \   000005A4   0xD504             BPL.N    ??v_ImageCut_34
   \   000005A6   0xFA0F 0xFC8C      SXTH     R12,R12          ;; SignExt  R12,R12,#+16,#+16
   \   000005AA   0xF1DC 0x0E00      RSBS     LR,R12,#+0
   \   000005AE   0xE000             B.N      ??v_ImageCut_35
   \                     ??v_ImageCut_34: (+1)
   \   000005B0   0x46E6             MOV      LR,R12
   \                     ??v_ImageCut_35: (+1)
   \   000005B2   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000005B6   0xFA0F 0xFE8E      SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \   000005BA   0x45F2             CMP      R10,LR
   \   000005BC   0xDACB             BGE.N    ??v_ImageCut_32
   \   000005BE   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000005C2   0xFA0F 0xFE8E      SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \   000005C6   0x45F1             CMP      R9,LR
   \   000005C8   0xDAC5             BGE.N    ??v_ImageCut_32
   \   000005CA   0xFA0F 0xFC8C      SXTH     R12,R12          ;; SignExt  R12,R12,#+16,#+16
   \   000005CE   0xF1BC 0x0F01      CMP      R12,#+1
   \   000005D2   0xDBB9             BLT.N    ??v_ImageCut_31
   \   000005D4   0xF88D 0x3018      STRB     R3,[SP, #+24]
   \   000005D8   0x2101             MOVS     R1,#+1
   \   000005DA   0xF88D 0x1011      STRB     R1,[SP, #+17]
   \                     ??v_ImageCut_33: (+1)
   \   000005DE   0x2100             MOVS     R1,#+0
   \   000005E0   0xF88D 0x1012      STRB     R1,[SP, #+18]
   \   000005E4   0x2100             MOVS     R1,#+0
   \   000005E6   0xF88D 0x1010      STRB     R1,[SP, #+16]
   \   000005EA   0x0031             MOVS     R1,R6
   \   000005EC   0xE006             B.N      ??v_ImageCut_36
   \                     ??v_ImageCut_37: (+1)
   \   000005EE   0x000B             MOVS     R3,R1
   \   000005F0   0xF88D 0x301B      STRB     R3,[SP, #+27]
   \   000005F4   0x2301             MOVS     R3,#+1
   \   000005F6   0xF88D 0x3012      STRB     R3,[SP, #+18]
   \                     ??v_ImageCut_38: (+1)
   \   000005FA   0x1E49             SUBS     R1,R1,#+1
   \                     ??v_ImageCut_36: (+1)
   \   000005FC   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000005FE   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000600   0x1B0B             SUBS     R3,R1,R4
   \   00000602   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000604   0x4293             CMP      R3,R2
   \   00000606   0xDB32             BLT.N    ??v_ImageCut_39
   \   00000608   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000060A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000060C   0x23B9             MOVS     R3,#+185
   \   0000060E   0xF8DF 0xC708      LDR.W    R12,??v_ImageCut_0+0xC
   \   00000612   0xFB03 0xC307      MLA      R3,R3,R7,R12
   \   00000616   0x5CCB             LDRB     R3,[R1, R3]
   \   00000618   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000061A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000061C   0xEBB1 0x0C04      SUBS     R12,R1,R4
   \   00000620   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000622   0xF05F 0x0EB9      MOVS     LR,#+185
   \   00000626   0xF8DF 0xB6F0      LDR.W    R11,??v_ImageCut_0+0xC
   \   0000062A   0xFB0E 0xBE07      MLA      LR,LR,R7,R11
   \   0000062E   0xF81C 0xC00E      LDRB     R12,[R12, LR]
   \   00000632   0xEBB3 0x030C      SUBS     R3,R3,R12
   \   00000636   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00000638   0x2B00             CMP      R3,#+0
   \   0000063A   0xD503             BPL.N    ??v_ImageCut_40
   \   0000063C   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   0000063E   0xF1D3 0x0C00      RSBS     R12,R3,#+0
   \   00000642   0xE000             B.N      ??v_ImageCut_41
   \                     ??v_ImageCut_40: (+1)
   \   00000644   0x469C             MOV      R12,R3
   \                     ??v_ImageCut_41: (+1)
   \   00000646   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000064A   0xFA0F 0xFC8C      SXTH     R12,R12          ;; SignExt  R12,R12,#+16,#+16
   \   0000064E   0x45E2             CMP      R10,R12
   \   00000650   0xDAD3             BGE.N    ??v_ImageCut_38
   \   00000652   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000656   0xFA0F 0xFC8C      SXTH     R12,R12          ;; SignExt  R12,R12,#+16,#+16
   \   0000065A   0x45E1             CMP      R9,R12
   \   0000065C   0xDACD             BGE.N    ??v_ImageCut_38
   \   0000065E   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00000660   0x2B01             CMP      R3,#+1
   \   00000662   0xDBC4             BLT.N    ??v_ImageCut_37
   \   00000664   0xF88D 0x1019      STRB     R1,[SP, #+25]
   \   00000668   0x2101             MOVS     R1,#+1
   \   0000066A   0xF88D 0x1010      STRB     R1,[SP, #+16]
   \                     ??v_ImageCut_39: (+1)
   \   0000066E   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000672   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000676   0xD107             BNE.N    ??v_ImageCut_42
   \   00000678   0xF89D 0x101B      LDRB     R1,[SP, #+27]
   \   0000067C   0xF88D 0x101C      STRB     R1,[SP, #+28]
   \   00000680   0xF89D 0x101A      LDRB     R1,[SP, #+26]
   \   00000684   0xF88D 0x101D      STRB     R1,[SP, #+29]
   \                     ??v_ImageCut_42: (+1)
   \   00000688   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000068A   0x2801             CMP      R0,#+1
   \   0000068C   0xD133             BNE.N    ??v_ImageCut_43
   \   0000068E   0xF89D 0x001A      LDRB     R0,[SP, #+26]
   \   00000692   0x28FF             CMP      R0,#+255
   \   00000694   0xD05B             BEQ.N    ??v_ImageCut_44
   \   00000696   0xF89D 0x001B      LDRB     R0,[SP, #+27]
   \   0000069A   0x28FF             CMP      R0,#+255
   \   0000069C   0xD057             BEQ.N    ??v_ImageCut_44
   \   0000069E   0xF89D 0x001A      LDRB     R0,[SP, #+26]
   \   000006A2   0xF89D 0x101B      LDRB     R1,[SP, #+27]
   \   000006A6   0x1A40             SUBS     R0,R0,R1
   \   000006A8   0x.... 0x....      BL       __aeabi_i2d
   \   000006AC   0x0002             MOVS     R2,R0
   \   000006AE   0x000B             MOVS     R3,R1
   \   000006B0   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   000006B4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000006B6   0xF8DF 0x065C      LDR.W    R0,??v_ImageCut_0+0x8
   \   000006BA   0xEB10 0x0047      ADDS     R0,R0,R7, LSL #+1
   \   000006BE   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   000006C2   0xEE00 0x0A10      VMOV     S0,R0
   \   000006C6   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000006CA   0xEEF2 0x0A0E      VMOV.F32 S1,#15.0
   \   000006CE   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   000006D2   0xEE10 0x0A10      VMOV     R0,S0
   \   000006D6   0x.... 0x....      BL       __aeabi_f2d
   \   000006DA   0xF8DF 0x2BEC      LDR.W    R2,??v_ImageCut_45  ;; 0x76c8b439
   \   000006DE   0xF8DF 0x3BEC      LDR.W    R3,??v_ImageCut_45+0x4  ;; 0x3ff69fbe
   \   000006E2   0x.... 0x....      BL       __aeabi_dmul
   \   000006E6   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   000006EA   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000006EE   0xD82E             BHI.N    ??v_ImageCut_44
   \   000006F0   0xF88D 0x7015      STRB     R7,[SP, #+21]
   \   000006F4   0x2000             MOVS     R0,#+0
   \                     ??v_ImageCut_43: (+1)
   \   000006F6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000006F8   0xF8DF 0x0618      LDR.W    R0,??v_ImageCut_0+0x8
   \   000006FC   0x1838             ADDS     R0,R7,R0
   \   000006FE   0x21FF             MOVS     R1,#+255
   \   00000700   0xF880 0x10E0      STRB     R1,[R0, #+224]
   \   00000704   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000706   0xF8DF 0x060C      LDR.W    R0,??v_ImageCut_0+0x8
   \   0000070A   0x1838             ADDS     R0,R7,R0
   \   0000070C   0x21FF             MOVS     R1,#+255
   \   0000070E   0xF880 0x111C      STRB     R1,[R0, #+284]
   \   00000712   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000716   0xF89D 0x1011      LDRB     R1,[SP, #+17]
   \   0000071A   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   0000071E   0x2802             CMP      R0,#+2
   \   00000720   0xF040 0x8296      BNE.W    ??v_ImageCut_46
   \   00000724   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000726   0xA816             ADD      R0,SP,#+88
   \   00000728   0x211E             MOVS     R1,#+30
   \   0000072A   0x5439             STRB     R1,[R7, R0]
   \   0000072C   0x2000             MOVS     R0,#+0
   \   0000072E   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000732   0xF89D 0x0019      LDRB     R0,[SP, #+25]
   \   00000736   0xF89D 0x1018      LDRB     R1,[SP, #+24]
   \   0000073A   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   0000073E   0x2102             MOVS     R1,#+2
   \   00000740   0xFB90 0xF5F1      SDIV     R5,R0,R1
   \   00000744   0x2002             MOVS     R0,#+2
   \   00000746   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   0000074A   0xF000 0xBC1B      B.W      ??v_ImageCut_47
   \                     ??v_ImageCut_44: (+1)
   \   0000074E   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000752   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000756   0xF2C0 0x8258      BLT.W    ??v_ImageCut_48
   \   0000075A   0xF89D 0x0027      LDRB     R0,[SP, #+39]
   \   0000075E   0x2800             CMP      R0,#+0
   \   00000760   0xF040 0x8253      BNE.W    ??v_ImageCut_48
   \   00000764   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000766   0xA816             ADD      R0,SP,#+88
   \   00000768   0x1838             ADDS     R0,R7,R0
   \   0000076A   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000076E   0x281E             CMP      R0,#+30
   \   00000770   0xF040 0x824B      BNE.W    ??v_ImageCut_48
   \   00000774   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000776   0xF8DF 0x059C      LDR.W    R0,??v_ImageCut_0+0x8
   \   0000077A   0x1838             ADDS     R0,R7,R0
   \   0000077C   0xF890 0x0067      LDRB     R0,[R0, #+103]
   \   00000780   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000782   0xF8DF 0x1590      LDR.W    R1,??v_ImageCut_0+0x8
   \   00000786   0x1879             ADDS     R1,R7,R1
   \   00000788   0xF891 0x102B      LDRB     R1,[R1, #+43]
   \   0000078C   0x1A40             SUBS     R0,R0,R1
   \   0000078E   0x2800             CMP      R0,#+0
   \   00000790   0xD50D             BPL.N    ??v_ImageCut_49
   \   00000792   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000794   0xF8DF 0x057C      LDR.W    R0,??v_ImageCut_0+0x8
   \   00000798   0x1838             ADDS     R0,R7,R0
   \   0000079A   0xF890 0x002B      LDRB     R0,[R0, #+43]
   \   0000079E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000007A0   0xF8DF 0x1570      LDR.W    R1,??v_ImageCut_0+0x8
   \   000007A4   0x1879             ADDS     R1,R7,R1
   \   000007A6   0xF891 0x1067      LDRB     R1,[R1, #+103]
   \   000007AA   0x1A40             SUBS     R0,R0,R1
   \   000007AC   0xE00C             B.N      ??v_ImageCut_50
   \                     ??v_ImageCut_49: (+1)
   \   000007AE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000007B0   0xF8DF 0x0560      LDR.W    R0,??v_ImageCut_0+0x8
   \   000007B4   0x1838             ADDS     R0,R7,R0
   \   000007B6   0xF890 0x0067      LDRB     R0,[R0, #+103]
   \   000007BA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000007BC   0xF8DF 0x1554      LDR.W    R1,??v_ImageCut_0+0x8
   \   000007C0   0x1879             ADDS     R1,R7,R1
   \   000007C2   0xF891 0x102B      LDRB     R1,[R1, #+43]
   \   000007C6   0x1A40             SUBS     R0,R0,R1
   \                     ??v_ImageCut_50: (+1)
   \   000007C8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000007CA   0xF8DF 0x1548      LDR.W    R1,??v_ImageCut_0+0x8
   \   000007CE   0xEB11 0x0147      ADDS     R1,R1,R7, LSL #+1
   \   000007D2   0xF9B1 0x1156      LDRSH    R1,[R1, #+342]
   \   000007D6   0x2205             MOVS     R2,#+5
   \   000007D8   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000007DC   0x4281             CMP      R1,R0
   \   000007DE   0xF2C0 0x8214      BLT.W    ??v_ImageCut_48
   \   000007E2   0x2048             MOVS     R0,#+72
   \   000007E4   0xF88D 0x0014      STRB     R0,[SP, #+20]
   \   000007E8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000007EA   0xF8DF 0x0528      LDR.W    R0,??v_ImageCut_0+0x8
   \   000007EE   0x1838             ADDS     R0,R7,R0
   \   000007F0   0xF890 0x00A3      LDRB     R0,[R0, #+163]
   \   000007F4   0x1E79             SUBS     R1,R7,#+1
   \   000007F6   0x22FF             MOVS     R2,#+255
   \   000007F8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000007FA   0xF8DF 0x3518      LDR.W    R3,??v_ImageCut_0+0x8
   \   000007FE   0xEB13 0x0341      ADDS     R3,R3,R1, LSL #+1
   \   00000802   0xF9B3 0x3158      LDRSH    R3,[R3, #+344]
   \   00000806   0xF05F 0x0C02      MOVS     R12,#+2
   \   0000080A   0xFB93 0xF3FC      SDIV     R3,R3,R12
   \   0000080E   0xFA53 0xFC80      UXTAB    R12,R3,R0
   \   00000812   0xFA0F 0xFC8C      SXTH     R12,R12          ;; SignExt  R12,R12,#+16,#+16
   \   00000816   0xF1BC 0x0FB3      CMP      R12,#+179
   \   0000081A   0xDB01             BLT.N    ??v_ImageCut_51
   \   0000081C   0xF05F 0x0CB2      MOVS     R12,#+178
   \                     ??v_ImageCut_51: (+1)
   \   00000820   0xFA0F 0xFC8C      SXTH     R12,R12          ;; SignExt  R12,R12,#+16,#+16
   \   00000824   0xF1BC 0x0F06      CMP      R12,#+6
   \   00000828   0xDA01             BGE.N    ??v_ImageCut_52
   \   0000082A   0xF05F 0x0C06      MOVS     R12,#+6
   \                     ??v_ImageCut_52: (+1)
   \   0000082E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000830   0x0003             MOVS     R3,R0
   \   00000832   0xE000             B.N      ??v_ImageCut_53
   \                     ??v_ImageCut_54: (+1)
   \   00000834   0x1C5B             ADDS     R3,R3,#+1
   \                     ??v_ImageCut_53: (+1)
   \   00000836   0xFA0F 0xFC8C      SXTH     R12,R12          ;; SignExt  R12,R12,#+16,#+16
   \   0000083A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000083C   0xFA04 0xFE83      SXTAH    LR,R4,R3
   \   00000840   0x45F4             CMP      R12,LR
   \   00000842   0xDB3C             BLT.N    ??v_ImageCut_55
   \   00000844   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00000846   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000848   0xF05F 0x0EB9      MOVS     LR,#+185
   \   0000084C   0xF8DF 0xB4C8      LDR.W    R11,??v_ImageCut_0+0xC
   \   00000850   0xFB0E 0xBE01      MLA      LR,LR,R1,R11
   \   00000854   0xF813 0xE00E      LDRB     LR,[R3, LR]
   \   00000858   0xF8CD 0xE004      STR      LR,[SP, #+4]
   \   0000085C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000085E   0xFA04 0xFE83      SXTAH    LR,R4,R3
   \   00000862   0xF8CD 0xE000      STR      LR,[SP, #+0]
   \   00000866   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000868   0xF05F 0x0BB9      MOVS     R11,#+185
   \   0000086C   0xF8DF 0xE4A8      LDR.W    LR,??v_ImageCut_0+0xC
   \   00000870   0xFB0B 0xEE01      MLA      LR,R11,R1,LR
   \   00000874   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \   00000878   0xF81B 0xE00E      LDRB     LR,[R11, LR]
   \   0000087C   0xF8DD 0xB004      LDR      R11,[SP, #+4]
   \   00000880   0xEBBB 0x0E0E      SUBS     LR,R11,LR
   \   00000884   0xFA0F 0xFE8E      SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \   00000888   0xF1BE 0x0F00      CMP      LR,#+0
   \   0000088C   0xD504             BPL.N    ??v_ImageCut_56
   \   0000088E   0xFA0F 0xFE8E      SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \   00000892   0xF1DE 0x0B00      RSBS     R11,LR,#+0
   \   00000896   0xE000             B.N      ??v_ImageCut_57
   \                     ??v_ImageCut_56: (+1)
   \   00000898   0x46F3             MOV      R11,LR
   \                     ??v_ImageCut_57: (+1)
   \   0000089A   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000089E   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   000008A2   0x45DA             CMP      R10,R11
   \   000008A4   0xDAC6             BGE.N    ??v_ImageCut_54
   \   000008A6   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000008AA   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   000008AE   0x45D9             CMP      R9,R11
   \   000008B0   0xDAC0             BGE.N    ??v_ImageCut_54
   \   000008B2   0xFA0F 0xFE8E      SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \   000008B6   0xF1BE 0x0F00      CMP      LR,#+0
   \   000008BA   0xD5BB             BPL.N    ??v_ImageCut_54
   \   000008BC   0x18E2             ADDS     R2,R4,R3
   \                     ??v_ImageCut_55: (+1)
   \   000008BE   0x23FF             MOVS     R3,#+255
   \   000008C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000008C2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000008C4   0xF8DF 0xC44C      LDR.W    R12,??v_ImageCut_0+0x8
   \   000008C8   0xEB1C 0x0C41      ADDS     R12,R12,R1, LSL #+1
   \   000008CC   0xF9BC 0xC158      LDRSH    R12,[R12, #+344]
   \   000008D0   0xF05F 0x0E02      MOVS     LR,#+2
   \   000008D4   0xFB9C 0xFCFE      SDIV     R12,R12,LR
   \   000008D8   0xEBB0 0x0E0C      SUBS     LR,R0,R12
   \   000008DC   0xF8AD 0xE038      STRH     LR,[SP, #+56]
   \   000008E0   0xF9BD 0xC038      LDRSH    R12,[SP, #+56]
   \   000008E4   0xF1BC 0x0FB3      CMP      R12,#+179
   \   000008E8   0xDB01             BLT.N    ??v_ImageCut_58
   \   000008EA   0xF05F 0x0CB2      MOVS     R12,#+178
   \                     ??v_ImageCut_58: (+1)
   \   000008EE   0xF9BD 0xC038      LDRSH    R12,[SP, #+56]
   \   000008F2   0xF1BC 0x0F06      CMP      R12,#+6
   \   000008F6   0xDA01             BGE.N    ??v_ImageCut_59
   \   000008F8   0xF05F 0x0C06      MOVS     R12,#+6
   \                     ??v_ImageCut_59: (+1)
   \   000008FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000008FE   0x4684             MOV      R12,R0
   \   00000900   0xE001             B.N      ??v_ImageCut_60
   \                     ??v_ImageCut_61: (+1)
   \   00000902   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \                     ??v_ImageCut_60: (+1)
   \   00000906   0xFA0F 0xFC8C      SXTH     R12,R12          ;; SignExt  R12,R12,#+16,#+16
   \   0000090A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000090C   0xEBBC 0x0E04      SUBS     LR,R12,R4
   \   00000910   0xF9BD 0xB038      LDRSH    R11,[SP, #+56]
   \   00000914   0x45DE             CMP      LR,R11
   \   00000916   0xDB40             BLT.N    ??v_ImageCut_62
   \   00000918   0xFA0F 0xFC8C      SXTH     R12,R12          ;; SignExt  R12,R12,#+16,#+16
   \   0000091C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000091E   0xF05F 0x0EB9      MOVS     LR,#+185
   \   00000922   0xF8DF 0xB3F4      LDR.W    R11,??v_ImageCut_0+0xC
   \   00000926   0xFB0E 0xBE01      MLA      LR,LR,R1,R11
   \   0000092A   0xF81C 0xE00E      LDRB     LR,[R12, LR]
   \   0000092E   0xF8CD 0xE004      STR      LR,[SP, #+4]
   \   00000932   0xFA0F 0xFC8C      SXTH     R12,R12          ;; SignExt  R12,R12,#+16,#+16
   \   00000936   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000938   0xEBBC 0x0E04      SUBS     LR,R12,R4
   \   0000093C   0xF8CD 0xE000      STR      LR,[SP, #+0]
   \   00000940   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000942   0xF05F 0x0BB9      MOVS     R11,#+185
   \   00000946   0xF8DF 0xE3D0      LDR.W    LR,??v_ImageCut_0+0xC
   \   0000094A   0xFB0B 0xEE01      MLA      LR,R11,R1,LR
   \   0000094E   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \   00000952   0xF81B 0xE00E      LDRB     LR,[R11, LR]
   \   00000956   0xF8DD 0xB004      LDR      R11,[SP, #+4]
   \   0000095A   0xEBBB 0x0E0E      SUBS     LR,R11,LR
   \   0000095E   0xFA0F 0xFE8E      SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \   00000962   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000966   0xD504             BPL.N    ??v_ImageCut_63
   \   00000968   0xFA0F 0xFE8E      SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \   0000096C   0xF1DE 0x0B00      RSBS     R11,LR,#+0
   \   00000970   0xE000             B.N      ??v_ImageCut_64
   \                     ??v_ImageCut_63: (+1)
   \   00000972   0x46F3             MOV      R11,LR
   \                     ??v_ImageCut_64: (+1)
   \   00000974   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000978   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   0000097C   0x45DA             CMP      R10,R11
   \   0000097E   0xDAC0             BGE.N    ??v_ImageCut_61
   \   00000980   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000984   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   00000988   0x45D9             CMP      R9,R11
   \   0000098A   0xDABA             BGE.N    ??v_ImageCut_61
   \   0000098C   0xFA0F 0xFE8E      SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \   00000990   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000994   0xD5B5             BPL.N    ??v_ImageCut_61
   \   00000996   0xEBBC 0x0304      SUBS     R3,R12,R4
   \                     ??v_ImageCut_62: (+1)
   \   0000099A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000099C   0xF8DF 0xC374      LDR.W    R12,??v_ImageCut_0+0x8
   \   000009A0   0xEB11 0x0C0C      ADDS     R12,R1,R12
   \   000009A4   0xF89C 0xC02C      LDRB     R12,[R12, #+44]
   \   000009A8   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000009AA   0x4563             CMP      R3,R12
   \   000009AC   0xD30A             BCC.N    ??v_ImageCut_65
   \   000009AE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000009B0   0xF8DF 0xC360      LDR.W    R12,??v_ImageCut_0+0x8
   \   000009B4   0xEB11 0x0C0C      ADDS     R12,R1,R12
   \   000009B8   0xF89C 0xC02C      LDRB     R12,[R12, #+44]
   \   000009BC   0xF1BC 0x0FFF      CMP      R12,#+255
   \   000009C0   0xD000             BEQ.N    ??v_ImageCut_65
   \   000009C2   0x23FF             MOVS     R3,#+255
   \                     ??v_ImageCut_65: (+1)
   \   000009C4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000009C6   0xF8DF 0xC34C      LDR.W    R12,??v_ImageCut_0+0x8
   \   000009CA   0xEB11 0x0C0C      ADDS     R12,R1,R12
   \   000009CE   0xF89C 0xC068      LDRB     R12,[R12, #+104]
   \   000009D2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000009D4   0x4594             CMP      R12,R2
   \   000009D6   0xD309             BCC.N    ??v_ImageCut_66
   \   000009D8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000009DA   0xF8DF 0xC338      LDR.W    R12,??v_ImageCut_0+0x8
   \   000009DE   0xEB11 0x010C      ADDS     R1,R1,R12
   \   000009E2   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   000009E6   0x29FF             CMP      R1,#+255
   \   000009E8   0xD000             BEQ.N    ??v_ImageCut_66
   \   000009EA   0x22FF             MOVS     R2,#+255
   \                     ??v_ImageCut_66: (+1)
   \   000009EC   0xF8DF 0x1D9C      LDR.W    R1,??v_ImageCut_67
   \   000009F0   0xF881 0x3083      STRB     R3,[R1, #+131]
   \   000009F4   0xF8DF 0x1D94      LDR.W    R1,??v_ImageCut_67
   \   000009F8   0xF881 0x2084      STRB     R2,[R1, #+132]
   \   000009FC   0x2132             MOVS     R1,#+50
   \   000009FE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000A00   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A02   0xEBB2 0x0C00      SUBS     R12,R2,R0
   \   00000A06   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000A0A   0xD504             BPL.N    ??v_ImageCut_68
   \   00000A0C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A0E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000A10   0xEBB0 0x0C02      SUBS     R12,R0,R2
   \   00000A14   0xE003             B.N      ??v_ImageCut_69
   \                     ??v_ImageCut_68: (+1)
   \   00000A16   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000A18   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A1A   0xEBB2 0x0C00      SUBS     R12,R2,R0
   \                     ??v_ImageCut_69: (+1)
   \   00000A1E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000A20   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A22   0xEBB3 0x0E00      SUBS     LR,R3,R0
   \   00000A26   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000A2A   0xD504             BPL.N    ??v_ImageCut_70
   \   00000A2C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A2E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000A30   0xEBB0 0x0E03      SUBS     LR,R0,R3
   \   00000A34   0xE003             B.N      ??v_ImageCut_71
   \                     ??v_ImageCut_70: (+1)
   \   00000A36   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000A38   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A3A   0xEBB3 0x0E00      SUBS     LR,R3,R0
   \                     ??v_ImageCut_71: (+1)
   \   00000A3E   0x45F4             CMP      R12,LR
   \   00000A40   0xDA04             BGE.N    ??v_ImageCut_72
   \   00000A42   0x0010             MOVS     R0,R2
   \   00000A44   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A46   0x28FF             CMP      R0,#+255
   \   00000A48   0xD000             BEQ.N    ??v_ImageCut_72
   \   00000A4A   0x2114             MOVS     R1,#+20
   \                     ??v_ImageCut_72: (+1)
   \   00000A4C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000A4E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A50   0xEBB3 0x0C00      SUBS     R12,R3,R0
   \   00000A54   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000A58   0xD504             BPL.N    ??v_ImageCut_73
   \   00000A5A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A5C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000A5E   0xEBB0 0x0C03      SUBS     R12,R0,R3
   \   00000A62   0xE003             B.N      ??v_ImageCut_74
   \                     ??v_ImageCut_73: (+1)
   \   00000A64   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000A66   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A68   0xEBB3 0x0C00      SUBS     R12,R3,R0
   \                     ??v_ImageCut_74: (+1)
   \   00000A6C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000A6E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A70   0xEBB2 0x0E00      SUBS     LR,R2,R0
   \   00000A74   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000A78   0xD503             BPL.N    ??v_ImageCut_75
   \   00000A7A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A7C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000A7E   0x1A80             SUBS     R0,R0,R2
   \   00000A80   0xE002             B.N      ??v_ImageCut_76
   \                     ??v_ImageCut_75: (+1)
   \   00000A82   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000A84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A86   0x1A10             SUBS     R0,R2,R0
   \                     ??v_ImageCut_76: (+1)
   \   00000A88   0x4584             CMP      R12,R0
   \   00000A8A   0xDA04             BGE.N    ??v_ImageCut_77
   \   00000A8C   0x0018             MOVS     R0,R3
   \   00000A8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A90   0x28FF             CMP      R0,#+255
   \   00000A92   0xD000             BEQ.N    ??v_ImageCut_77
   \   00000A94   0x210A             MOVS     R1,#+10
   \                     ??v_ImageCut_77: (+1)
   \   00000A96   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000A98   0x2932             CMP      R1,#+50
   \   00000A9A   0xD129             BNE.N    ??v_ImageCut_78
   \   00000A9C   0x2132             MOVS     R1,#+50
   \   00000A9E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000AA0   0x1FB8             SUBS     R0,R7,#+6
   \   00000AA2   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000AA4   0x2800             CMP      R0,#+0
   \   00000AA6   0xD500             BPL.N    ??v_ImageCut_79
   \   00000AA8   0x2000             MOVS     R0,#+0
   \                     ??v_ImageCut_79: (+1)
   \   00000AAA   0x2300             MOVS     R3,#+0
   \   00000AAC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000AAE   0x1E7A             SUBS     R2,R7,#+1
   \   00000AB0   0xE012             B.N      ??v_ImageCut_80
   \                     ??v_ImageCut_81: (+1)
   \   00000AB2   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000AB4   0xF8DF 0xC25C      LDR.W    R12,??v_ImageCut_0+0x8
   \   00000AB8   0xEB12 0x0C0C      ADDS     R12,R2,R12
   \   00000ABC   0xF89C 0xC0A4      LDRB     R12,[R12, #+164]
   \   00000AC0   0xFA53 0xF38C      UXTAB    R3,R3,R12
   \   00000AC4   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000AC6   0xF8DF 0xC24C      LDR.W    R12,??v_ImageCut_0+0x8
   \   00000ACA   0xEB12 0x0C0C      ADDS     R12,R2,R12
   \   00000ACE   0xF89C 0xC0A3      LDRB     R12,[R12, #+163]
   \   00000AD2   0xEBB3 0x030C      SUBS     R3,R3,R12
   \   00000AD6   0x1E52             SUBS     R2,R2,#+1
   \                     ??v_ImageCut_80: (+1)
   \   00000AD8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000ADA   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000ADC   0x4290             CMP      R0,R2
   \   00000ADE   0xDBE8             BLT.N    ??v_ImageCut_81
   \   00000AE0   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00000AE2   0x2B00             CMP      R3,#+0
   \   00000AE4   0xD500             BPL.N    ??v_ImageCut_82
   \   00000AE6   0x2114             MOVS     R1,#+20
   \                     ??v_ImageCut_82: (+1)
   \   00000AE8   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00000AEA   0x2B01             CMP      R3,#+1
   \   00000AEC   0xDB00             BLT.N    ??v_ImageCut_78
   \   00000AEE   0x210A             MOVS     R1,#+10
   \                     ??v_ImageCut_78: (+1)
   \   00000AF0   0xF8DF 0x0C98      LDR.W    R0,??v_ImageCut_67
   \   00000AF4   0x70C1             STRB     R1,[R0, #+3]
   \   00000AF6   0x20FF             MOVS     R0,#+255
   \   00000AF8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000AFA   0x2914             CMP      R1,#+20
   \   00000AFC   0xD106             BNE.N    ??v_ImageCut_83
   \   00000AFE   0x2002             MOVS     R0,#+2
   \   00000B00   0xF88D 0x0022      STRB     R0,[SP, #+34]
   \   00000B04   0x204A             MOVS     R0,#+74
   \   00000B06   0xF88D 0x0014      STRB     R0,[SP, #+20]
   \   00000B0A   0xE008             B.N      ??v_ImageCut_84
   \                     ??v_ImageCut_83: (+1)
   \   00000B0C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000B0E   0x290A             CMP      R1,#+10
   \   00000B10   0xD105             BNE.N    ??v_ImageCut_84
   \   00000B12   0x2001             MOVS     R0,#+1
   \   00000B14   0xF88D 0x0022      STRB     R0,[SP, #+34]
   \   00000B18   0x206A             MOVS     R0,#+106
   \   00000B1A   0xF88D 0x0014      STRB     R0,[SP, #+20]
   \                     ??v_ImageCut_84: (+1)
   \   00000B1E   0xF88D 0x7026      STRB     R7,[SP, #+38]
   \   00000B22   0xF88D 0x1024      STRB     R1,[SP, #+36]
   \   00000B26   0x2001             MOVS     R0,#+1
   \   00000B28   0xF88D 0x0027      STRB     R0,[SP, #+39]
   \   00000B2C   0xF89D 0x0024      LDRB     R0,[SP, #+36]
   \   00000B30   0x280A             CMP      R0,#+10
   \   00000B32   0xD133             BNE.N    ??v_ImageCut_85
   \   00000B34   0x0030             MOVS     R0,R6
   \   00000B36   0xF88D 0x0018      STRB     R0,[SP, #+24]
   \   00000B3A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000B3C   0x0030             MOVS     R0,R6
   \   00000B3E   0x.... 0x....      BL       __aeabi_ui2d
   \   00000B42   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000B46   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000B48   0x4872             LDR.N    R0,??v_ImageCut_0+0x8
   \   00000B4A   0xEB10 0x0047      ADDS     R0,R0,R7, LSL #+1
   \   00000B4E   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   00000B52   0x.... 0x....      BL       __aeabi_i2d
   \   00000B56   0xF8DF 0x2C38      LDR.W    R2,??v_ImageCut_67+0x4  ;; 0xcccccccd
   \   00000B5A   0xF8DF 0x3C38      LDR.W    R3,??v_ImageCut_67+0x8  ;; 0x3fdccccc
   \   00000B5E   0x.... 0x....      BL       __aeabi_dmul
   \   00000B62   0x0002             MOVS     R2,R0
   \   00000B64   0x000B             MOVS     R3,R1
   \   00000B66   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000B6A   0x.... 0x....      BL       __aeabi_dsub
   \   00000B6E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000B72   0x0006             MOVS     R6,R0
   \   00000B74   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000B76   0x2F03             CMP      R7,#+3
   \   00000B78   0xDB09             BLT.N    ??v_ImageCut_86
   \   00000B7A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000B7C   0x4865             LDR.N    R0,??v_ImageCut_0+0x8
   \   00000B7E   0x1838             ADDS     R0,R7,R0
   \   00000B80   0xF880 0x60A3      STRB     R6,[R0, #+163]
   \   00000B84   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000B86   0x4863             LDR.N    R0,??v_ImageCut_0+0x8
   \   00000B88   0x1838             ADDS     R0,R7,R0
   \   00000B8A   0xF880 0x60A2      STRB     R6,[R0, #+162]
   \                     ??v_ImageCut_86: (+1)
   \   00000B8E   0x2000             MOVS     R0,#+0
   \   00000B90   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   00000B94   0x2001             MOVS     R0,#+1
   \   00000B96   0xF88D 0x0011      STRB     R0,[SP, #+17]
   \   00000B9A   0xE034             B.N      ??v_ImageCut_87
   \                     ??v_ImageCut_85: (+1)
   \   00000B9C   0xF89D 0x0024      LDRB     R0,[SP, #+36]
   \   00000BA0   0x2814             CMP      R0,#+20
   \   00000BA2   0xD130             BNE.N    ??v_ImageCut_87
   \   00000BA4   0x0030             MOVS     R0,R6
   \   00000BA6   0xF88D 0x0019      STRB     R0,[SP, #+25]
   \   00000BAA   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000BAC   0x0030             MOVS     R0,R6
   \   00000BAE   0x.... 0x....      BL       __aeabi_ui2d
   \   00000BB2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000BB6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000BB8   0x4856             LDR.N    R0,??v_ImageCut_0+0x8
   \   00000BBA   0xEB10 0x0047      ADDS     R0,R0,R7, LSL #+1
   \   00000BBE   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   00000BC2   0x.... 0x....      BL       __aeabi_i2d
   \   00000BC6   0xF8DF 0x2BC8      LDR.W    R2,??v_ImageCut_67+0x4  ;; 0xcccccccd
   \   00000BCA   0xF8DF 0x3BC8      LDR.W    R3,??v_ImageCut_67+0x8  ;; 0x3fdccccc
   \   00000BCE   0x.... 0x....      BL       __aeabi_dmul
   \   00000BD2   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00000BD6   0x.... 0x....      BL       __aeabi_dadd
   \   00000BDA   0x.... 0x....      BL       __aeabi_d2iz
   \   00000BDE   0x0006             MOVS     R6,R0
   \   00000BE0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000BE2   0x2F03             CMP      R7,#+3
   \   00000BE4   0xDB09             BLT.N    ??v_ImageCut_88
   \   00000BE6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000BE8   0x484A             LDR.N    R0,??v_ImageCut_0+0x8
   \   00000BEA   0x1838             ADDS     R0,R7,R0
   \   00000BEC   0xF880 0x60A3      STRB     R6,[R0, #+163]
   \   00000BF0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000BF2   0x4848             LDR.N    R0,??v_ImageCut_0+0x8
   \   00000BF4   0x1838             ADDS     R0,R7,R0
   \   00000BF6   0xF880 0x60A2      STRB     R6,[R0, #+162]
   \                     ??v_ImageCut_88: (+1)
   \   00000BFA   0x2001             MOVS     R0,#+1
   \   00000BFC   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   00000C00   0x2000             MOVS     R0,#+0
   \   00000C02   0xF88D 0x0011      STRB     R0,[SP, #+17]
   \                     ??v_ImageCut_87: (+1)
   \   00000C06   0x2000             MOVS     R0,#+0
   \   00000C08   0xE575             B.N      ??v_ImageCut_43
   \                     ??v_ImageCut_48: (+1)
   \   00000C0A   0xF89D 0xB030      LDRB     R11,[SP, #+48]
   1262                  }
   1263                  /*
   1264                  if(process_find_timer < 3)
   1265                  {//次数小于3的话
   1266                      if((x_startPos<=6)&&(Sid_Right == TrkSide[y_ctr]))
   1267                      {
   1268                          sint16 x_should_pos = (number_Trk.n_right_end + m_ImageAbstract.width[y_ctr]/9);//+5cm
   1269                          if(x_should_pos > 181){x_should_pos = 181;}
   1270                          if(x_should_pos < 3){x_should_pos = 3;}
   1271                          x_startPos = x_should_pos;
   1272                          uint8 MarkTimer = process_find_timer;
   1273                          while(0!=MarkTimer)
   1274                          {
   1275                              m_ImageAbstract.Central[y_ctr - MarkTimer] = x_startPos;
   1276                              MarkTimer--;
   1277                          }
   1278                      }
   1279                      if((x_startPos>=181-3)&&(Sid_Left == TrkSide[y_ctr]))
   1280                      {
   1281                          sint16 x_should_pos = (number_Trk.n_left_end - m_ImageAbstract.width[y_ctr]/9);//-5cm
   1282                          if(x_should_pos > 181){x_should_pos = 181;}
   1283                          if(x_should_pos < 3){x_should_pos = 3;}
   1284                          x_startPos = x_should_pos;
   1285                          uint8 MarkTimer = process_find_timer;
   1286                          while(0!=MarkTimer)
   1287                          {
   1288                              m_ImageAbstract.Central[y_ctr - MarkTimer] = x_startPos;
   1289                              MarkTimer--;
   1290                          }
   1291                      }
   1292                  }*/
   1293              }//单次结束 => 这里也是一次寻线结束
   1294              uint8 end_y_ctr_AfterFinder = end_y_ctr;
   1295              /*
   1296              if(1 == m_ImageAbstract.openTheRamp)
   1297              {
   1298                  uint8 isNeedJumpOut = 1;
   1299                  
   1300                  u_Side FirstSide = TrkSide[m_ImageAbstract.Start_Y_Position];
   1301                  uint8 FirstSideCounter = 0;
   1302                  uint8 DoubleSideCounter = 0;
   1303                  uint8 isOccurDoubleHave = 0;uint8 isOccurBreak = 0;
   1304                  
   1305                  for(uint8 loop = m_ImageAbstract.Start_Y_Position;loop < end_y_ctr;loop++)
   1306                  {
   1307                      if(Sid_Double != FirstSide)
   1308                      {
   1309                          if(FirstSide != TrkSide[loop]) 
   1310                          {
   1311                              isOccurDoubleHave = 1;
   1312                              if(Sid_Double != TrkSide[loop])
   1313                              {
   1314                                  isOccurBreak = 1;break;
   1315                              }
   1316                              else
   1317                              {
   1318                                  DoubleSideCounter++;
   1319                              }
   1320                          }else{if(0==isOccurDoubleHave){FirstSideCounter++;}else{isOccurBreak = 1;break;}}
   1321                      }
   1322                      else
   1323                      {
   1324                          DoubleSideCounter ++;
   1325                          if(FirstSide != TrkSide[loop]){isOccurBreak = 1;break;}
   1326                      }
   1327                  }
   1328                  
   1329                  //所以从这里可知，坡道的极致位置
   1330                  uint8 RampEndYLine = DoubleSideCounter + FirstSideCounter;//得到
   1331                  uint8 RampStartLine = FirstSideCounter;
   1332                  
   1333                  uint8 width_cut = 0;
   1334                  uint8 check_counter = 0;
   1335                  //float Ratio = 0.f;
   1336                  
   1337                  m_ImageTesting.RampStart = RampStartLine;
   1338                  m_ImageTesting.RampEnd = RampEndYLine;
   1339                  
   1340                  uint8 RightCutLeft_New = 0;
   1341                  
   1342                  for(uint8 loop = RampStartLine + 1;loop < RampEndYLine;loop++)
   1343                  {//这里就是全部的过程
   1344                      if((255 == m_ImageAbstract.Right[loop])||(255 == m_ImageAbstract.Left[loop]))
   1345                      {continue;}
   1346                      check_counter ++;
   1347                      uint8 RightCutLeft = m_ImageAbstract.Right[loop] - m_ImageAbstract.Left[loop];
   1348                      //float RatioNew = (float)RightCutLeft / (float)m_ImageAbstract.width[loop];
   1349                      if(1.25*RightCutLeft < RightCutLeft_New)
   1350                      {
   1351                          RampEndYLine = loop;
   1352                          isNeedJumpOut = 0;
   1353                          break;
   1354                      }
   1355                      RightCutLeft_New = RightCutLeft;
   1356                  }
   1357                  
   1358                  if(1 == isNeedJumpOut){goto endOfRampCut;}
   1359                   
   1360                  RightCutLeft_New = m_ImageAbstract.Right[RampStartLine + 1] - m_ImageAbstract.Left[RampStartLine + 1];
   1361                  sint16 cutChange = 0;sint16 cutChangeNew = 0;
   1362                  //sint16 cutChangeOK_Left = 0;sint16 cutChangeOK_Right = 0;
   1363                  uint8 RampExist = 0;//RampExist
   1364                  for(uint8 loop = RampStartLine + 1;loop < RampEndYLine;loop++)
   1365                  {
   1366                      uint8 RightCutLeft = m_ImageAbstract.Right[loop] - m_ImageAbstract.Left[loop];
   1367                      cutChange = RightCutLeft - RightCutLeft_New;
   1368                      
   1369                      if(loop > RampStartLine + 1)
   1370                      {
   1371                          if((!((cutChangeNew > -2*cutChange)&&(cutChangeNew < 2*cutChange)))&&(__ABS(cutChange)>3))
   1372                          {//这是判别，每次赛道两边的突变情况
   1373                              RampExist = 1;
   1374                              RampEndYLine = loop;//记录下应该的
   1375                              //将存在
   1376                              isNeedJumpOut = 0;
   1377                              break;
   1378                          }
   1379                      }
   1380                      
   1381                      cutChangeNew = cutChange;
   1382                      RightCutLeft_New = RightCutLeft;
   1383                  }
   1384                  if(1 == isNeedJumpOut){goto endOfRampCut;}
   1385          endOfRampCut://endOfRampCut => m_ImageAbstract.openTheRamp
   1386                  m_ImageAbstract.RampExist = RampExist;
   1387              }
   1388              */
   1389              
   1390              /*uint8 Back = 1;*/
   1391              if(/*(0 == Back)&&*/(1 == TurningBeacauseVeryLittle.isHappened)&&(0 == m_ImageAbstract.RtAngle_isLasting)&&(0 == m_ImageAbstract.isLonlyLineNow))
   \                     ??v_ImageCut_11: (+1)
   \   00000C0E   0xF89D 0x0027      LDRB     R0,[SP, #+39]
   \   00000C12   0x2801             CMP      R0,#+1
   \   00000C14   0xF040 0x850B      BNE.W    ??v_ImageCut_89
   \   00000C18   0x483E             LDR.N    R0,??v_ImageCut_0+0x8
   \   00000C1A   0xF890 0x01E0      LDRB     R0,[R0, #+480]
   \   00000C1E   0x2800             CMP      R0,#+0
   \   00000C20   0xF040 0x8505      BNE.W    ??v_ImageCut_89
   \   00000C24   0x483B             LDR.N    R0,??v_ImageCut_0+0x8
   \   00000C26   0x7900             LDRB     R0,[R0, #+4]
   \   00000C28   0x2800             CMP      R0,#+0
   \   00000C2A   0xF040 0x8500      BNE.W    ??v_ImageCut_89
   1392              {//弯入直角的黑块检测
   1393                  
   1394                  sint16 centralPos = 0;sint16 centralPos_n_add_one = 0;
   \   00000C2E   0x2100             MOVS     R1,#+0
   \   00000C30   0x2300             MOVS     R3,#+0
   1395                  TurningBeacauseVeryLittle__isHappened = 1;
   \   00000C32   0x2001             MOVS     R0,#+1
   1396                  
   1397                  uint8 lastLine = TurningBeacauseVeryLittle.y_end + 10;
   \   00000C34   0xF89D 0x2026      LDRB     R2,[SP, #+38]
   \   00000C38   0x320A             ADDS     R2,R2,#+10
   1398                  if(lastLine > end_y_ctr){lastLine = end_y_ctr;}
   \   00000C3A   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000C3E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000C40   0x4593             CMP      R11,R2
   \   00000C42   0xD200             BCS.N    ??v_ImageCut_90
   \   00000C44   0x465A             MOV      R2,R11
   1399                  for(uint8 loop = m_ImageAbstract.Start_Y_Position;loop < end_y_ctr;loop++)
   \                     ??v_ImageCut_90: (+1)
   \   00000C46   0x4833             LDR.N    R0,??v_ImageCut_0+0x8
   \   00000C48   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00000C4C   0xF000 0xBC40      B.W      ??v_ImageCut_91
   \                     ??v_ImageCut_46: (+1)
   \   00000C50   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000C54   0x2801             CMP      R0,#+1
   \   00000C56   0xD004             BEQ.N    ??v_ImageCut_92
   \   00000C58   0xF89D 0x0011      LDRB     R0,[SP, #+17]
   \   00000C5C   0x2801             CMP      R0,#+1
   \   00000C5E   0xF040 0x80C7      BNE.W    ??v_ImageCut_93
   \                     ??v_ImageCut_92: (+1)
   \   00000C62   0x2000             MOVS     R0,#+0
   \   00000C64   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000C68   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000C6C   0x2801             CMP      R0,#+1
   \   00000C6E   0xD155             BNE.N    ??v_ImageCut_94
   \   00000C70   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000C72   0xA816             ADD      R0,SP,#+88
   \   00000C74   0x210A             MOVS     R1,#+10
   \   00000C76   0x5439             STRB     R1,[R7, R0]
   \   00000C78   0xF89D 0x0019      LDRB     R0,[SP, #+25]
   \   00000C7C   0xEE00 0x0A10      VMOV     S0,R0
   \   00000C80   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000C84   0xF8BD 0x002C      LDRH     R0,[SP, #+44]
   \   00000C88   0xEE00 0x0A90      VMOV     S1,R0
   \   00000C8C   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00000C90   0xED9F 0x1AD1      VLDR.W   S2,??v_ImageCut_95  ;; 0x3ee66666
   \   00000C94   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000C98   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000C9C   0xEE10 0x5A10      VMOV     R5,S0
   \   00000CA0   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000CA2   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000CA4   0x42B5             CMP      R5,R6
   \   00000CA6   0xDA16             BGE.N    ??v_ImageCut_96
   \   00000CA8   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000CAC   0xF1B8 0x0F03      CMP      R8,#+3
   \   00000CB0   0xDB11             BLT.N    ??v_ImageCut_96
   \   00000CB2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000CB4   0x4817             LDR.N    R0,??v_ImageCut_0+0x8
   \   00000CB6   0x1838             ADDS     R0,R7,R0
   \   00000CB8   0xF890 0x00A3      LDRB     R0,[R0, #+163]
   \   00000CBC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000CBE   0x4915             LDR.N    R1,??v_ImageCut_0+0x8
   \   00000CC0   0x1879             ADDS     R1,R7,R1
   \   00000CC2   0xF891 0x10A2      LDRB     R1,[R1, #+162]
   \   00000CC6   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00000CCA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000CCC   0x4911             LDR.N    R1,??v_ImageCut_0+0x8
   \   00000CCE   0x1879             ADDS     R1,R7,R1
   \   00000CD0   0xF891 0x10A1      LDRB     R1,[R1, #+161]
   \   00000CD4   0x1A45             SUBS     R5,R0,R1
   \                     ??v_ImageCut_96: (+1)
   \   00000CD6   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   00000CDA   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000CDE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000CE0   0x4580             CMP      R8,R0
   \   00000CE2   0xDA6D             BGE.N    ??v_ImageCut_97
   \   00000CE4   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000CE8   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000CEC   0xDB68             BLT.N    ??v_ImageCut_97
   \   00000CEE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000CF0   0x4808             LDR.N    R0,??v_ImageCut_0+0x8
   \   00000CF2   0x1838             ADDS     R0,R7,R0
   \   00000CF4   0xF890 0x00A3      LDRB     R0,[R0, #+163]
   \   00000CF8   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000CFA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000CFC   0x4285             CMP      R5,R0
   \   00000CFE   0xDA5F             BGE.N    ??v_ImageCut_97
   \   00000D00   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000D02   0x4804             LDR.N    R0,??v_ImageCut_0+0x8
   \   00000D04   0x1838             ADDS     R0,R7,R0
   \   00000D06   0xF890 0x50A3      LDRB     R5,[R0, #+163]
   \   00000D0A   0xE059             B.N      ??v_ImageCut_97
   \                     ??v_ImageCut_0:
   \   00000D0C   0x........         DC32     m_Control
   \   00000D10   0xC1F00000         DC32     0xc1f00000
   \   00000D14   0x........         DC32     m_ImageAbstract
   \   00000D18   0x........         DC32     m_ImageBeholder_Data
   \                     ??v_ImageCut_94: (+1)
   \   00000D1C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000D1E   0xA816             ADD      R0,SP,#+88
   \   00000D20   0x2114             MOVS     R1,#+20
   \   00000D22   0x5439             STRB     R1,[R7, R0]
   \   00000D24   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   00000D28   0xEE00 0x0A10      VMOV     S0,R0
   \   00000D2C   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000D30   0xF8BD 0x002C      LDRH     R0,[SP, #+44]
   \   00000D34   0xEE00 0x0A90      VMOV     S1,R0
   \   00000D38   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00000D3C   0xED9F 0x1AA6      VLDR.W   S2,??v_ImageCut_95  ;; 0x3ee66666
   \   00000D40   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   00000D44   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000D48   0xEE10 0x5A10      VMOV     R5,S0
   \   00000D4C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000D4E   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000D50   0x42AE             CMP      R6,R5
   \   00000D52   0xDA19             BGE.N    ??v_ImageCut_98
   \   00000D54   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000D58   0xF1B8 0x0F03      CMP      R8,#+3
   \   00000D5C   0xDB14             BLT.N    ??v_ImageCut_98
   \   00000D5E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000D60   0xF8DF 0x0A34      LDR.W    R0,??v_ImageCut_67+0xC
   \   00000D64   0x1838             ADDS     R0,R7,R0
   \   00000D66   0xF890 0x00A3      LDRB     R0,[R0, #+163]
   \   00000D6A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000D6C   0xF8DF 0x1A28      LDR.W    R1,??v_ImageCut_67+0xC
   \   00000D70   0x1879             ADDS     R1,R7,R1
   \   00000D72   0xF891 0x10A2      LDRB     R1,[R1, #+162]
   \   00000D76   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00000D7A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000D7C   0xF8DF 0x1A18      LDR.W    R1,??v_ImageCut_67+0xC
   \   00000D80   0x1879             ADDS     R1,R7,R1
   \   00000D82   0xF891 0x10A1      LDRB     R1,[R1, #+161]
   \   00000D86   0x1A45             SUBS     R5,R0,R1
   \                     ??v_ImageCut_98: (+1)
   \   00000D88   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   00000D8C   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000D90   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000D92   0x4580             CMP      R8,R0
   \   00000D94   0xDA14             BGE.N    ??v_ImageCut_97
   \   00000D96   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000D9A   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000D9E   0xDB0F             BLT.N    ??v_ImageCut_97
   \   00000DA0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000DA2   0xF8DF 0x09F4      LDR.W    R0,??v_ImageCut_67+0xC
   \   00000DA6   0x1838             ADDS     R0,R7,R0
   \   00000DA8   0xF890 0x00A3      LDRB     R0,[R0, #+163]
   \   00000DAC   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000DAE   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000DB0   0x42A8             CMP      R0,R5
   \   00000DB2   0xDA05             BGE.N    ??v_ImageCut_97
   \   00000DB4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000DB6   0xF8DF 0x09E0      LDR.W    R0,??v_ImageCut_67+0xC
   \   00000DBA   0x1838             ADDS     R0,R7,R0
   \   00000DBC   0xF890 0x50A3      LDRB     R5,[R0, #+163]
   \                     ??v_ImageCut_97: (+1)
   \   00000DC0   0xF89D 0x000A      LDRB     R0,[SP, #+10]
   \   00000DC4   0x2802             CMP      R0,#+2
   \   00000DC6   0xD110             BNE.N    ??v_ImageCut_99
   \   00000DC8   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000DCC   0xF1B8 0x0F03      CMP      R8,#+3
   \   00000DD0   0xDB0B             BLT.N    ??v_ImageCut_99
   \   00000DD2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000DD4   0xF8DF 0x09C0      LDR.W    R0,??v_ImageCut_67+0xC
   \   00000DD8   0x1838             ADDS     R0,R7,R0
   \   00000DDA   0xF880 0x50A3      STRB     R5,[R0, #+163]
   \   00000DDE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000DE0   0xF8DF 0x09B4      LDR.W    R0,??v_ImageCut_67+0xC
   \   00000DE4   0x1838             ADDS     R0,R7,R0
   \   00000DE6   0xF880 0x50A2      STRB     R5,[R0, #+162]
   \                     ??v_ImageCut_99: (+1)
   \   00000DEA   0x2001             MOVS     R0,#+1
   \   00000DEC   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \                     ??v_ImageCut_93: (+1)
   \   00000DF0   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000DF4   0x2800             CMP      R0,#+0
   \   00000DF6   0xF040 0x80C5      BNE.W    ??v_ImageCut_47
   \   00000DFA   0xF89D 0x0011      LDRB     R0,[SP, #+17]
   \   00000DFE   0x2800             CMP      R0,#+0
   \   00000E00   0xF040 0x80C0      BNE.W    ??v_ImageCut_47
   \   00000E04   0xF89D 0x001A      LDRB     R0,[SP, #+26]
   \   00000E08   0x28FF             CMP      R0,#+255
   \   00000E0A   0xD02D             BEQ.N    ??v_ImageCut_100
   \   00000E0C   0xF89D 0x001B      LDRB     R0,[SP, #+27]
   \   00000E10   0x28FF             CMP      R0,#+255
   \   00000E12   0xD029             BEQ.N    ??v_ImageCut_100
   \   00000E14   0xF89D 0x001A      LDRB     R0,[SP, #+26]
   \   00000E18   0xF89D 0x101B      LDRB     R1,[SP, #+27]
   \   00000E1C   0x1A40             SUBS     R0,R0,R1
   \   00000E1E   0x.... 0x....      BL       __aeabi_i2d
   \   00000E22   0x0002             MOVS     R2,R0
   \   00000E24   0x000B             MOVS     R3,R1
   \   00000E26   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   00000E2A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000E2C   0xF8DF 0x0968      LDR.W    R0,??v_ImageCut_67+0xC
   \   00000E30   0xEB10 0x0047      ADDS     R0,R0,R7, LSL #+1
   \   00000E34   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   00000E38   0xEE00 0x0A10      VMOV     S0,R0
   \   00000E3C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000E40   0xEEF2 0x0A0E      VMOV.F32 S1,#15.0
   \   00000E44   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000E48   0xEE10 0x0A10      VMOV     R0,S0
   \   00000E4C   0x.... 0x....      BL       __aeabi_f2d
   \   00000E50   0xF8DF 0x2474      LDR.W    R2,??v_ImageCut_45  ;; 0x76c8b439
   \   00000E54   0xF8DF 0x3474      LDR.W    R3,??v_ImageCut_45+0x4  ;; 0x3ff69fbe
   \   00000E58   0x.... 0x....      BL       __aeabi_dmul
   \   00000E5C   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00000E60   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000E64   0xF240 0x808E      BLS.W    ??v_ImageCut_47
   \                     ??v_ImageCut_100: (+1)
   \   00000E68   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000E6A   0xA816             ADD      R0,SP,#+88
   \   00000E6C   0x2128             MOVS     R1,#+40
   \   00000E6E   0x5439             STRB     R1,[R7, R0]
   \   00000E70   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   00000E74   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000E78   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000E7A   0x4580             CMP      R8,R0
   \   00000E7C   0xDA0B             BGE.N    ??v_ImageCut_101
   \   00000E7E   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000E82   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000E84   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000E88   0x4540             CMP      R0,R8
   \   00000E8A   0xD104             BNE.N    ??v_ImageCut_101
   \   00000E8C   0xF8DF 0x0908      LDR.W    R0,??v_ImageCut_67+0xC
   \   00000E90   0xF890 0x51D4      LDRB     R5,[R0, #+468]
   \   00000E94   0xE000             B.N      ??v_ImageCut_102
   \                     ??v_ImageCut_101: (+1)
   \   00000E96   0x0035             MOVS     R5,R6
   \                     ??v_ImageCut_102: (+1)
   \   00000E98   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000E9C   0xF1B8 0x0F04      CMP      R8,#+4
   \   00000EA0   0xDB26             BLT.N    ??v_ImageCut_103
   \   00000EA2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000EA4   0xF8DF 0x08F0      LDR.W    R0,??v_ImageCut_67+0xC
   \   00000EA8   0x1838             ADDS     R0,R7,R0
   \   00000EAA   0xF890 0x00A3      LDRB     R0,[R0, #+163]
   \   00000EAE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000EB0   0xF8DF 0x18E4      LDR.W    R1,??v_ImageCut_67+0xC
   \   00000EB4   0x1879             ADDS     R1,R7,R1
   \   00000EB6   0xF891 0x10A3      LDRB     R1,[R1, #+163]
   \   00000EBA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000EBC   0xF8DF 0x28D8      LDR.W    R2,??v_ImageCut_67+0xC
   \   00000EC0   0x18BA             ADDS     R2,R7,R2
   \   00000EC2   0xF892 0x20A2      LDRB     R2,[R2, #+162]
   \   00000EC6   0x1A89             SUBS     R1,R1,R2
   \   00000EC8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000ECA   0xF8DF 0x28CC      LDR.W    R2,??v_ImageCut_67+0xC
   \   00000ECE   0x18BA             ADDS     R2,R7,R2
   \   00000ED0   0xF892 0x20A2      LDRB     R2,[R2, #+162]
   \   00000ED4   0xFA51 0xF182      UXTAB    R1,R1,R2
   \   00000ED8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000EDA   0xF8DF 0x28BC      LDR.W    R2,??v_ImageCut_67+0xC
   \   00000EDE   0x18BA             ADDS     R2,R7,R2
   \   00000EE0   0xF892 0x20A1      LDRB     R2,[R2, #+161]
   \   00000EE4   0x1A89             SUBS     R1,R1,R2
   \   00000EE6   0x2202             MOVS     R2,#+2
   \   00000EE8   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000EEC   0xFA51 0xF580      UXTAB    R5,R1,R0
   \                     ??v_ImageCut_103: (+1)
   \   00000EF0   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000EF4   0x1C40             ADDS     R0,R0,#+1
   \   00000EF6   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000EFA   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000EFE   0x2801             CMP      R0,#+1
   \   00000F00   0xD131             BNE.N    ??v_ImageCut_104
   \   00000F02   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000F04   0xEE00 0x7A10      VMOV     S0,R7
   \   00000F08   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000F0C   0xEDDD 0x0A11      VLDR     S1,[SP, #+68]
   \   00000F10   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000F14   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000F16   0xEE00 0x7A90      VMOV     S1,R7
   \   00000F1A   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00000F1E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000F22   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000F24   0xEE00 0x7A90      VMOV     S1,R7
   \   00000F28   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00000F2C   0xED9D 0x1A12      VLDR     S2,[SP, #+72]
   \   00000F30   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000F34   0xEDDD 0x0A13      VLDR     S1,[SP, #+76]
   \   00000F38   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000F3C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000F3E   0xEE00 0x7A90      VMOV     S1,R7
   \   00000F42   0xEEB8 0x1A60      VCVT.F32.U32 S2,S1
   \   00000F46   0xEDDD 0x1A14      VLDR     S3,[SP, #+80]
   \   00000F4A   0xEDDD 0x0A15      VLDR     S1,[SP, #+84]
   \   00000F4E   0xEE41 0x0A21      VMLA.F32 S1,S2,S3
   \   00000F52   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000F56   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000F5A   0xEE10 0x0A10      VMOV     R0,S0
   \   00000F5E   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   00000F62   0xF88D 0x702A      STRB     R7,[SP, #+42]
   \                     ??v_ImageCut_104: (+1)
   \   00000F66   0xF89D 0x000B      LDRB     R0,[SP, #+11]
   \   00000F6A   0x2102             MOVS     R1,#+2
   \   00000F6C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000F70   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00000F74   0x4288             CMP      R0,R1
   \   00000F76   0xDA02             BGE.N    ??v_ImageCut_105
   \   00000F78   0x2000             MOVS     R0,#+0
   \   00000F7A   0xF88D 0x0028      STRB     R0,[SP, #+40]
   \                     ??v_ImageCut_105: (+1)
   \   00000F7E   0x2000             MOVS     R0,#+0
   \   00000F80   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \                     ??v_ImageCut_47: (+1)
   \   00000F84   0xF89D 0x001A      LDRB     R0,[SP, #+26]
   \   00000F88   0x28FF             CMP      R0,#+255
   \   00000F8A   0xD043             BEQ.N    ??v_ImageCut_106
   \   00000F8C   0xF89D 0x001B      LDRB     R0,[SP, #+27]
   \   00000F90   0x28FF             CMP      R0,#+255
   \   00000F92   0xD03F             BEQ.N    ??v_ImageCut_106
   \   00000F94   0xF89D 0x001A      LDRB     R0,[SP, #+26]
   \   00000F98   0xF89D 0x101B      LDRB     R1,[SP, #+27]
   \   00000F9C   0x1A40             SUBS     R0,R0,R1
   \   00000F9E   0x.... 0x....      BL       __aeabi_i2d
   \   00000FA2   0x0002             MOVS     R2,R0
   \   00000FA4   0x000B             MOVS     R3,R1
   \   00000FA6   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   00000FAA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000FAC   0xF8DF 0x07E8      LDR.W    R0,??v_ImageCut_67+0xC
   \   00000FB0   0xEB10 0x0047      ADDS     R0,R0,R7, LSL #+1
   \   00000FB4   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   00000FB8   0xEE00 0x0A10      VMOV     S0,R0
   \   00000FBC   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000FC0   0xEEF2 0x0A0E      VMOV.F32 S1,#15.0
   \   00000FC4   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000FC8   0xEE10 0x0A10      VMOV     R0,S0
   \   00000FCC   0x.... 0x....      BL       __aeabi_f2d
   \   00000FD0   0x4ABD             LDR.N    R2,??v_ImageCut_45  ;; 0x76c8b439
   \   00000FD2   0x4BBE             LDR.N    R3,??v_ImageCut_45+0x4  ;; 0x3ff69fbe
   \   00000FD4   0xE002             B.N      ??v_ImageCut_107
   \   00000FD6   0xBF00             Nop      
   \                     ??v_ImageCut_95:
   \   00000FD8   0x3EE66666         DC32     0x3ee66666
   \                     ??v_ImageCut_107: (+1)
   \   00000FDC   0x.... 0x....      BL       __aeabi_dmul
   \   00000FE0   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00000FE4   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000FE8   0xD814             BHI.N    ??v_ImageCut_106
   \   00000FEA   0x2000             MOVS     R0,#+0
   \   00000FEC   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000FF0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000FF2   0xA816             ADD      R0,SP,#+88
   \   00000FF4   0x213C             MOVS     R1,#+60
   \   00000FF6   0x5439             STRB     R1,[R7, R0]
   \   00000FF8   0x2001             MOVS     R0,#+1
   \   00000FFA   0xF88D 0x000F      STRB     R0,[SP, #+15]
   \   00000FFE   0xF89D 0x001A      LDRB     R0,[SP, #+26]
   \   00001002   0xF89D 0x101B      LDRB     R1,[SP, #+27]
   \   00001006   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   0000100A   0x2102             MOVS     R1,#+2
   \   0000100C   0xFB90 0xF5F1      SDIV     R5,R0,R1
   \   00001010   0xF88D 0x7015      STRB     R7,[SP, #+21]
   \                     ??v_ImageCut_106: (+1)
   \   00001014   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001018   0x2800             CMP      R0,#+0
   \   0000101A   0xF040 0x80C0      BNE.W    ??v_ImageCut_108
   \   0000101E   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00001022   0x2800             CMP      R0,#+0
   \   00001024   0xF040 0x80BB      BNE.W    ??v_ImageCut_108
   \   00001028   0xF8DF 0x076C      LDR.W    R0,??v_ImageCut_67+0xC
   \   0000102C   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001030   0xF89D 0x102A      LDRB     R1,[SP, #+42]
   \   00001034   0x4288             CMP      R0,R1
   \   00001036   0xD055             BEQ.N    ??v_ImageCut_109
   \   00001038   0x2001             MOVS     R0,#+1
   \   0000103A   0xF88D 0x0028      STRB     R0,[SP, #+40]
   \   0000103E   0x20FF             MOVS     R0,#+255
   \   00001040   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   00001044   0x2001             MOVS     R0,#+1
   \   00001046   0xF88D 0x0020      STRB     R0,[SP, #+32]
   \   0000104A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000104C   0xF89D 0x002A      LDRB     R0,[SP, #+42]
   \   00001050   0x1A38             SUBS     R0,R7,R0
   \   00001052   0x1C40             ADDS     R0,R0,#+1
   \   00001054   0xEE00 0x0A10      VMOV     S0,R0
   \   00001058   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000105C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000105E   0xF8DF 0x0738      LDR.W    R0,??v_ImageCut_67+0xC
   \   00001062   0x1838             ADDS     R0,R7,R0
   \   00001064   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   00001068   0xF89D 0x102A      LDRB     R1,[SP, #+42]
   \   0000106C   0xF8DF 0x2728      LDR.W    R2,??v_ImageCut_67+0xC
   \   00001070   0x1889             ADDS     R1,R1,R2
   \   00001072   0xF891 0x10A3      LDRB     R1,[R1, #+163]
   \   00001076   0x1A40             SUBS     R0,R0,R1
   \   00001078   0xEE00 0x0A90      VMOV     S1,R0
   \   0000107C   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00001080   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \   00001084   0xF89D 0x002A      LDRB     R0,[SP, #+42]
   \   00001088   0xF8DF 0x170C      LDR.W    R1,??v_ImageCut_67+0xC
   \   0000108C   0x1840             ADDS     R0,R0,R1
   \   0000108E   0xF890 0x00A3      LDRB     R0,[R0, #+163]
   \   00001092   0xEE00 0x0A90      VMOV     S1,R0
   \   00001096   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   0000109A   0xF89D 0x002A      LDRB     R0,[SP, #+42]
   \   0000109E   0x1E40             SUBS     R0,R0,#+1
   \   000010A0   0xEE01 0x0A10      VMOV     S2,R0
   \   000010A4   0xEEB8 0x1AC1      VCVT.F32.S32 S2,S2
   \   000010A8   0xEE41 0x0A40      VMLS.F32 S1,S2,S0
   \   000010AC   0xF89D 0x002A      LDRB     R0,[SP, #+42]
   \   000010B0   0x1E40             SUBS     R0,R0,#+1
   \                     ??v_ImageCut_110: (+1)
   \   000010B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000010B4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000010B6   0x42B8             CMP      R0,R7
   \   000010B8   0xD271             BCS.N    ??v_ImageCut_108
   \   000010BA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000010BC   0xEE01 0x0A10      VMOV     S2,R0
   \   000010C0   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   000010C4   0xEEF0 0x1A60      VMOV.F32 S3,S1
   \   000010C8   0xEE41 0x1A00      VMLA.F32 S3,S2,S0
   \   000010CC   0xEEBD 0x1AE1      VCVT.S32.F32 S2,S3
   \   000010D0   0xEE11 0x1A10      VMOV     R1,S2
   \   000010D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000010D6   0xF8DF 0x26C0      LDR.W    R2,??v_ImageCut_67+0xC
   \   000010DA   0x1882             ADDS     R2,R0,R2
   \   000010DC   0xF882 0x10A4      STRB     R1,[R2, #+164]
   \   000010E0   0x1C40             ADDS     R0,R0,#+1
   \   000010E2   0xE7E6             B.N      ??v_ImageCut_110
   \                     ??v_ImageCut_109: (+1)
   \   000010E4   0x2001             MOVS     R0,#+1
   \   000010E6   0xF88D 0x0028      STRB     R0,[SP, #+40]
   \   000010EA   0x20FF             MOVS     R0,#+255
   \   000010EC   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   000010F0   0x2001             MOVS     R0,#+1
   \   000010F2   0xF88D 0x0020      STRB     R0,[SP, #+32]
   \   000010F6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000010F8   0xF8DF 0x069C      LDR.W    R0,??v_ImageCut_67+0xC
   \   000010FC   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001100   0x1A38             SUBS     R0,R7,R0
   \   00001102   0xEE00 0x0A10      VMOV     S0,R0
   \   00001106   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000110A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000110C   0xF8DF 0x0688      LDR.W    R0,??v_ImageCut_67+0xC
   \   00001110   0x1838             ADDS     R0,R7,R0
   \   00001112   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   00001116   0xF8DF 0x1680      LDR.W    R1,??v_ImageCut_67+0xC
   \   0000111A   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   0000111E   0xF8DF 0x2678      LDR.W    R2,??v_ImageCut_67+0xC
   \   00001122   0x1889             ADDS     R1,R1,R2
   \   00001124   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   00001128   0x1A40             SUBS     R0,R0,R1
   \   0000112A   0xEE00 0x0A90      VMOV     S1,R0
   \   0000112E   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00001132   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \   00001136   0xF8DF 0x0660      LDR.W    R0,??v_ImageCut_67+0xC
   \   0000113A   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   0000113E   0xF8DF 0x1658      LDR.W    R1,??v_ImageCut_67+0xC
   \   00001142   0x1840             ADDS     R0,R0,R1
   \   00001144   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   00001148   0xEE00 0x0A90      VMOV     S1,R0
   \   0000114C   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00001150   0xF8DF 0x0644      LDR.W    R0,??v_ImageCut_67+0xC
   \   00001154   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001158   0xEE01 0x0A10      VMOV     S2,R0
   \   0000115C   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00001160   0xEE41 0x0A40      VMLS.F32 S1,S2,S0
   \   00001164   0xF8DF 0x0630      LDR.W    R0,??v_ImageCut_67+0xC
   \   00001168   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   0000116C   0xE013             B.N      ??v_ImageCut_111
   \                     ??v_ImageCut_112: (+1)
   \   0000116E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001170   0xEE01 0x0A10      VMOV     S2,R0
   \   00001174   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00001178   0xEEF0 0x1A60      VMOV.F32 S3,S1
   \   0000117C   0xEE41 0x1A00      VMLA.F32 S3,S2,S0
   \   00001180   0xEEBD 0x1AE1      VCVT.S32.F32 S2,S3
   \   00001184   0xEE11 0x1A10      VMOV     R1,S2
   \   00001188   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000118A   0xF8DF 0x260C      LDR.W    R2,??v_ImageCut_67+0xC
   \   0000118E   0x1882             ADDS     R2,R0,R2
   \   00001190   0xF882 0x10A4      STRB     R1,[R2, #+164]
   \   00001194   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_111: (+1)
   \   00001196   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001198   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000119A   0x42B8             CMP      R0,R7
   \   0000119C   0xD3E7             BCC.N    ??v_ImageCut_112
   \                     ??v_ImageCut_108: (+1)
   \   0000119E   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   000011A2   0x28FF             CMP      R0,#+255
   \   000011A4   0xD050             BEQ.N    ??v_ImageCut_113
   \   000011A6   0x20FF             MOVS     R0,#+255
   \   000011A8   0xF89D 0x1018      LDRB     R1,[SP, #+24]
   \   000011AC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000011AE   0xF8DF 0x25E8      LDR.W    R2,??v_ImageCut_67+0xC
   \   000011B2   0xEB12 0x0247      ADDS     R2,R2,R7, LSL #+1
   \   000011B6   0xF9B2 0x2158      LDRSH    R2,[R2, #+344]
   \   000011BA   0x2305             MOVS     R3,#+5
   \   000011BC   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000011C0   0xFA52 0xF181      UXTAB    R1,R2,R1
   \   000011C4   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000011C6   0x29B6             CMP      R1,#+182
   \   000011C8   0xDB00             BLT.N    ??v_ImageCut_114
   \   000011CA   0x21B5             MOVS     R1,#+181
   \                     ??v_ImageCut_114: (+1)
   \   000011CC   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000011CE   0x2903             CMP      R1,#+3
   \   000011D0   0xDA00             BGE.N    ??v_ImageCut_115
   \   000011D2   0x2103             MOVS     R1,#+3
   \                     ??v_ImageCut_115: (+1)
   \   000011D4   0xF89D 0x2018      LDRB     R2,[SP, #+24]
   \   000011D8   0xE000             B.N      ??v_ImageCut_116
   \                     ??v_ImageCut_117: (+1)
   \   000011DA   0x1C52             ADDS     R2,R2,#+1
   \                     ??v_ImageCut_116: (+1)
   \   000011DC   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000011DE   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000011E0   0xFA04 0xF382      SXTAH    R3,R4,R2
   \   000011E4   0x4299             CMP      R1,R3
   \   000011E6   0xDB29             BLT.N    ??v_ImageCut_118
   \   000011E8   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000011EA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000011EC   0x23B9             MOVS     R3,#+185
   \   000011EE   0xF8DF 0x65AC      LDR.W    R6,??v_ImageCut_67+0x10
   \   000011F2   0xFB03 0x6307      MLA      R3,R3,R7,R6
   \   000011F6   0x5CD3             LDRB     R3,[R2, R3]
   \   000011F8   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000011FA   0xFA04 0xF682      SXTAH    R6,R4,R2
   \   000011FE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001200   0xF05F 0x0CB9      MOVS     R12,#+185
   \   00001204   0xF8DF 0xE594      LDR.W    LR,??v_ImageCut_67+0x10
   \   00001208   0xFB0C 0xEC07      MLA      R12,R12,R7,LR
   \   0000120C   0xF816 0x600C      LDRB     R6,[R6, R12]
   \   00001210   0x1B9B             SUBS     R3,R3,R6
   \   00001212   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00001214   0x2B00             CMP      R3,#+0
   \   00001216   0xD502             BPL.N    ??v_ImageCut_119
   \   00001218   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   0000121A   0x425E             RSBS     R6,R3,#+0
   \   0000121C   0xE000             B.N      ??v_ImageCut_120
   \                     ??v_ImageCut_119: (+1)
   \   0000121E   0x001E             MOVS     R6,R3
   \                     ??v_ImageCut_120: (+1)
   \   00001220   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00001224   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00001226   0x45B2             CMP      R10,R6
   \   00001228   0xDAD7             BGE.N    ??v_ImageCut_117
   \   0000122A   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000122E   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00001230   0x45B1             CMP      R9,R6
   \   00001232   0xDAD2             BGE.N    ??v_ImageCut_117
   \   00001234   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00001236   0x2B00             CMP      R3,#+0
   \   00001238   0xD5CF             BPL.N    ??v_ImageCut_117
   \   0000123A   0x18A0             ADDS     R0,R4,R2
   \                     ??v_ImageCut_118: (+1)
   \   0000123C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000123E   0xF8DF 0x1558      LDR.W    R1,??v_ImageCut_67+0xC
   \   00001242   0x1879             ADDS     R1,R7,R1
   \   00001244   0xF881 0x011C      STRB     R0,[R1, #+284]
   \                     ??v_ImageCut_113: (+1)
   \   00001248   0xF89D 0x0019      LDRB     R0,[SP, #+25]
   \   0000124C   0x28FF             CMP      R0,#+255
   \   0000124E   0xD054             BEQ.N    ??v_ImageCut_121
   \   00001250   0x20FF             MOVS     R0,#+255
   \   00001252   0xF89D 0x1019      LDRB     R1,[SP, #+25]
   \   00001256   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001258   0xF8DF 0x253C      LDR.W    R2,??v_ImageCut_67+0xC
   \   0000125C   0xEB12 0x0247      ADDS     R2,R2,R7, LSL #+1
   \   00001260   0xF9B2 0x2158      LDRSH    R2,[R2, #+344]
   \   00001264   0x2305             MOVS     R3,#+5
   \   00001266   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   0000126A   0x1A89             SUBS     R1,R1,R2
   \   0000126C   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000126E   0x29B6             CMP      R1,#+182
   \   00001270   0xDB00             BLT.N    ??v_ImageCut_122
   \   00001272   0x21B5             MOVS     R1,#+181
   \                     ??v_ImageCut_122: (+1)
   \   00001274   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00001276   0x2903             CMP      R1,#+3
   \   00001278   0xDA00             BGE.N    ??v_ImageCut_123
   \   0000127A   0x2103             MOVS     R1,#+3
   \                     ??v_ImageCut_123: (+1)
   \   0000127C   0xF89D 0x2019      LDRB     R2,[SP, #+25]
   \   00001280   0xE000             B.N      ??v_ImageCut_124
   \                     ??v_ImageCut_125: (+1)
   \   00001282   0x1E52             SUBS     R2,R2,#+1
   \                     ??v_ImageCut_124: (+1)
   \   00001284   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00001286   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00001288   0x1B13             SUBS     R3,R2,R4
   \   0000128A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000128C   0x428B             CMP      R3,R1
   \   0000128E   0xDB2E             BLT.N    ??v_ImageCut_126
   \   00001290   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00001292   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001294   0x23B9             MOVS     R3,#+185
   \   00001296   0xF8DF 0x6504      LDR.W    R6,??v_ImageCut_67+0x10
   \   0000129A   0xFB03 0x6307      MLA      R3,R3,R7,R6
   \   0000129E   0x5CD3             LDRB     R3,[R2, R3]
   \   000012A0   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000012A2   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000012A4   0x1B16             SUBS     R6,R2,R4
   \   000012A6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000012A8   0xF05F 0x0CB9      MOVS     R12,#+185
   \   000012AC   0xF8DF 0xE4EC      LDR.W    LR,??v_ImageCut_67+0x10
   \   000012B0   0xFB0C 0xEC07      MLA      R12,R12,R7,LR
   \   000012B4   0xF816 0x600C      LDRB     R6,[R6, R12]
   \   000012B8   0x1B9B             SUBS     R3,R3,R6
   \   000012BA   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   000012BC   0x2B00             CMP      R3,#+0
   \   000012BE   0xD507             BPL.N    ??v_ImageCut_127
   \   000012C0   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   000012C2   0x425E             RSBS     R6,R3,#+0
   \   000012C4   0xE005             B.N      ??v_ImageCut_128
   \   000012C6   0xBF00             Nop      
   \                     ??v_ImageCut_45:
   \   000012C8   0x76C8B439         DC32     0x76c8b439
   \   000012CC   0x3FF69FBE         DC32     0x3ff69fbe
   \                     ??v_ImageCut_127: (+1)
   \   000012D0   0x001E             MOVS     R6,R3
   \                     ??v_ImageCut_128: (+1)
   \   000012D2   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000012D6   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000012D8   0x45B2             CMP      R10,R6
   \   000012DA   0xDAD2             BGE.N    ??v_ImageCut_125
   \   000012DC   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000012E0   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000012E2   0x45B1             CMP      R9,R6
   \   000012E4   0xDACD             BGE.N    ??v_ImageCut_125
   \   000012E6   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   000012E8   0x2B00             CMP      R3,#+0
   \   000012EA   0xD5CA             BPL.N    ??v_ImageCut_125
   \   000012EC   0x1B10             SUBS     R0,R2,R4
   \                     ??v_ImageCut_126: (+1)
   \   000012EE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000012F0   0xF8DF 0x14A4      LDR.W    R1,??v_ImageCut_67+0xC
   \   000012F4   0x1879             ADDS     R1,R7,R1
   \   000012F6   0xF881 0x00E0      STRB     R0,[R1, #+224]
   \                     ??v_ImageCut_121: (+1)
   \   000012FA   0xF8BD 0x0016      LDRH     R0,[SP, #+22]
   \   000012FE   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00001300   0xEBB0 0x0044      SUBS     R0,R0,R4, LSL #+1
   \   00001304   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00001306   0x42A8             CMP      R0,R5
   \   00001308   0xDA04             BGE.N    ??v_ImageCut_129
   \   0000130A   0xF8BD 0x0016      LDRH     R0,[SP, #+22]
   \   0000130E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00001310   0xEBB0 0x0544      SUBS     R5,R0,R4, LSL #+1
   \                     ??v_ImageCut_129: (+1)
   \   00001314   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00001316   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00001318   0xEBB5 0x0F44      CMP      R5,R4, LSL #+1
   \   0000131C   0xDA01             BGE.N    ??v_ImageCut_130
   \   0000131E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00001320   0x0065             LSLS     R5,R4,#+1
   \                     ??v_ImageCut_130: (+1)
   \   00001322   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001324   0xF8DF 0x0470      LDR.W    R0,??v_ImageCut_67+0xC
   \   00001328   0x1838             ADDS     R0,R7,R0
   \   0000132A   0xF880 0x50A4      STRB     R5,[R0, #+164]
   \   0000132E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001330   0xF8DF 0x0464      LDR.W    R0,??v_ImageCut_67+0xC
   \   00001334   0x1838             ADDS     R0,R7,R0
   \   00001336   0xF89D 0x1019      LDRB     R1,[SP, #+25]
   \   0000133A   0xF880 0x102C      STRB     R1,[R0, #+44]
   \   0000133E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001340   0xF8DF 0x0454      LDR.W    R0,??v_ImageCut_67+0xC
   \   00001344   0x1838             ADDS     R0,R7,R0
   \   00001346   0xF89D 0x1018      LDRB     R1,[SP, #+24]
   \   0000134A   0xF880 0x1068      STRB     R1,[R0, #+104]
   \   0000134E   0x46BB             MOV      R11,R7
   \   00001350   0x002E             MOVS     R6,R5
   \   00001352   0xF89D 0x0032      LDRB     R0,[SP, #+50]
   \   00001356   0x2801             CMP      R0,#+1
   \   00001358   0xF47E 0xAF7F      BNE.W    ??v_ImageCut_10
   \   0000135C   0x2000             MOVS     R0,#+0
   \   0000135E   0xF88D 0x0032      STRB     R0,[SP, #+50]
   \   00001362   0x2000             MOVS     R0,#+0
   \   00001364   0xF7FE 0xBF75      B.W      ??v_ImageCut_9
   1400                  {
   1401                      if(Sid_Left == TurningBeacauseVeryLittle.side)
   1402                      {
   1403                          if(255 != m_ImageAbstract.Right[loop])
   1404                          {
   1405                              centralPos_n_add_one = (sint16)(m_ImageAbstract.Right[loop] - m_ImageAbstract.width[loop]*0.45f);//相当于补边
   1406                              if((centralPos_n_add_one > centralPos)&&(loop > m_ImageAbstract.Start_Y_Position+2))//本次数值在上次数值的左边
   1407                              {
   1408                                  centralPos_n_add_one = m_ImageAbstract.Central[loop-1]//路径的PD作用
   1409                                                      + (m_ImageAbstract.Central[loop-2]-m_ImageAbstract.Central[loop-3]);
   1410                              }
   1411                              if((process_find_timer < constn_DeadLine_BeWith)&&(loop > m_ImageAbstract.Start_Y_Position))
   1412                              {
   1413                                  if(centralPos_n_add_one < m_ImageAbstract.Central[loop-1]){centralPos_n_add_one = m_ImageAbstract.Central[loop-1];}
   1414                              }
   1415                              if((loop > TurningBeacauseVeryLittle.y_end)&&(loop < lastLine)&&(loop>2))
   1416                              {
   1417                                  if(((m_ImageAbstract.Right[loop] < m_ImageAbstract.Right[loop+1]))
   1418                                    &&(255 != m_ImageAbstract.Right[loop])
   1419                                    &&(255 != m_ImageAbstract.Right[loop+1])) 
   1420                                  {
   1421                                      centralPos_n_add_one = m_ImageAbstract.Central[loop-1]
   1422                                                           +(m_ImageAbstract.Central[loop-2]-m_ImageAbstract.Central[loop-3]);
   1423                                  }
   1424                              }
   1425                              if(centralPos_n_add_one > 181){centralPos_n_add_one = 181;}
   1426                              if(centralPos_n_add_one < 3){centralPos_n_add_one = 3;}
   1427                              centralPos = centralPos_n_add_one;
   1428                              m_ImageAbstract.Central[loop] = centralPos;
   1429                          }
   1430                          
   1431                      }else
   1432                      if(Sid_Right == TurningBeacauseVeryLittle.side)
   \                     ??v_ImageCut_131: (+1)
   \   00001368   0xF89D 0x3024      LDRB     R3,[SP, #+36]
   \   0000136C   0x2B14             CMP      R3,#+20
   \   0000136E   0xF040 0x80AE      BNE.W    ??v_ImageCut_132
   1433                      {
   1434                          if(255 != m_ImageAbstract.Left[loop])
   \   00001372   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001374   0xF8DF 0x3420      LDR.W    R3,??v_ImageCut_67+0xC
   \   00001378   0x18C3             ADDS     R3,R0,R3
   \   0000137A   0xF893 0x302C      LDRB     R3,[R3, #+44]
   \   0000137E   0x2BFF             CMP      R3,#+255
   \   00001380   0xF000 0x80A5      BEQ.W    ??v_ImageCut_132
   1435                          {
   1436                              centralPos_n_add_one = (sint16)(m_ImageAbstract.Left[loop] + m_ImageAbstract.width[loop]*0.45f);//相当于补边
   \   00001384   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001386   0xF8DF 0x3410      LDR.W    R3,??v_ImageCut_67+0xC
   \   0000138A   0x18C3             ADDS     R3,R0,R3
   \   0000138C   0xF893 0x302C      LDRB     R3,[R3, #+44]
   \   00001390   0xEE00 0x3A10      VMOV     S0,R3
   \   00001394   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00001398   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000139A   0xF8DF 0x33FC      LDR.W    R3,??v_ImageCut_67+0xC
   \   0000139E   0xEB13 0x0340      ADDS     R3,R3,R0, LSL #+1
   \   000013A2   0xF9B3 0x3158      LDRSH    R3,[R3, #+344]
   \   000013A6   0xEE00 0x3A90      VMOV     S1,R3
   \   000013AA   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000013AE   0xED9F 0x1A5C      VLDR.W   S2,??v_ImageCut_133  ;; 0x3ee66666
   \   000013B2   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000013B6   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000013BA   0xEE10 0x3A10      VMOV     R3,S0
   1437                              if((centralPos_n_add_one < centralPos)&&(loop > m_ImageAbstract.Start_Y_Position+2))//本次数值在上次数值的左边
   \   000013BE   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   000013C0   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000013C2   0x428B             CMP      R3,R1
   \   000013C4   0xDA1C             BGE.N    ??v_ImageCut_134
   \   000013C6   0xF8DF 0x13D0      LDR.W    R1,??v_ImageCut_67+0xC
   \   000013CA   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   000013CE   0x1C89             ADDS     R1,R1,#+2
   \   000013D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013D2   0x4281             CMP      R1,R0
   \   000013D4   0xDA14             BGE.N    ??v_ImageCut_134
   1438                              {
   1439                                  centralPos_n_add_one = m_ImageAbstract.Central[loop-1]//路径的PD作用
   1440                                                      + (m_ImageAbstract.Central[loop-2]-m_ImageAbstract.Central[loop-3]);
   \   000013D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013D8   0xF8DF 0x13BC      LDR.W    R1,??v_ImageCut_67+0xC
   \   000013DC   0x1841             ADDS     R1,R0,R1
   \   000013DE   0xF891 0x10A3      LDRB     R1,[R1, #+163]
   \   000013E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013E4   0xF8DF 0x33B0      LDR.W    R3,??v_ImageCut_67+0xC
   \   000013E8   0x18C3             ADDS     R3,R0,R3
   \   000013EA   0xF893 0x30A2      LDRB     R3,[R3, #+162]
   \   000013EE   0xFA53 0xF181      UXTAB    R1,R3,R1
   \   000013F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013F4   0xF8DF 0x33A0      LDR.W    R3,??v_ImageCut_67+0xC
   \   000013F8   0x18C3             ADDS     R3,R0,R3
   \   000013FA   0xF893 0x30A1      LDRB     R3,[R3, #+161]
   \   000013FE   0x1ACB             SUBS     R3,R1,R3
   1441                              }
   1442                              if((process_find_timer < constn_DeadLine_BeWith)&&(loop > m_ImageAbstract.Start_Y_Position))
   \                     ??v_ImageCut_134: (+1)
   \   00001400   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00001404   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00001408   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000140A   0x4588             CMP      R8,R1
   \   0000140C   0xDA16             BGE.N    ??v_ImageCut_135
   \   0000140E   0xF8DF 0x1388      LDR.W    R1,??v_ImageCut_67+0xC
   \   00001412   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00001416   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001418   0x4281             CMP      R1,R0
   \   0000141A   0xD20F             BCS.N    ??v_ImageCut_135
   1443                              {
   1444                                  if(centralPos_n_add_one < m_ImageAbstract.Central[loop-1]){centralPos_n_add_one = m_ImageAbstract.Central[loop-1];}
   \   0000141C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000141E   0xF8DF 0x1378      LDR.W    R1,??v_ImageCut_67+0xC
   \   00001422   0x1841             ADDS     R1,R0,R1
   \   00001424   0xF891 0x10A3      LDRB     R1,[R1, #+163]
   \   00001428   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   0000142A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000142C   0x428B             CMP      R3,R1
   \   0000142E   0xDA05             BGE.N    ??v_ImageCut_135
   \   00001430   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001432   0xF8DF 0x1364      LDR.W    R1,??v_ImageCut_67+0xC
   \   00001436   0x1841             ADDS     R1,R0,R1
   \   00001438   0xF891 0x30A3      LDRB     R3,[R1, #+163]
   1445                              }
   1446                              if((loop > TurningBeacauseVeryLittle.y_end)&&(loop < lastLine)&&(loop>2))
   \                     ??v_ImageCut_135: (+1)
   \   0000143C   0xF89D 0x1026      LDRB     R1,[SP, #+38]
   \   00001440   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001442   0x4281             CMP      R1,R0
   \   00001444   0xD235             BCS.N    ??v_ImageCut_136
   \   00001446   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001448   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000144A   0x4290             CMP      R0,R2
   \   0000144C   0xD231             BCS.N    ??v_ImageCut_136
   \   0000144E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001450   0x2803             CMP      R0,#+3
   \   00001452   0xDB2E             BLT.N    ??v_ImageCut_136
   1447                              {
   1448                                  if(((m_ImageAbstract.Left[loop] > m_ImageAbstract.Left[loop+1])&&(loop>2))
   1449                                    &&(255 != m_ImageAbstract.Left[loop])
   1450                                    &&(255 != m_ImageAbstract.Left[loop+1])) 
   \   00001454   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001456   0x49D0             LDR.N    R1,??v_ImageCut_67+0xC
   \   00001458   0x1841             ADDS     R1,R0,R1
   \   0000145A   0xF891 0x102D      LDRB     R1,[R1, #+45]
   \   0000145E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001460   0x4CCD             LDR.N    R4,??v_ImageCut_67+0xC
   \   00001462   0x1904             ADDS     R4,R0,R4
   \   00001464   0xF894 0x402C      LDRB     R4,[R4, #+44]
   \   00001468   0x42A1             CMP      R1,R4
   \   0000146A   0xD222             BCS.N    ??v_ImageCut_136
   \   0000146C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000146E   0x2803             CMP      R0,#+3
   \   00001470   0xDB1F             BLT.N    ??v_ImageCut_136
   \   00001472   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001474   0x49C8             LDR.N    R1,??v_ImageCut_67+0xC
   \   00001476   0x1841             ADDS     R1,R0,R1
   \   00001478   0xF891 0x102C      LDRB     R1,[R1, #+44]
   \   0000147C   0x29FF             CMP      R1,#+255
   \   0000147E   0xD018             BEQ.N    ??v_ImageCut_136
   \   00001480   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001482   0x49C5             LDR.N    R1,??v_ImageCut_67+0xC
   \   00001484   0x1841             ADDS     R1,R0,R1
   \   00001486   0xF891 0x102D      LDRB     R1,[R1, #+45]
   \   0000148A   0x29FF             CMP      R1,#+255
   \   0000148C   0xD011             BEQ.N    ??v_ImageCut_136
   1451                                  {
   1452                                      centralPos_n_add_one = m_ImageAbstract.Central[loop-1]
   1453                                                           +(m_ImageAbstract.Central[loop-2]-m_ImageAbstract.Central[loop-3]);
   \   0000148E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001490   0x49C1             LDR.N    R1,??v_ImageCut_67+0xC
   \   00001492   0x1841             ADDS     R1,R0,R1
   \   00001494   0xF891 0x10A3      LDRB     R1,[R1, #+163]
   \   00001498   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000149A   0x4BBF             LDR.N    R3,??v_ImageCut_67+0xC
   \   0000149C   0x18C3             ADDS     R3,R0,R3
   \   0000149E   0xF893 0x30A2      LDRB     R3,[R3, #+162]
   \   000014A2   0xFA53 0xF181      UXTAB    R1,R3,R1
   \   000014A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014A8   0x4BBB             LDR.N    R3,??v_ImageCut_67+0xC
   \   000014AA   0x18C3             ADDS     R3,R0,R3
   \   000014AC   0xF893 0x30A1      LDRB     R3,[R3, #+161]
   \   000014B0   0x1ACB             SUBS     R3,R1,R3
   1454                                  }
   1455                              }
   1456                              if(centralPos_n_add_one > 181){centralPos_n_add_one = 181;}
   \                     ??v_ImageCut_136: (+1)
   \   000014B2   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   000014B4   0x2BB6             CMP      R3,#+182
   \   000014B6   0xDB00             BLT.N    ??v_ImageCut_137
   \   000014B8   0x23B5             MOVS     R3,#+181
   1457                              if(centralPos_n_add_one < 3){centralPos_n_add_one = 3;}
   \                     ??v_ImageCut_137: (+1)
   \   000014BA   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   000014BC   0x2B03             CMP      R3,#+3
   \   000014BE   0xDA00             BGE.N    ??v_ImageCut_138
   \   000014C0   0x2303             MOVS     R3,#+3
   1458                              centralPos = centralPos_n_add_one;
   \                     ??v_ImageCut_138: (+1)
   \   000014C2   0x0019             MOVS     R1,R3
   1459                              m_ImageAbstract.Central[loop] = centralPos;
   \   000014C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014C6   0x4BB4             LDR.N    R3,??v_ImageCut_67+0xC
   \   000014C8   0x18C3             ADDS     R3,R0,R3
   \   000014CA   0xF883 0x10A4      STRB     R1,[R3, #+164]
   1460                          }
   1461                      }
   \                     ??v_ImageCut_132: (+1)
   \   000014CE   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_91: (+1)
   \   000014D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014D2   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000014D6   0x4558             CMP      R0,R11
   \   000014D8   0xF080 0x80A9      BCS.W    ??v_ImageCut_89
   \   000014DC   0xF89D 0x3024      LDRB     R3,[SP, #+36]
   \   000014E0   0x2B0A             CMP      R3,#+10
   \   000014E2   0xF47F 0xAF41      BNE.W    ??v_ImageCut_131
   \   000014E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014E8   0x4BAB             LDR.N    R3,??v_ImageCut_67+0xC
   \   000014EA   0x18C3             ADDS     R3,R0,R3
   \   000014EC   0xF893 0x3068      LDRB     R3,[R3, #+104]
   \   000014F0   0x2BFF             CMP      R3,#+255
   \   000014F2   0xD0EC             BEQ.N    ??v_ImageCut_132
   \   000014F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014F6   0x4BA8             LDR.N    R3,??v_ImageCut_67+0xC
   \   000014F8   0x18C3             ADDS     R3,R0,R3
   \   000014FA   0xF893 0x3068      LDRB     R3,[R3, #+104]
   \   000014FE   0xEE00 0x3A10      VMOV     S0,R3
   \   00001502   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00001506   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001508   0x4BA3             LDR.N    R3,??v_ImageCut_67+0xC
   \   0000150A   0xEB13 0x0340      ADDS     R3,R3,R0, LSL #+1
   \   0000150E   0xF9B3 0x3158      LDRSH    R3,[R3, #+344]
   \   00001512   0xEE00 0x3A90      VMOV     S1,R3
   \   00001516   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   0000151A   0xED9F 0x1A01      VLDR.W   S2,??v_ImageCut_133  ;; 0x3ee66666
   \   0000151E   0xE001             B.N      ??v_ImageCut_139
   \                     ??v_ImageCut_133:
   \   00001520   0x3EE66666         DC32     0x3ee66666
   \                     ??v_ImageCut_139: (+1)
   \   00001524   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   00001528   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000152C   0xEE10 0x3A10      VMOV     R3,S0
   \   00001530   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00001532   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00001534   0x4299             CMP      R1,R3
   \   00001536   0xDA18             BGE.N    ??v_ImageCut_140
   \   00001538   0x4997             LDR.N    R1,??v_ImageCut_67+0xC
   \   0000153A   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   0000153E   0x1C89             ADDS     R1,R1,#+2
   \   00001540   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001542   0x4281             CMP      R1,R0
   \   00001544   0xDA11             BGE.N    ??v_ImageCut_140
   \   00001546   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001548   0x4993             LDR.N    R1,??v_ImageCut_67+0xC
   \   0000154A   0x1841             ADDS     R1,R0,R1
   \   0000154C   0xF891 0x10A3      LDRB     R1,[R1, #+163]
   \   00001550   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001552   0x4B91             LDR.N    R3,??v_ImageCut_67+0xC
   \   00001554   0x18C3             ADDS     R3,R0,R3
   \   00001556   0xF893 0x30A2      LDRB     R3,[R3, #+162]
   \   0000155A   0xFA53 0xF181      UXTAB    R1,R3,R1
   \   0000155E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001560   0x4B8D             LDR.N    R3,??v_ImageCut_67+0xC
   \   00001562   0x18C3             ADDS     R3,R0,R3
   \   00001564   0xF893 0x30A1      LDRB     R3,[R3, #+161]
   \   00001568   0x1ACB             SUBS     R3,R1,R3
   \                     ??v_ImageCut_140: (+1)
   \   0000156A   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   0000156E   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00001572   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00001574   0x4588             CMP      R8,R1
   \   00001576   0xDA13             BGE.N    ??v_ImageCut_141
   \   00001578   0x4987             LDR.N    R1,??v_ImageCut_67+0xC
   \   0000157A   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   0000157E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001580   0x4281             CMP      R1,R0
   \   00001582   0xD20D             BCS.N    ??v_ImageCut_141
   \   00001584   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001586   0x4984             LDR.N    R1,??v_ImageCut_67+0xC
   \   00001588   0x1841             ADDS     R1,R0,R1
   \   0000158A   0xF891 0x10A3      LDRB     R1,[R1, #+163]
   \   0000158E   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00001590   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00001592   0x428B             CMP      R3,R1
   \   00001594   0xDA04             BGE.N    ??v_ImageCut_141
   \   00001596   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001598   0x497F             LDR.N    R1,??v_ImageCut_67+0xC
   \   0000159A   0x1841             ADDS     R1,R0,R1
   \   0000159C   0xF891 0x30A3      LDRB     R3,[R1, #+163]
   \                     ??v_ImageCut_141: (+1)
   \   000015A0   0xF89D 0x1026      LDRB     R1,[SP, #+38]
   \   000015A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000015A6   0x4281             CMP      R1,R0
   \   000015A8   0xD232             BCS.N    ??v_ImageCut_142
   \   000015AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000015AC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000015AE   0x4290             CMP      R0,R2
   \   000015B0   0xD22E             BCS.N    ??v_ImageCut_142
   \   000015B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000015B4   0x2803             CMP      R0,#+3
   \   000015B6   0xDB2B             BLT.N    ??v_ImageCut_142
   \   000015B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000015BA   0x4977             LDR.N    R1,??v_ImageCut_67+0xC
   \   000015BC   0x1841             ADDS     R1,R0,R1
   \   000015BE   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   000015C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000015C4   0x4C74             LDR.N    R4,??v_ImageCut_67+0xC
   \   000015C6   0x1904             ADDS     R4,R0,R4
   \   000015C8   0xF894 0x4069      LDRB     R4,[R4, #+105]
   \   000015CC   0x42A1             CMP      R1,R4
   \   000015CE   0xD21F             BCS.N    ??v_ImageCut_142
   \   000015D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000015D2   0x4971             LDR.N    R1,??v_ImageCut_67+0xC
   \   000015D4   0x1841             ADDS     R1,R0,R1
   \   000015D6   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   000015DA   0x29FF             CMP      R1,#+255
   \   000015DC   0xD018             BEQ.N    ??v_ImageCut_142
   \   000015DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000015E0   0x496D             LDR.N    R1,??v_ImageCut_67+0xC
   \   000015E2   0x1841             ADDS     R1,R0,R1
   \   000015E4   0xF891 0x1069      LDRB     R1,[R1, #+105]
   \   000015E8   0x29FF             CMP      R1,#+255
   \   000015EA   0xD011             BEQ.N    ??v_ImageCut_142
   \   000015EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000015EE   0x496A             LDR.N    R1,??v_ImageCut_67+0xC
   \   000015F0   0x1841             ADDS     R1,R0,R1
   \   000015F2   0xF891 0x10A3      LDRB     R1,[R1, #+163]
   \   000015F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000015F8   0x4B67             LDR.N    R3,??v_ImageCut_67+0xC
   \   000015FA   0x18C3             ADDS     R3,R0,R3
   \   000015FC   0xF893 0x30A2      LDRB     R3,[R3, #+162]
   \   00001600   0xFA53 0xF181      UXTAB    R1,R3,R1
   \   00001604   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001606   0x4B64             LDR.N    R3,??v_ImageCut_67+0xC
   \   00001608   0x18C3             ADDS     R3,R0,R3
   \   0000160A   0xF893 0x30A1      LDRB     R3,[R3, #+161]
   \   0000160E   0x1ACB             SUBS     R3,R1,R3
   \                     ??v_ImageCut_142: (+1)
   \   00001610   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00001612   0x2BB6             CMP      R3,#+182
   \   00001614   0xDB00             BLT.N    ??v_ImageCut_143
   \   00001616   0x23B5             MOVS     R3,#+181
   \                     ??v_ImageCut_143: (+1)
   \   00001618   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   0000161A   0x2B03             CMP      R3,#+3
   \   0000161C   0xDA00             BGE.N    ??v_ImageCut_144
   \   0000161E   0x2303             MOVS     R3,#+3
   \                     ??v_ImageCut_144: (+1)
   \   00001620   0x0019             MOVS     R1,R3
   \   00001622   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001624   0x4B5C             LDR.N    R3,??v_ImageCut_67+0xC
   \   00001626   0x18C3             ADDS     R3,R0,R3
   \   00001628   0xF883 0x10A4      STRB     R1,[R3, #+164]
   \   0000162C   0xE74F             B.N      ??v_ImageCut_132
   1462                  }
   1463          
   1464                  //这里得做个继续循迹
   1465                  //TurningBeacauseVeryLittle.isHappened = 0;
   1466              }
   1467              
   1468              /*
   1469              if(255 != LastSide.Last_BlackLine_suddenlyHappen)//防止15cm在线开外
   1470              {
   1471                  end_y_ctr = LastSide.Last_BlackLine_suddenlyHappen;
   1472                  LastSide.Last_BlackLine_suddenlyHappen = 255;
   1473              }
   1474              */
   1475              /*
   1476              do//补线这里有很大的问题
   1477              {
   1478                  uint8 isLostDouble = 0;
   1479                  uint8 LostStart_Ypos = 0;
   1480                  uint8 isLostFirstFindAnother = 0;
   1481                  for(uint8 loop = m_ImageAbstract.Start_Y_Position;loop <= end_y_ctr;loop++)
   1482                  {
   1483                      isLostFirstFindAnother = 1;//前移
   1484                      if(255 == m_ImageAbstract.Left[loop])
   1485                      {
   1486                          if(255 == m_ImageAbstract.Right[loop])//也许可以将这里的单独提出，或者补边线
   1487                          {
   1488                              isLostFirstFindAnother = 0;//
   1489                              if(0 == isLostDouble)
   1490                              {
   1491                                  isLostDouble = 1;
   1492                                  if(m_ImageAbstract.Start_Y_Position != loop){LostStart_Ypos = loop - 1;}
   1493                                  else{LostStart_Ypos = loop;}//这两处提供丢失的Y位置
   1494                              }
   1495                          }
   1496                          else//左侧丢线
   1497                          {
   1498                          }
   1499                      }
   1500                      else
   1501                      {
   1502                          if(255 == m_ImageAbstract.Right[loop])//右侧丢线
   1503                          {
   1504                          }
   1505                          else//双边都存在
   1506                          {
   1507                          }
   1508                      }//基本判断结束
   1509                      if((1 == isLostDouble)&&(1 == isLostFirstFindAnother))
   1510                      {
   1511                          isLostDouble = 0;
   1512                          float K = (m_ImageAbstract.Central[loop] - m_ImageAbstract.Central[LostStart_Ypos])/(loop - LostStart_Ypos);
   1513                          float B = m_ImageAbstract.Central[LostStart_Ypos] - K * LostStart_Ypos;
   1514                          
   1515                          for(uint8 inter = LostStart_Ypos;inter < loop;inter++)//补线
   1516                          {//这段代码曾经出了问题 => 6.3发现了
   1517                              sint16 central_signed = (sint16)(B + K * inter);//中线带符号
   1518                              if(central_signed > constNum_X_MaxCounter - constn_xFindJumpLine_Width)//以下也是限制
   1519                              {central_signed = constNum_X_MaxCounter - constn_xFindJumpLine_Width;}
   1520                              if(central_signed < constn_xFindJumpLine_Width)
   1521                              {central_signed = constn_xFindJumpLine_Width;}//以上为限制幅
   1522                              m_ImageAbstract.Central[inter] = central_signed;//绘图
   1523                          }
   1524                          
   1525                      }//补线结束
   1526                  }//=======================================================================////
   1527              }while(0);
   1528              */
   1529              /*
   1530              m_ImageAbstract.BlackBarHeight_Start = BlackBarAbout10cm.startLine;
   1531              m_ImageAbstract.BlackBarHeight_End = BlackBarAbout10cm.LastWitdh_YaxisVal;
   1532              if(BlackBarAbout10cm.startLine != BlackBarAbout10cm.LastWitdh_YaxisVal)
   1533              {//直接忽略全部一侧得了
   1534                  sint16 x_MidPos = 0.f;
   1535                  for(uint8 loop = BlackBarAbout10cm.startLine;loop < BlackBarAbout10cm.LastWitdh_YaxisVal;loop++)
   1536                  {
   1537                      if(Sid_Left == BlackBarAbout10cm.TurnSide)//左侧有效
   1538                      {
   1539                          x_MidPos = (sint16)(m_ImageAbstract.Left[loop] + m_ImageAbstract.width[loop] * 0.45);
   1540                      }
   1541                      if(Sid_Right == BlackBarAbout10cm.TurnSide)//左侧有效
   1542                      {
   1543                          x_MidPos = (sint16)(m_ImageAbstract.Right[loop] - m_ImageAbstract.width[loop] * 0.45);
   1544                      }
   1545                      if(x_MidPos > 184 - 3){x_MidPos = 184 - 3;}
   1546                      if(x_MidPos < 3){x_MidPos = 3;}
   1547                      m_ImageAbstract.Central[loop] = x_MidPos;
   1548                  }
   1549              }
   1550              */
   1551              
   1552          
   1553              uint8 isMayBeHappenedHazard = 0;//可能发生了障碍
   \                     ??v_ImageCut_89: (+1)
   \   0000162E   0x2100             MOVS     R1,#+0
   1554              uint8 isHaveLonlyLine = 0;
   \   00001630   0x2400             MOVS     R4,#+0
   1555              m_ImageTesting.isOccurLonlyLineBreak = 0;
   \   00001632   0x4856             LDR.N    R0,??v_ImageCut_67
   \   00001634   0x2200             MOVS     R2,#+0
   \   00001636   0x7002             STRB     R2,[R0, #+0]
   1556              uint8 firstAndSecond_isBeenDrawing = 0;
   \   00001638   0xF05F 0x0A00      MOVS     R10,#+0
   1557              do//进行单线与障碍的区分
   1558              {//所有的边线全都有往两边搜索=>黑块、障碍、单线全都有两侧的线
   1559                  //现在这里能很明确地找出单线出现的地方，但却不能准确地判断出单线应该走向的地方
   1560                  //并非单线无法识别，而是单线完全丢失的时候，舵机会摆正，这里需要修改，还有一个就是出单线的时候的截止问题
   1561                  //论如何顺畅出单线（？）
   1562                  //处理单线前的全白区域
   1563                  //u_LonlyLine thisTimeStatus = LLT_NaN;
   1564                  /*if(1 == TurningBeacauseVeryLittle.isHappened){break;}*/
   1565                  
   1566                  
   1567                  
   1568                  uint8 LonlyLineStartLine = 0;
   \   0000163C   0x2000             MOVS     R0,#+0
   \   0000163E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1569                  uint8 LonlyLineOccurCounter = 0;//单线发生次数计数器
   \   00001642   0x2200             MOVS     R2,#+0
   1570                  uint8 temp_x_startPos_central[60];
   1571                  
   1572                  sint16 central_Pos_number = m_ImageAbstract.LastFrame_CentralPos;
   \   00001644   0x4854             LDR.N    R0,??v_ImageCut_67+0xC
   \   00001646   0xF890 0x51D4      LDRB     R5,[R0, #+468]
   1573                  //需要第一次断定初始的PosNumber，防止误判
   1574                  sint16 left_Pos_number_CUT = 0;sint16 right_Pos_number_CUT = 0;
   \   0000164A   0x2700             MOVS     R7,#+0
   \   0000164C   0x2000             MOVS     R0,#+0
   1575                  //uint8 isOccurLonlyLine = 0;
   1576                  sint8 finderYtimeCounter = -1;
   \   0000164E   0xF05F 0x38FF      MOVS     R8,#-1
   1577                  //uint8 LonlyLineisHave_1isL_2isR = 0;
   1578                  
   1579                  uint8 firstTimeCut2LonlyLine = 255;
   \   00001652   0xF04F 0x09FF      MOV      R9,#+255
   1580                  uint8 isHaveLonlyLineOnce = 0;
   \   00001656   0x2300             MOVS     R3,#+0
   1581                  
   1582                  /*uint8 isNeedFindTheNearestsides = 1;*/
   1583                  uint8 leftSide_whoisnearestwithRight = 0;
   \   00001658   0xF05F 0x0C00      MOVS     R12,#+0
   1584                  uint8 rightSide_whoisnearestwithLeft = 255;
   \   0000165C   0xF04F 0x0EFF      MOV      LR,#+255
   1585                  //uint8 lastOccurFilter_Line = 255;
   1586                  for(uint8 yCounter = m_ImageAbstract.Start_Y_Position;yCounter < end_y_ctr;yCounter ++)
   \   00001660   0x4E4D             LDR.N    R6,??v_ImageCut_67+0xC
   \   00001662   0xF896 0x61D0      LDRB     R6,[R6, #+464]
   \   00001666   0xE00A             B.N      ??v_ImageCut_145
   1587                  {//只要是拥有了跳变都进行了识别
   1588                      
   1589                      if(m_ImageAbstract.Start_Y_Position != yCounter)
   1590                      {
   1591                          left_Pos_number_CUT  = m_ImageAbstract.Central[yCounter-1]
   1592                                               - m_ImageAbstract.width[yCounter]*0.3;
   1593                          right_Pos_number_CUT = m_ImageAbstract.Central[yCounter-1]
   1594                                               + m_ImageAbstract.width[yCounter]*0.3;
   1595                          if(__ABS(m_ImageAbstract.Central[yCounter] - m_ImageAbstract.Central[yCounter-1])
   1596                           >= m_ImageAbstract.width[yCounter]/4
   1597                             )
   1598                          {
   1599                              if(m_ImageAbstract.Central[yCounter]<m_ImageAbstract.Central[yCounter-1])
   1600                              {
   1601                                  right_Pos_number_CUT = 181;
   1602                              }
   1603                              else
   1604                              {
   1605                                  left_Pos_number_CUT = 3;
   1606                              }
   1607                          }
   1608                      }
   1609                      else
   1610                      {
   1611                          left_Pos_number_CUT  = 3;
   1612                          right_Pos_number_CUT = 181;
   1613                      }
   1614                      
   1615                      if(left_Pos_number_CUT>181){left_Pos_number_CUT=181;}
   1616                      if(left_Pos_number_CUT<3){left_Pos_number_CUT=3;}
   1617                      if(right_Pos_number_CUT>181){right_Pos_number_CUT=181;}
   1618                      if(right_Pos_number_CUT<3){right_Pos_number_CUT=3;}
   1619                      m_ImageTesting.hazardvaildLine[yCounter] = left_Pos_number_CUT;
   1620                      //central_Pos_number = m_ImageAbstract.Central[yCounter];
   1621                      if(yCounter > m_ImageAbstract.Start_Y_Position)
   1622                      {
   1623                          if(Sid_None == TrkSide[yCounter]){TrkSide[yCounter] = TrkSide[yCounter-1];}
   1624                      }//增加认定
   1625                      //m_ImageTesting.is140double130left150right160none_aboutUp[yCounter] = 80;
   1626                      /*m_ImageTesting.is140double130left150right160none_aboutUp[yCounter]
   1627                          = (uint8)(TrkSide[yCounter]);*/
   1628                      
   1629                      
   1630                      temp_x_startPos_central[yCounter] = m_ImageAbstract.Central[yCounter];//暂存用于恢复
   1631                      isHaveLonlyLineOnce = 0;
   1632                      //isHaveLonlyLine = 0;//更新isHaveLonlyLine，以便于计数
   1633                      finderYtimeCounter++;//防止被countinue掉
   1634          
   1635                      if((255 == m_ImageAbstract.Left_UpBlack2White[yCounter])&&
   1636                         (255 == m_ImageAbstract.Right_UpBlack2White[yCounter])
   1637                         &&(yCounter > m_ImageAbstract.Start_Y_Position))    
   1638                      {//刨去上面这样的情况，都是可能找到了单线
   1639                          sint16 should_inThis;
   1640                          if(finderYtimeCounter > 1)
   1641                          {
   1642                              if(finderYtimeCounter > 2)//这里对本次的跳出进行描述
   1643                              {////单线代码的最关键部分
   1644                                  should_inThis = m_ImageAbstract.Central[yCounter-1] + //所有问题应该在这里
   1645                                          (m_ImageAbstract.Central[yCounter-2] - m_ImageAbstract.Central[yCounter-3]);
   1646                              }
   1647                              else
   1648                              {
   1649                                  should_inThis = m_ImageAbstract.Central[yCounter-1];
   1650                              }
   1651                              
   1652                              if(should_inThis < 3){should_inThis = 3;}
   1653                              if(should_inThis > 181){should_inThis = 181;}
   1654                              
   1655                              if((__ABS(should_inThis - m_ImageAbstract.Central[yCounter])>m_ImageAbstract.width[yCounter]/9)
   1656                               &&((1 == isHaveLonlyLineStartCorner)||(1 == isHaveLonlyLine))
   1657                               )
   1658                              {//改善这里的条件=>这里的限制条件应该更为明确//7cm//9cm又何妨//这块改成5cm=>7cm
   1659          
   1660          #define DE_isLonlyLinePoint(y)          ((Sid_LonlyLine == TrkSide[y])||(Sid_DoubleBlack == TrkSide[y]))
   1661                                 
   1662                                  if(
   1663                  (DE_isLonlyLinePoint(((yCounter-4)>m_ImageAbstract.Start_Y_Position)?yCounter-4:m_ImageAbstract.Start_Y_Position+1))
   1664               || (DE_isLonlyLinePoint(((yCounter-3)>m_ImageAbstract.Start_Y_Position)?yCounter-3:m_ImageAbstract.Start_Y_Position+1))
   1665               || (DE_isLonlyLinePoint(((yCounter-2)>m_ImageAbstract.Start_Y_Position)?yCounter-2:m_ImageAbstract.Start_Y_Position+1))
   1666               || (DE_isLonlyLinePoint(((yCounter-1)>m_ImageAbstract.Start_Y_Position)?yCounter-1:m_ImageAbstract.Start_Y_Position+1))
   1667               /*|| (DE_isLonlyLinePoint((yCounter)>m_ImageAbstract.Start_Y_Position?yCounter:m_ImageAbstract.Start_Y_Position+1))
   1668               || (DE_isLonlyLinePoint((yCounter+1)<m_ImageAbstract.Last_Y_Position?yCounter+1:m_ImageAbstract.Last_Y_Position-1))
   1669               || (DE_isLonlyLinePoint((yCounter+2)<m_ImageAbstract.Last_Y_Position?yCounter+2:m_ImageAbstract.Last_Y_Position-1))
   1670               || (DE_isLonlyLinePoint((yCounter+3)<m_ImageAbstract.Last_Y_Position?yCounter+3:m_ImageAbstract.Last_Y_Position-1))
   1671               || (DE_isLonlyLinePoint((yCounter+5)<m_ImageAbstract.Last_Y_Position?yCounter+4:m_ImageAbstract.Last_Y_Position-1))*/
   1672                   )
   1673                                  {
   1674                                  m_ImageTesting.is140double130left150right160none_aboutUp[yCounter] += 100;
   1675                                  m_ImageTesting.isOccurLonlyLineBreak = 1;
   1676                                  end_y_ctr = yCounter;
   1677                                  isMayBeHappenedHazard = 1;//这里可能发生了障碍=>通过这里判定
   1678                                  break;//这里应当跳出
   1679                                  }
   1680                                  TurnOnTheLonlyLine = 1;
   1681                              }
   1682                          }
   1683                          else
   1684                          {//这里是0 1两态
   1685                              //首先得根据上次，是不是单线，再根据当前的中线是不是，只有通过这两处处理
   1686                              if((0 == finderYtimeCounter)&&(1==m_ImageAbstract.LonlyLine_isXposLonlyLineFirstLine))
   1687                              {
   1688                                  if(__ABS(m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position] - 
   1689                                     m_ImageAbstract.LonlyLine_firstLineXpos)
   1690                                    >m_ImageAbstract.width[m_ImageAbstract.Start_Y_Position]/3)
   1691                                  {
   1692                                      if(255 != m_ImageAbstract.Left[m_ImageAbstract.Start_Y_Position])
   1693                                      {
   1694                                          if(255 != m_ImageAbstract.Right[m_ImageAbstract.Start_Y_Position])
   1695                                          {
   1696                                              
   1697                                          }
   1698                                          else
   1699                                          {
   1700                                              m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position]
   1701                                            = m_ImageAbstract.Left[m_ImageAbstract.Start_Y_Position];
   1702                                            isHaveLonlyLine = 1;
   1703                                            isHaveLonlyLineOnce = 1;
   1704                                            TrkSide[yCounter] = Sid_LonlyLine;
   1705                                            //LonlyLine_Counter ++;
   1706                                            firstAndSecond_isBeenDrawing = 1;
   1707                                          }
   1708                                      }
   1709                                      else
   1710                                      {
   1711                                          if(255 != m_ImageAbstract.Right[m_ImageAbstract.Start_Y_Position])
   1712                                          {
   1713                                              m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position]
   1714                                            = m_ImageAbstract.Right[m_ImageAbstract.Start_Y_Position];
   1715                                            isHaveLonlyLine = 1;isHaveLonlyLineOnce = 1;
   1716                                            TrkSide[yCounter] = Sid_LonlyLine;
   1717                                            //LonlyLine_Counter ++;
   1718                                            firstAndSecond_isBeenDrawing = 1;
   1719                                          }
   1720                                          else
   1721                                          {
   1722                                              if((255 == m_ImageAbstract.Left_UpBlack2White[m_ImageAbstract.Start_Y_Position])
   1723                                               &&(255 == m_ImageAbstract.Right_UpBlack2White[m_ImageAbstract.Start_Y_Position]))
   1724                                              {
   1725                                                  m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position]
   1726                                                = m_ImageAbstract.LastFrame_CentralPos;
   1727                                                /*
   1728                                                  isHaveLonlyLine = 1;isHaveLonlyLineOnce = 1;
   1729                                                  TrkSide[yCounter] = Sid_LonlyLine;
   1730                                                  LonlyLine_Counter ++;*/
   1731                                                  firstAndSecond_isBeenDrawing = 1;
   1732                                              }
   1733                                          }
   1734                                      }//多次if结束
   1735                                  }
   1736                              }
   1737                              if((1 == finderYtimeCounter)&&(1==m_ImageAbstract.LonlyLine_isXposLonlyLineSecondLine))
   1738                              {
   1739                                  if(__ABS(m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position+1] - 
   1740                                     m_ImageAbstract.LonlyLine_secondLineXpos)
   1741                                    >m_ImageAbstract.width[m_ImageAbstract.Start_Y_Position+1]/3)
   1742                                  {
   1743                                      if(255 != m_ImageAbstract.Left[m_ImageAbstract.Start_Y_Position+1])
   1744                                      {
   1745                                          if(255 != m_ImageAbstract.Right[m_ImageAbstract.Start_Y_Position+1])
   1746                                          {
   1747                                              
   1748                                          }
   1749                                          else
   1750                                          {
   1751                                              m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position+1]
   1752                                            = m_ImageAbstract.Left[m_ImageAbstract.Start_Y_Position+1];
   1753                                            isHaveLonlyLine = 1;isHaveLonlyLineOnce = 1;
   1754                                            TrkSide[m_ImageAbstract.Start_Y_Position+1] = Sid_LonlyLine;
   1755                                            //LonlyLine_Counter ++;
   1756                                            firstAndSecond_isBeenDrawing = 1;
   1757                                          }
   1758                                      }
   1759                                      else
   1760                                      {
   1761                                          if(255 != m_ImageAbstract.Right[m_ImageAbstract.Start_Y_Position+1])
   1762                                          {
   1763                                              m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position+1]
   1764                                            = m_ImageAbstract.Right[m_ImageAbstract.Start_Y_Position+1];
   1765                                            isHaveLonlyLine = 1;isHaveLonlyLineOnce = 1;
   1766                                            TrkSide[m_ImageAbstract.Start_Y_Position] = Sid_LonlyLine;
   1767                                            //LonlyLine_Counter ++;
   1768                                            firstAndSecond_isBeenDrawing = 1;
   1769                                          }
   1770                                          else
   1771                                          {
   1772                                              if((255 == m_ImageAbstract.Left_UpBlack2White[m_ImageAbstract.Start_Y_Position+1])
   1773                                               &&(255 == m_ImageAbstract.Right_UpBlack2White[m_ImageAbstract.Start_Y_Position+1]))
   1774                                              {
   1775                                                  m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position+1]
   1776                                                = m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position];
   1777                                                /*  isHaveLonlyLine = 1;isHaveLonlyLineOnce = 1;
   1778                                                  TrkSide[m_ImageAbstract.Start_Y_Position+1] = Sid_LonlyLine;
   1779                                                  LonlyLine_Counter ++;*/
   1780                                                  firstAndSecond_isBeenDrawing = 1;
   1781                                              }
   1782                                          }
   1783                                      }//多次if结束
   1784                                  }
   1785                              }
   1786                          }
   1787                          //当宽度极小的时候，单线的宽度自然就会变大，这时候，需要主动移动=>也就是0/1 == finderYtimeCounter的时候
   1788                          /*
   1789                          if(1 == isNeedFindTheNearestsides)
   1790                          {
   1791                              if(leftSide_whoisnearestwithRight < m_ImageAbstract.Left[yCounter])//===
   1792                              {leftSide_whoisnearestwithRight = m_ImageAbstract.Left[yCounter];}
   1793                              if(rightSide_whoisnearestwithLeft > m_ImageAbstract.Right[yCounter])
   1794                              {rightSide_whoisnearestwithLeft = m_ImageAbstract.Right[yCounter];}//===
   1795                          }
   1796                          */
   1797                          //finderYtimeCounter = 0;//这一步是干啥的？？？注释掉
   1798                          central_Pos_number = m_ImageAbstract.Central[yCounter];//问题在不经意的拐角，轻轻叩门
   1799                          continue;//清除已经搜寻的时间计数，保证下次的计数，并继续
   1800                      }//在上面这种情况里面分析最左最右的情况
   1801                      else
   1802                      {
   1803                          //isNeedFindTheNearestsides = 0;
   1804                      }
   1805                      //else{thisFrameisHaveLonlyLine = 1;}//这个已经有了单线
   1806                      if(255 == firstTimeCut2LonlyLine){firstTimeCut2LonlyLine = yCounter;}//记录第一次切入赛道的时间
   1807                      uint8 LeftCut = 0;uint8 RightCut = 0;
   1808                      
   1809                      
   1810                      
   1811                      
   1812                      LeftCut = 0;RightCut = 0;
   1813                      if((255 != m_ImageAbstract.Left_UpBlack2White[yCounter])
   1814                       &&(left_Pos_number_CUT <= m_ImageAbstract.Left_UpBlack2White[yCounter])
   1815                       &&(right_Pos_number_CUT>= m_ImageAbstract.Left_UpBlack2White[yCounter]))
   1816                      {
   1817                          LeftCut = 1;
   1818                          //isOccurLonlyLine = 1;
   1819                          central_Pos_number = 
   1820                         (m_ImageAbstract.Left[yCounter] + m_ImageAbstract.Left_UpBlack2White[yCounter])/2;
   1821                      }
   1822                      if((255 != m_ImageAbstract.Right_UpBlack2White[yCounter])
   1823                       &&(left_Pos_number_CUT <= m_ImageAbstract.Right_UpBlack2White[yCounter])
   1824                       &&(right_Pos_number_CUT>= m_ImageAbstract.Right_UpBlack2White[yCounter]))
   1825                      {
   1826                          RightCut = 1;
   1827                          //isOccurLonlyLine = 1;
   1828                          central_Pos_number = 
   1829                         (m_ImageAbstract.Right[yCounter] + m_ImageAbstract.Right_UpBlack2White[yCounter])/2;
   1830                      }
   1831                      //===============================这里还没有与上一次的信息，以及相应的事情做判断
   1832                      if(1 == (LeftCut + RightCut))
   1833                      {
   1834                          //thisTimeStatus = LLT_Lasting;
   1835                          showLonlyLineFindAboutUpSet = 'D';
   1836                          //时常应该在这里出现，不过也会出现奇怪的情况
   1837                          
   1838                          /*删除这里会出现什么问题呢？
   1839                          if(m_ImageAbstract.Start_Y_Position == yCounter)
   1840                          {
   1841                              central_Pos_number = (uint8)(0.7*central_Pos_number + 0.3*m_ImageAbstract.Central[yCounter]);
   1842                          }*/
   1843                          isHaveLonlyLine = 1;isHaveLonlyLineOnce = 1;
   1844                          TrkSide[yCounter] = Sid_LonlyLine;
   1845                          //m_ImageTesting.hazardvaildLine[yCounter] = central_Pos_number;
   1846                          //LonlyLine_Counter++;
   1847                          //if(1==LeftCut){LonlyLineisHave_1isL_2isR = 1;}
   1848                          //if(1==LeftCut){LonlyLineisHave_1isL_2isR = 2;}
   1849                      }
   1850                      else
   1851                      {
   1852                          showLonlyLineFindAboutUpSet = 'N';
   1853                          if((255!=m_ImageAbstract.Left_UpBlack2White[yCounter])&&(255!=m_ImageAbstract.Right_UpBlack2White[yCounter]))
   1854                          {//双边都存在单线的话（？）
   1855                              central_Pos_number = (m_ImageAbstract.Left[yCounter] + m_ImageAbstract.Right[yCounter])/2;
   1856                              uint8 centralViewer = (m_ImageAbstract.Central[yCounter]+m_ImageAbstract.LastFrame_CentralPos)/2;
   1857                              if(m_ImageAbstract.Right[yCounter]-m_ImageAbstract.Left[yCounter]<=0.866*m_ImageAbstract.width[yCounter])
   1858                              {
   1859                                  if((m_ImageAbstract.Right[yCounter]-centralViewer)<(m_ImageAbstract.Left[yCounter]-centralViewer))
   1860                                  {
   1861                                      //thisTimeStatus = LLT_Lasting;
   1862                                      isHaveLonlyLine = 1;isHaveLonlyLineOnce = 1;
   1863                                      //LonlyLine_Counter++;
   1864                                      TrkSide[yCounter] = Sid_LonlyLine;
   1865                                      //LonlyLineisHave_1isL_2isR = 2;
   1866                                      central_Pos_number = 
   1867                                      (m_ImageAbstract.Right[yCounter] + m_ImageAbstract.Right_UpBlack2White[yCounter])/2;
   1868                                  }
   1869                                  else
   1870                                  {
   1871                                      //thisTimeStatus = LLT_Lasting;
   1872                                      isHaveLonlyLine = 1;isHaveLonlyLineOnce = 1;
   1873                                      //LonlyLine_Counter++;
   1874                                      TrkSide[yCounter] = Sid_LonlyLine;
   1875                                      //LonlyLineisHave_1isL_2isR = 1;
   1876                                      central_Pos_number = 
   1877                                      (m_ImageAbstract.Left[yCounter] + m_ImageAbstract.Left_UpBlack2White[yCounter])/2;
   1878                                  }
   1879                              }
   1880                              else
   1881                              {
   1882                                  if(yCounter>0)
   1883                                  {
   1884                                      if(255==m_ImageAbstract.Right[yCounter-1])
   1885                                      {
   1886                                          //thisTimeStatus = LLT_Lasting;
   1887                                          isHaveLonlyLine = 1;isHaveLonlyLineOnce = 1;
   1888                                          //LonlyLine_Counter++;
   1889                                          TrkSide[yCounter] = Sid_LonlyLine;
   1890                                          //LonlyLineisHave_1isL_2isR = 2;
   1891                                          central_Pos_number = 
   1892                                          (m_ImageAbstract.Right[yCounter] + m_ImageAbstract.Right_UpBlack2White[yCounter])/2;
   1893                                      }
   1894                                      if(255==m_ImageAbstract.Left[yCounter-1])
   1895                                      {
   1896                                          //thisTimeStatus = LLT_Lasting;
   1897                                          isHaveLonlyLine = 1;isHaveLonlyLineOnce = 1;
   1898                                          //LonlyLine_Counter++;
   1899                                          TrkSide[yCounter] = Sid_LonlyLine;
   1900                                          //LonlyLineisHave_1isL_2isR = 1;
   1901                                          central_Pos_number = 
   1902                                          (m_ImageAbstract.Left[yCounter] + m_ImageAbstract.Left_UpBlack2White[yCounter])/2;
   1903                                      }
   1904                                  }
   1905                              }
   1906                          }
   1907                          else
   1908                          {
   1909                              central_Pos_number = m_ImageAbstract.Central[yCounter];
   \                     ??v_ImageCut_146: (+1)
   \   00001668   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000166A   0x484B             LDR.N    R0,??v_ImageCut_67+0xC
   \   0000166C   0x1830             ADDS     R0,R6,R0
   \   0000166E   0xF890 0x50A4      LDRB     R5,[R0, #+164]
   1910                              //这里需要处理一下
   1911                              /*
   1912                              if((__ABS(central_Pos_number - m_ImageAbstract.Central[yCounter])>m_ImageAbstract.width[yCounter]/9))
   1913                              {
   1914                                  showYcutDown = 'L';
   1915                                  end_y_ctr = yCounter;
   1916                                  break;//这里应当跳出
   1917                              }
   1918                              */
   1919                          }
   1920                          
   1921                      }
   1922                      
   1923                      /*last_Left_Viewer_X_n_cut_0 = last_Left_Viewer_X;
   1924                      last_Left_Viewer_Y_n_cut_0 = last_Left_Viewer_Y;
   1925                      last_Right_Viewer_X_n_cut_0 = last_Right_Viewer_X;
   1926                      last_Right_Viewer_Y_n_cut_0 = last_Right_Viewer_Y;*/
   1927                      
   1928                      
   1929                      m_ImageAbstract.Central[yCounter] = central_Pos_number;
   \                     ??v_ImageCut_147: (+1)
   \   00001672   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001674   0x4848             LDR.N    R0,??v_ImageCut_67+0xC
   \   00001676   0x1830             ADDS     R0,R6,R0
   \   00001678   0xF880 0x50A4      STRB     R5,[R0, #+164]
   \                     ??v_ImageCut_148: (+1)
   \   0000167C   0x1C76             ADDS     R6,R6,#+1
   \                     ??v_ImageCut_145: (+1)
   \   0000167E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001680   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00001684   0x455E             CMP      R6,R11
   \   00001686   0xF080 0x81F0      BCS.W    ??v_ImageCut_149
   \   0000168A   0x4843             LDR.N    R0,??v_ImageCut_67+0xC
   \   0000168C   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001690   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001692   0x42B0             CMP      R0,R6
   \   00001694   0xF000 0x8086      BEQ.W    ??v_ImageCut_150
   \   00001698   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000169A   0x483F             LDR.N    R0,??v_ImageCut_67+0xC
   \   0000169C   0x1830             ADDS     R0,R6,R0
   \   0000169E   0xF890 0x00A3      LDRB     R0,[R0, #+163]
   \   000016A2   0x.... 0x....      BL       __aeabi_ui2d
   \   000016A6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000016AA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000016AC   0x483A             LDR.N    R0,??v_ImageCut_67+0xC
   \   000016AE   0xEB10 0x0046      ADDS     R0,R0,R6, LSL #+1
   \   000016B2   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   000016B6   0x.... 0x....      BL       __aeabi_i2d
   \   000016BA   0xF05F 0x3233      MOVS     R2,#+858993459
   \   000016BE   0xF8DF 0x3D3C      LDR.W    R3,??v_ImageCut_151  ;; 0x3fd33333
   \   000016C2   0x.... 0x....      BL       __aeabi_dmul
   \   000016C6   0x0002             MOVS     R2,R0
   \   000016C8   0x000B             MOVS     R3,R1
   \   000016CA   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   000016CE   0x.... 0x....      BL       __aeabi_dsub
   \   000016D2   0x.... 0x....      BL       __aeabi_d2iz
   \   000016D6   0x0007             MOVS     R7,R0
   \   000016D8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000016DA   0x482F             LDR.N    R0,??v_ImageCut_67+0xC
   \   000016DC   0x1830             ADDS     R0,R6,R0
   \   000016DE   0xF890 0x00A3      LDRB     R0,[R0, #+163]
   \   000016E2   0x.... 0x....      BL       __aeabi_ui2d
   \   000016E6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000016EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000016EC   0x482A             LDR.N    R0,??v_ImageCut_67+0xC
   \   000016EE   0xEB10 0x0046      ADDS     R0,R0,R6, LSL #+1
   \   000016F2   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   000016F6   0x.... 0x....      BL       __aeabi_i2d
   \   000016FA   0xF05F 0x3233      MOVS     R2,#+858993459
   \   000016FE   0xF8DF 0x3CFC      LDR.W    R3,??v_ImageCut_151  ;; 0x3fd33333
   \   00001702   0x.... 0x....      BL       __aeabi_dmul
   \   00001706   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   0000170A   0x.... 0x....      BL       __aeabi_dadd
   \   0000170E   0x.... 0x....      BL       __aeabi_d2iz
   \   00001712   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001714   0x4920             LDR.N    R1,??v_ImageCut_67+0xC
   \   00001716   0x1871             ADDS     R1,R6,R1
   \   00001718   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   0000171C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000171E   0x4A1E             LDR.N    R2,??v_ImageCut_67+0xC
   \   00001720   0x18B2             ADDS     R2,R6,R2
   \   00001722   0xF892 0x20A3      LDRB     R2,[R2, #+163]
   \   00001726   0x1A89             SUBS     R1,R1,R2
   \   00001728   0x2900             CMP      R1,#+0
   \   0000172A   0xD50B             BPL.N    ??v_ImageCut_152
   \   0000172C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000172E   0x491A             LDR.N    R1,??v_ImageCut_67+0xC
   \   00001730   0x1871             ADDS     R1,R6,R1
   \   00001732   0xF891 0x10A3      LDRB     R1,[R1, #+163]
   \   00001736   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001738   0x4A17             LDR.N    R2,??v_ImageCut_67+0xC
   \   0000173A   0x18B2             ADDS     R2,R6,R2
   \   0000173C   0xF892 0x20A4      LDRB     R2,[R2, #+164]
   \   00001740   0x1A89             SUBS     R1,R1,R2
   \   00001742   0xE00A             B.N      ??v_ImageCut_153
   \                     ??v_ImageCut_152: (+1)
   \   00001744   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001746   0x4914             LDR.N    R1,??v_ImageCut_67+0xC
   \   00001748   0x1871             ADDS     R1,R6,R1
   \   0000174A   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   0000174E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001750   0x4A11             LDR.N    R2,??v_ImageCut_67+0xC
   \   00001752   0x18B2             ADDS     R2,R6,R2
   \   00001754   0xF892 0x20A3      LDRB     R2,[R2, #+163]
   \   00001758   0x1A89             SUBS     R1,R1,R2
   \                     ??v_ImageCut_153: (+1)
   \   0000175A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000175C   0x4A0E             LDR.N    R2,??v_ImageCut_67+0xC
   \   0000175E   0xEB12 0x0246      ADDS     R2,R2,R6, LSL #+1
   \   00001762   0xF9B2 0x2158      LDRSH    R2,[R2, #+344]
   \   00001766   0x2304             MOVS     R3,#+4
   \   00001768   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   0000176C   0x4291             CMP      R1,R2
   \   0000176E   0xDB1B             BLT.N    ??v_ImageCut_154
   \   00001770   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001772   0x4909             LDR.N    R1,??v_ImageCut_67+0xC
   \   00001774   0x1871             ADDS     R1,R6,R1
   \   00001776   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   0000177A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000177C   0x4A06             LDR.N    R2,??v_ImageCut_67+0xC
   \   0000177E   0x18B2             ADDS     R2,R6,R2
   \   00001780   0xF892 0x20A3      LDRB     R2,[R2, #+163]
   \   00001784   0x4291             CMP      R1,R2
   \   00001786   0xD20B             BCS.N    ??v_ImageCut_155
   \   00001788   0x20B5             MOVS     R0,#+181
   \   0000178A   0xE00D             B.N      ??v_ImageCut_154
   \                     ??v_ImageCut_67:
   \   0000178C   0x........         DC32     m_ImageTesting
   \   00001790   0xCCCCCCCD         DC32     0xcccccccd
   \   00001794   0x3FDCCCCC         DC32     0x3fdccccc
   \   00001798   0x........         DC32     m_ImageAbstract
   \   0000179C   0x........         DC32     m_ImageBeholder_Data
   \                     ??v_ImageCut_155: (+1)
   \   000017A0   0x2703             MOVS     R7,#+3
   \   000017A2   0xE001             B.N      ??v_ImageCut_154
   \                     ??v_ImageCut_150: (+1)
   \   000017A4   0x2703             MOVS     R7,#+3
   \   000017A6   0x20B5             MOVS     R0,#+181
   \                     ??v_ImageCut_154: (+1)
   \   000017A8   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   000017AA   0x2FB6             CMP      R7,#+182
   \   000017AC   0xDB00             BLT.N    ??v_ImageCut_156
   \   000017AE   0x27B5             MOVS     R7,#+181
   \                     ??v_ImageCut_156: (+1)
   \   000017B0   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   000017B2   0x2F03             CMP      R7,#+3
   \   000017B4   0xDA00             BGE.N    ??v_ImageCut_157
   \   000017B6   0x2703             MOVS     R7,#+3
   \                     ??v_ImageCut_157: (+1)
   \   000017B8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000017BA   0x28B6             CMP      R0,#+182
   \   000017BC   0xDB00             BLT.N    ??v_ImageCut_158
   \   000017BE   0x20B5             MOVS     R0,#+181
   \                     ??v_ImageCut_158: (+1)
   \   000017C0   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000017C2   0x2803             CMP      R0,#+3
   \   000017C4   0xDA00             BGE.N    ??v_ImageCut_159
   \   000017C6   0x2003             MOVS     R0,#+3
   \                     ??v_ImageCut_159: (+1)
   \   000017C8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000017CA   0xF8DF 0x1C34      LDR.W    R1,??v_ImageCut_151+0x4
   \   000017CE   0x1871             ADDS     R1,R6,R1
   \   000017D0   0xF881 0x7045      STRB     R7,[R1, #+69]
   \   000017D4   0xF8DF 0x1C2C      LDR.W    R1,??v_ImageCut_151+0x8
   \   000017D8   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   000017DC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000017DE   0x42B1             CMP      R1,R6
   \   000017E0   0xD20C             BCS.N    ??v_ImageCut_160
   \   000017E2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000017E4   0xA916             ADD      R1,SP,#+88
   \   000017E6   0x5C71             LDRB     R1,[R6, R1]
   \   000017E8   0x2928             CMP      R1,#+40
   \   000017EA   0xD107             BNE.N    ??v_ImageCut_160
   \   000017EC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000017EE   0xA916             ADD      R1,SP,#+88
   \   000017F0   0x1871             ADDS     R1,R6,R1
   \   000017F2   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000017F6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000017F8   0xAA16             ADD      R2,SP,#+88
   \   000017FA   0x54B1             STRB     R1,[R6, R2]
   \                     ??v_ImageCut_160: (+1)
   \   000017FC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000017FE   0xF8DF 0x1C04      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001802   0x1871             ADDS     R1,R6,R1
   \   00001804   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   00001808   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000180A   0xAA25             ADD      R2,SP,#+148
   \   0000180C   0x54B1             STRB     R1,[R6, R2]
   \   0000180E   0x2300             MOVS     R3,#+0
   \   00001810   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00001814   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001816   0xF8DF 0x1BEC      LDR.W    R1,??v_ImageCut_151+0x8
   \   0000181A   0x1871             ADDS     R1,R6,R1
   \   0000181C   0xF891 0x10E0      LDRB     R1,[R1, #+224]
   \   00001820   0x29FF             CMP      R1,#+255
   \   00001822   0xF040 0x82FB      BNE.W    ??v_ImageCut_161
   \   00001826   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001828   0xF8DF 0x1BD8      LDR.W    R1,??v_ImageCut_151+0x8
   \   0000182C   0x1871             ADDS     R1,R6,R1
   \   0000182E   0xF891 0x111C      LDRB     R1,[R1, #+284]
   \   00001832   0x29FF             CMP      R1,#+255
   \   00001834   0xF040 0x82F2      BNE.W    ??v_ImageCut_161
   \   00001838   0xF8DF 0x1BC8      LDR.W    R1,??v_ImageCut_151+0x8
   \   0000183C   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00001840   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001842   0x42B1             CMP      R1,R6
   \   00001844   0xF080 0x82EA      BCS.W    ??v_ImageCut_161
   \   00001848   0xFA4F 0xF888      SXTB     R8,R8            ;; SignExt  R8,R8,#+24,#+24
   \   0000184C   0xF1B8 0x0F02      CMP      R8,#+2
   \   00001850   0xF2C0 0x814E      BLT.W    ??v_ImageCut_162
   \   00001854   0xFA4F 0xF888      SXTB     R8,R8            ;; SignExt  R8,R8,#+24,#+24
   \   00001858   0xF1B8 0x0F03      CMP      R8,#+3
   \   0000185C   0xDB15             BLT.N    ??v_ImageCut_163
   \   0000185E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001860   0xF8DF 0x0BA0      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001864   0x1830             ADDS     R0,R6,R0
   \   00001866   0xF890 0x00A3      LDRB     R0,[R0, #+163]
   \   0000186A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000186C   0xF8DF 0x1B94      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001870   0x1871             ADDS     R1,R6,R1
   \   00001872   0xF891 0x10A2      LDRB     R1,[R1, #+162]
   \   00001876   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   0000187A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000187C   0xF8DF 0x1B84      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001880   0x1871             ADDS     R1,R6,R1
   \   00001882   0xF891 0x10A1      LDRB     R1,[R1, #+161]
   \   00001886   0x1A40             SUBS     R0,R0,R1
   \   00001888   0xE005             B.N      ??v_ImageCut_164
   \                     ??v_ImageCut_163: (+1)
   \   0000188A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000188C   0xF8DF 0x0B74      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001890   0x1830             ADDS     R0,R6,R0
   \   00001892   0xF890 0x00A3      LDRB     R0,[R0, #+163]
   \                     ??v_ImageCut_164: (+1)
   \   00001896   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00001898   0x2803             CMP      R0,#+3
   \   0000189A   0xDA00             BGE.N    ??v_ImageCut_165
   \   0000189C   0x2003             MOVS     R0,#+3
   \                     ??v_ImageCut_165: (+1)
   \   0000189E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000018A0   0x28B6             CMP      R0,#+182
   \   000018A2   0xDB00             BLT.N    ??v_ImageCut_166
   \   000018A4   0x20B5             MOVS     R0,#+181
   \                     ??v_ImageCut_166: (+1)
   \   000018A6   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000018A8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018AA   0xF8DF 0x1B58      LDR.W    R1,??v_ImageCut_151+0x8
   \   000018AE   0x1871             ADDS     R1,R6,R1
   \   000018B0   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   000018B4   0x1A41             SUBS     R1,R0,R1
   \   000018B6   0x2900             CMP      R1,#+0
   \   000018B8   0xD508             BPL.N    ??v_ImageCut_167
   \   000018BA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018BC   0xF8DF 0x1B44      LDR.W    R1,??v_ImageCut_151+0x8
   \   000018C0   0x1871             ADDS     R1,R6,R1
   \   000018C2   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   000018C6   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000018C8   0x1A08             SUBS     R0,R1,R0
   \   000018CA   0xE007             B.N      ??v_ImageCut_168
   \                     ??v_ImageCut_167: (+1)
   \   000018CC   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000018CE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018D0   0xF8DF 0x1B30      LDR.W    R1,??v_ImageCut_151+0x8
   \   000018D4   0x1871             ADDS     R1,R6,R1
   \   000018D6   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   000018DA   0x1A40             SUBS     R0,R0,R1
   \                     ??v_ImageCut_168: (+1)
   \   000018DC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018DE   0xF8DF 0x1B24      LDR.W    R1,??v_ImageCut_151+0x8
   \   000018E2   0xEB11 0x0146      ADDS     R1,R1,R6, LSL #+1
   \   000018E6   0xF9B1 0x1158      LDRSH    R1,[R1, #+344]
   \   000018EA   0x2209             MOVS     R2,#+9
   \   000018EC   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000018F0   0x4281             CMP      R1,R0
   \   000018F2   0xF280 0x828C      BGE.W    ??v_ImageCut_169
   \   000018F6   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \   000018FA   0x2801             CMP      R0,#+1
   \   000018FC   0xD003             BEQ.N    ??v_ImageCut_170
   \   000018FE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00001900   0x2C01             CMP      R4,#+1
   \   00001902   0xF040 0x8284      BNE.W    ??v_ImageCut_169
   \                     ??v_ImageCut_170: (+1)
   \   00001906   0xF8DF 0x0AFC      LDR.W    R0,??v_ImageCut_151+0x8
   \   0000190A   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   0000190E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001910   0x1F31             SUBS     R1,R6,#+4
   \   00001912   0x4288             CMP      R0,R1
   \   00001914   0xDA02             BGE.N    ??v_ImageCut_171
   \   00001916   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001918   0x1F30             SUBS     R0,R6,#+4
   \   0000191A   0xE004             B.N      ??v_ImageCut_172
   \                     ??v_ImageCut_171: (+1)
   \   0000191C   0xF8DF 0x0AE4      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001920   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001924   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_172: (+1)
   \   00001926   0xA916             ADD      R1,SP,#+88
   \   00001928   0x5C40             LDRB     R0,[R0, R1]
   \   0000192A   0x2846             CMP      R0,#+70
   \   0000192C   0xF000 0x808C      BEQ.W    ??v_ImageCut_173
   \   00001930   0xF8DF 0x0AD0      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001934   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001938   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000193A   0x1F31             SUBS     R1,R6,#+4
   \   0000193C   0x4288             CMP      R0,R1
   \   0000193E   0xDA02             BGE.N    ??v_ImageCut_174
   \   00001940   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001942   0x1F30             SUBS     R0,R6,#+4
   \   00001944   0xE004             B.N      ??v_ImageCut_175
   \                     ??v_ImageCut_174: (+1)
   \   00001946   0xF8DF 0x0ABC      LDR.W    R0,??v_ImageCut_151+0x8
   \   0000194A   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   0000194E   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_175: (+1)
   \   00001950   0xA916             ADD      R1,SP,#+88
   \   00001952   0x5C40             LDRB     R0,[R0, R1]
   \   00001954   0x283C             CMP      R0,#+60
   \   00001956   0xD077             BEQ.N    ??v_ImageCut_173
   \   00001958   0xF8DF 0x0AA8      LDR.W    R0,??v_ImageCut_151+0x8
   \   0000195C   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001960   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001962   0x1EF1             SUBS     R1,R6,#+3
   \   00001964   0x4288             CMP      R0,R1
   \   00001966   0xDA02             BGE.N    ??v_ImageCut_176
   \   00001968   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000196A   0x1EF0             SUBS     R0,R6,#+3
   \   0000196C   0xE004             B.N      ??v_ImageCut_177
   \                     ??v_ImageCut_176: (+1)
   \   0000196E   0xF8DF 0x0A94      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001972   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001976   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_177: (+1)
   \   00001978   0xA916             ADD      R1,SP,#+88
   \   0000197A   0x5C40             LDRB     R0,[R0, R1]
   \   0000197C   0x2846             CMP      R0,#+70
   \   0000197E   0xD063             BEQ.N    ??v_ImageCut_173
   \   00001980   0xF8DF 0x0A80      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001984   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001988   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000198A   0x1EF1             SUBS     R1,R6,#+3
   \   0000198C   0x4288             CMP      R0,R1
   \   0000198E   0xDA02             BGE.N    ??v_ImageCut_178
   \   00001990   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001992   0x1EF0             SUBS     R0,R6,#+3
   \   00001994   0xE004             B.N      ??v_ImageCut_179
   \                     ??v_ImageCut_178: (+1)
   \   00001996   0xF8DF 0x0A6C      LDR.W    R0,??v_ImageCut_151+0x8
   \   0000199A   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   0000199E   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_179: (+1)
   \   000019A0   0xA916             ADD      R1,SP,#+88
   \   000019A2   0x5C40             LDRB     R0,[R0, R1]
   \   000019A4   0x283C             CMP      R0,#+60
   \   000019A6   0xD04F             BEQ.N    ??v_ImageCut_173
   \   000019A8   0xF8DF 0x0A58      LDR.W    R0,??v_ImageCut_151+0x8
   \   000019AC   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   000019B0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019B2   0x1EB1             SUBS     R1,R6,#+2
   \   000019B4   0x4288             CMP      R0,R1
   \   000019B6   0xDA02             BGE.N    ??v_ImageCut_180
   \   000019B8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019BA   0x1EB0             SUBS     R0,R6,#+2
   \   000019BC   0xE004             B.N      ??v_ImageCut_181
   \                     ??v_ImageCut_180: (+1)
   \   000019BE   0xF8DF 0x0A44      LDR.W    R0,??v_ImageCut_151+0x8
   \   000019C2   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   000019C6   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_181: (+1)
   \   000019C8   0xA916             ADD      R1,SP,#+88
   \   000019CA   0x5C40             LDRB     R0,[R0, R1]
   \   000019CC   0x2846             CMP      R0,#+70
   \   000019CE   0xD03B             BEQ.N    ??v_ImageCut_173
   \   000019D0   0xF8DF 0x0A30      LDR.W    R0,??v_ImageCut_151+0x8
   \   000019D4   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   000019D8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019DA   0x1EB1             SUBS     R1,R6,#+2
   \   000019DC   0x4288             CMP      R0,R1
   \   000019DE   0xDA02             BGE.N    ??v_ImageCut_182
   \   000019E0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019E2   0x1EB0             SUBS     R0,R6,#+2
   \   000019E4   0xE004             B.N      ??v_ImageCut_183
   \                     ??v_ImageCut_182: (+1)
   \   000019E6   0xF8DF 0x0A1C      LDR.W    R0,??v_ImageCut_151+0x8
   \   000019EA   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   000019EE   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_183: (+1)
   \   000019F0   0xA916             ADD      R1,SP,#+88
   \   000019F2   0x5C40             LDRB     R0,[R0, R1]
   \   000019F4   0x283C             CMP      R0,#+60
   \   000019F6   0xD027             BEQ.N    ??v_ImageCut_173
   \   000019F8   0xF8DF 0x0A08      LDR.W    R0,??v_ImageCut_151+0x8
   \   000019FC   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001A00   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001A02   0x1E71             SUBS     R1,R6,#+1
   \   00001A04   0x4288             CMP      R0,R1
   \   00001A06   0xDA02             BGE.N    ??v_ImageCut_184
   \   00001A08   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001A0A   0x1E70             SUBS     R0,R6,#+1
   \   00001A0C   0xE004             B.N      ??v_ImageCut_185
   \                     ??v_ImageCut_184: (+1)
   \   00001A0E   0xF8DF 0x09F4      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001A12   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001A16   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_185: (+1)
   \   00001A18   0xA916             ADD      R1,SP,#+88
   \   00001A1A   0x5C40             LDRB     R0,[R0, R1]
   \   00001A1C   0x2846             CMP      R0,#+70
   \   00001A1E   0xD013             BEQ.N    ??v_ImageCut_173
   \   00001A20   0xF8DF 0x09E0      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001A24   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001A28   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001A2A   0x1E71             SUBS     R1,R6,#+1
   \   00001A2C   0x4288             CMP      R0,R1
   \   00001A2E   0xDA02             BGE.N    ??v_ImageCut_186
   \   00001A30   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001A32   0x1E70             SUBS     R0,R6,#+1
   \   00001A34   0xE004             B.N      ??v_ImageCut_187
   \                     ??v_ImageCut_186: (+1)
   \   00001A36   0xF8DF 0x09CC      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001A3A   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001A3E   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_187: (+1)
   \   00001A40   0xA916             ADD      R1,SP,#+88
   \   00001A42   0x5C40             LDRB     R0,[R0, R1]
   \   00001A44   0x283C             CMP      R0,#+60
   \   00001A46   0xD14F             BNE.N    ??v_ImageCut_188
   \                     ??v_ImageCut_173: (+1)
   \   00001A48   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001A4A   0xF8DF 0x09B4      LDR.W    R0,??v_ImageCut_151+0x4
   \   00001A4E   0x1830             ADDS     R0,R6,R0
   \   00001A50   0x7A40             LDRB     R0,[R0, #+9]
   \   00001A52   0x3064             ADDS     R0,R0,#+100
   \   00001A54   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001A56   0xF8DF 0x19A8      LDR.W    R1,??v_ImageCut_151+0x4
   \   00001A5A   0x1871             ADDS     R1,R6,R1
   \   00001A5C   0x7248             STRB     R0,[R1, #+9]
   \   00001A5E   0xF8DF 0x09A0      LDR.W    R0,??v_ImageCut_151+0x4
   \   00001A62   0x2101             MOVS     R1,#+1
   \   00001A64   0x7001             STRB     R1,[R0, #+0]
   \   00001A66   0x46B3             MOV      R11,R6
   \   00001A68   0x2101             MOVS     R1,#+1
   1930                      //================================================================//            
   1931                  }//循环结束
   1932                  
   1933                  m_ImageAbstract.LonlyLine_firstLineXpos = m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position];
   \                     ??v_ImageCut_149: (+1)
   \   00001A6A   0xF8DF 0x0998      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001A6E   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001A72   0xF8DF 0x1990      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001A76   0x1840             ADDS     R0,R0,R1
   \   00001A78   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   00001A7C   0xF8DF 0x1984      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001A80   0x7148             STRB     R0,[R1, #+5]
   1934                  m_ImageAbstract.LonlyLine_secondLineXpos = m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position+1];
   \   00001A82   0xF8DF 0x0980      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001A86   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001A8A   0xF8DF 0x1978      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001A8E   0x1840             ADDS     R0,R0,R1
   \   00001A90   0xF890 0x00A5      LDRB     R0,[R0, #+165]
   \   00001A94   0xF8DF 0x196C      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001A98   0x7188             STRB     R0,[R1, #+6]
   1935                  if(((255!=m_ImageAbstract.Left_UpBlack2White[m_ImageAbstract.Start_Y_Position])
   1936                   ||(255!=m_ImageAbstract.Right_UpBlack2White[m_ImageAbstract.Start_Y_Position])
   1937                   ||(1 == firstAndSecond_isBeenDrawing))
   1938                   &&(end_y_ctr > 10))//(end_y_ctr > 10)消除出弯影响
   \   00001A9A   0xF8DF 0x0968      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001A9E   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001AA2   0xF8DF 0x1960      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001AA6   0x1840             ADDS     R0,R0,R1
   \   00001AA8   0xF890 0x00E0      LDRB     R0,[R0, #+224]
   \   00001AAC   0x28FF             CMP      R0,#+255
   \   00001AAE   0xD110             BNE.N    ??v_ImageCut_189
   \   00001AB0   0xF8DF 0x0950      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001AB4   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001AB8   0xF8DF 0x1948      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001ABC   0x1840             ADDS     R0,R0,R1
   \   00001ABE   0xF890 0x011C      LDRB     R0,[R0, #+284]
   \   00001AC2   0x28FF             CMP      R0,#+255
   \   00001AC4   0xD105             BNE.N    ??v_ImageCut_189
   \   00001AC6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00001ACA   0xF1BA 0x0F01      CMP      R10,#+1
   \   00001ACE   0xF040 0x82FF      BNE.W    ??v_ImageCut_190
   \                     ??v_ImageCut_189: (+1)
   \   00001AD2   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00001AD6   0xF1BB 0x0F0B      CMP      R11,#+11
   \   00001ADA   0xF2C0 0x82F9      BLT.W    ??v_ImageCut_190
   1939                  {m_ImageAbstract.LonlyLine_isXposLonlyLineFirstLine = 1;}
   \   00001ADE   0xF8DF 0x0924      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001AE2   0x2101             MOVS     R1,#+1
   \   00001AE4   0x71C1             STRB     R1,[R0, #+7]
   \   00001AE6   0xE2F6             B.N      ??v_ImageCut_191
   \                     ??v_ImageCut_188: (+1)
   \   00001AE8   0x2001             MOVS     R0,#+1
   \   00001AEA   0xF88D 0x0023      STRB     R0,[SP, #+35]
   \   00001AEE   0xE18E             B.N      ??v_ImageCut_169
   \                     ??v_ImageCut_162: (+1)
   \   00001AF0   0xFA4F 0xF888      SXTB     R8,R8            ;; SignExt  R8,R8,#+24,#+24
   \   00001AF4   0xF1B8 0x0F00      CMP      R8,#+0
   \   00001AF8   0xF040 0x80BB      BNE.W    ??v_ImageCut_192
   \   00001AFC   0xF8DF 0x0904      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001B00   0x79C0             LDRB     R0,[R0, #+7]
   \   00001B02   0x2801             CMP      R0,#+1
   \   00001B04   0xF040 0x80B5      BNE.W    ??v_ImageCut_192
   \   00001B08   0xF8DF 0x08F8      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001B0C   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001B10   0xF8DF 0x18F0      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001B14   0x1840             ADDS     R0,R0,R1
   \   00001B16   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   00001B1A   0xF8DF 0x18E8      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001B1E   0x7949             LDRB     R1,[R1, #+5]
   \   00001B20   0x1A40             SUBS     R0,R0,R1
   \   00001B22   0x2800             CMP      R0,#+0
   \   00001B24   0xD50D             BPL.N    ??v_ImageCut_193
   \   00001B26   0xF8DF 0x08DC      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001B2A   0x7940             LDRB     R0,[R0, #+5]
   \   00001B2C   0xF8DF 0x18D4      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001B30   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00001B34   0xF8DF 0x28CC      LDR.W    R2,??v_ImageCut_151+0x8
   \   00001B38   0x1889             ADDS     R1,R1,R2
   \   00001B3A   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   00001B3E   0x1A40             SUBS     R0,R0,R1
   \   00001B40   0xE00C             B.N      ??v_ImageCut_194
   \                     ??v_ImageCut_193: (+1)
   \   00001B42   0xF8DF 0x08C0      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001B46   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001B4A   0xF8DF 0x18B8      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001B4E   0x1840             ADDS     R0,R0,R1
   \   00001B50   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   00001B54   0xF8DF 0x18AC      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001B58   0x7949             LDRB     R1,[R1, #+5]
   \   00001B5A   0x1A40             SUBS     R0,R0,R1
   \                     ??v_ImageCut_194: (+1)
   \   00001B5C   0xF8DF 0x18A4      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001B60   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00001B64   0xF8DF 0x289C      LDR.W    R2,??v_ImageCut_151+0x8
   \   00001B68   0xEB12 0x0141      ADDS     R1,R2,R1, LSL #+1
   \   00001B6C   0xF9B1 0x1158      LDRSH    R1,[R1, #+344]
   \   00001B70   0x2203             MOVS     R2,#+3
   \   00001B72   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00001B76   0x4281             CMP      R1,R0
   \   00001B78   0xDA7B             BGE.N    ??v_ImageCut_192
   \   00001B7A   0xF8DF 0x0888      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001B7E   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001B82   0xF8DF 0x1880      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001B86   0x1840             ADDS     R0,R0,R1
   \   00001B88   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00001B8C   0x28FF             CMP      R0,#+255
   \   00001B8E   0xD025             BEQ.N    ??v_ImageCut_195
   \   00001B90   0xF8DF 0x0870      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001B94   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001B98   0xF8DF 0x1868      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001B9C   0x1840             ADDS     R0,R0,R1
   \   00001B9E   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   00001BA2   0x28FF             CMP      R0,#+255
   \   00001BA4   0xD165             BNE.N    ??v_ImageCut_192
   \   00001BA6   0xF8DF 0x085C      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001BAA   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001BAE   0xF8DF 0x1854      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001BB2   0x1840             ADDS     R0,R0,R1
   \   00001BB4   0xF8DF 0x184C      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001BB8   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00001BBC   0xF8DF 0x2844      LDR.W    R2,??v_ImageCut_151+0x8
   \   00001BC0   0x1889             ADDS     R1,R1,R2
   \   00001BC2   0xF891 0x102C      LDRB     R1,[R1, #+44]
   \   00001BC6   0xF880 0x10A4      STRB     R1,[R0, #+164]
   \   00001BCA   0x2401             MOVS     R4,#+1
   \   00001BCC   0x2301             MOVS     R3,#+1
   \   00001BCE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001BD0   0xA816             ADD      R0,SP,#+88
   \   00001BD2   0x2146             MOVS     R1,#+70
   \   00001BD4   0x5431             STRB     R1,[R6, R0]
   \   00001BD6   0xF05F 0x0A01      MOVS     R10,#+1
   \   00001BDA   0xE04A             B.N      ??v_ImageCut_192
   \                     ??v_ImageCut_195: (+1)
   \   00001BDC   0xF8DF 0x0824      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001BE0   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001BE4   0xF8DF 0x181C      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001BE8   0x1840             ADDS     R0,R0,R1
   \   00001BEA   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   00001BEE   0x28FF             CMP      R0,#+255
   \   00001BF0   0xD01A             BEQ.N    ??v_ImageCut_196
   \   00001BF2   0xF8DF 0x0810      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001BF6   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001BFA   0xF8DF 0x1808      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001BFE   0x1840             ADDS     R0,R0,R1
   \   00001C00   0xF8DF 0x1800      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001C04   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00001C08   0xF8DF 0x27F8      LDR.W    R2,??v_ImageCut_151+0x8
   \   00001C0C   0x1889             ADDS     R1,R1,R2
   \   00001C0E   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   00001C12   0xF880 0x10A4      STRB     R1,[R0, #+164]
   \   00001C16   0x2401             MOVS     R4,#+1
   \   00001C18   0x2301             MOVS     R3,#+1
   \   00001C1A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001C1C   0xA816             ADD      R0,SP,#+88
   \   00001C1E   0x2146             MOVS     R1,#+70
   \   00001C20   0x5431             STRB     R1,[R6, R0]
   \   00001C22   0xF05F 0x0A01      MOVS     R10,#+1
   \   00001C26   0xE024             B.N      ??v_ImageCut_192
   \                     ??v_ImageCut_196: (+1)
   \   00001C28   0xF8DF 0x07D8      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001C2C   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001C30   0xF8DF 0x17D0      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001C34   0x1840             ADDS     R0,R0,R1
   \   00001C36   0xF890 0x00E0      LDRB     R0,[R0, #+224]
   \   00001C3A   0x28FF             CMP      R0,#+255
   \   00001C3C   0xD119             BNE.N    ??v_ImageCut_192
   \   00001C3E   0xF8DF 0x07C4      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001C42   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001C46   0xF8DF 0x17BC      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001C4A   0x1840             ADDS     R0,R0,R1
   \   00001C4C   0xF890 0x011C      LDRB     R0,[R0, #+284]
   \   00001C50   0x28FF             CMP      R0,#+255
   \   00001C52   0xD10E             BNE.N    ??v_ImageCut_192
   \   00001C54   0xF8DF 0x07AC      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001C58   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001C5C   0xF8DF 0x17A4      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001C60   0x1840             ADDS     R0,R0,R1
   \   00001C62   0xF8DF 0x17A0      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001C66   0xF891 0x11D4      LDRB     R1,[R1, #+468]
   \   00001C6A   0xF880 0x10A4      STRB     R1,[R0, #+164]
   \   00001C6E   0xF05F 0x0A01      MOVS     R10,#+1
   \                     ??v_ImageCut_192: (+1)
   \   00001C72   0xFA4F 0xF888      SXTB     R8,R8            ;; SignExt  R8,R8,#+24,#+24
   \   00001C76   0xF1B8 0x0F01      CMP      R8,#+1
   \   00001C7A   0xF040 0x80C8      BNE.W    ??v_ImageCut_169
   \   00001C7E   0xF8DF 0x0784      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001C82   0x7A00             LDRB     R0,[R0, #+8]
   \   00001C84   0x2801             CMP      R0,#+1
   \   00001C86   0xF040 0x80C2      BNE.W    ??v_ImageCut_169
   \   00001C8A   0xF8DF 0x0778      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001C8E   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001C92   0xF8DF 0x1770      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001C96   0x1840             ADDS     R0,R0,R1
   \   00001C98   0xF890 0x00A5      LDRB     R0,[R0, #+165]
   \   00001C9C   0xF8DF 0x1764      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001CA0   0x7989             LDRB     R1,[R1, #+6]
   \   00001CA2   0x1A40             SUBS     R0,R0,R1
   \   00001CA4   0x2800             CMP      R0,#+0
   \   00001CA6   0xD50D             BPL.N    ??v_ImageCut_197
   \   00001CA8   0xF8DF 0x0758      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001CAC   0x7980             LDRB     R0,[R0, #+6]
   \   00001CAE   0xF8DF 0x1754      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001CB2   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00001CB6   0xF8DF 0x274C      LDR.W    R2,??v_ImageCut_151+0x8
   \   00001CBA   0x1889             ADDS     R1,R1,R2
   \   00001CBC   0xF891 0x10A5      LDRB     R1,[R1, #+165]
   \   00001CC0   0x1A40             SUBS     R0,R0,R1
   \   00001CC2   0xE00C             B.N      ??v_ImageCut_198
   \                     ??v_ImageCut_197: (+1)
   \   00001CC4   0xF8DF 0x073C      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001CC8   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001CCC   0xF8DF 0x1734      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001CD0   0x1840             ADDS     R0,R0,R1
   \   00001CD2   0xF890 0x00A5      LDRB     R0,[R0, #+165]
   \   00001CD6   0xF8DF 0x172C      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001CDA   0x7989             LDRB     R1,[R1, #+6]
   \   00001CDC   0x1A40             SUBS     R0,R0,R1
   \                     ??v_ImageCut_198: (+1)
   \   00001CDE   0xF8DF 0x1724      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001CE2   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00001CE6   0xF8DF 0x271C      LDR.W    R2,??v_ImageCut_151+0x8
   \   00001CEA   0xEB12 0x0141      ADDS     R1,R2,R1, LSL #+1
   \   00001CEE   0xF9B1 0x115A      LDRSH    R1,[R1, #+346]
   \   00001CF2   0x2203             MOVS     R2,#+3
   \   00001CF4   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00001CF8   0x4281             CMP      R1,R0
   \   00001CFA   0xF280 0x8088      BGE.W    ??v_ImageCut_169
   \   00001CFE   0xF8DF 0x0704      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001D02   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001D06   0xF8DF 0x16FC      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001D0A   0x1840             ADDS     R0,R0,R1
   \   00001D0C   0xF890 0x002D      LDRB     R0,[R0, #+45]
   \   00001D10   0x28FF             CMP      R0,#+255
   \   00001D12   0xD029             BEQ.N    ??v_ImageCut_199
   \   00001D14   0xF8DF 0x06EC      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001D18   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001D1C   0xF8DF 0x16E4      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001D20   0x1840             ADDS     R0,R0,R1
   \   00001D22   0xF890 0x0069      LDRB     R0,[R0, #+105]
   \   00001D26   0x28FF             CMP      R0,#+255
   \   00001D28   0xD171             BNE.N    ??v_ImageCut_169
   \   00001D2A   0xF8DF 0x06D8      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001D2E   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001D32   0xF8DF 0x16D0      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001D36   0x1840             ADDS     R0,R0,R1
   \   00001D38   0xF8DF 0x16C8      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001D3C   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00001D40   0xF8DF 0x26C0      LDR.W    R2,??v_ImageCut_151+0x8
   \   00001D44   0x1889             ADDS     R1,R1,R2
   \   00001D46   0xF891 0x102D      LDRB     R1,[R1, #+45]
   \   00001D4A   0xF880 0x10A5      STRB     R1,[R0, #+165]
   \   00001D4E   0x2401             MOVS     R4,#+1
   \   00001D50   0x2301             MOVS     R3,#+1
   \   00001D52   0xF8DF 0x06B0      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001D56   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001D5A   0xA916             ADD      R1,SP,#+88
   \   00001D5C   0x1840             ADDS     R0,R0,R1
   \   00001D5E   0x2146             MOVS     R1,#+70
   \   00001D60   0x7041             STRB     R1,[R0, #+1]
   \   00001D62   0xF05F 0x0A01      MOVS     R10,#+1
   \   00001D66   0xE052             B.N      ??v_ImageCut_169
   \                     ??v_ImageCut_199: (+1)
   \   00001D68   0xF8DF 0x0698      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001D6C   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001D70   0xF8DF 0x1690      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001D74   0x1840             ADDS     R0,R0,R1
   \   00001D76   0xF890 0x0069      LDRB     R0,[R0, #+105]
   \   00001D7A   0x28FF             CMP      R0,#+255
   \   00001D7C   0xD01D             BEQ.N    ??v_ImageCut_200
   \   00001D7E   0xF8DF 0x0684      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001D82   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001D86   0xF8DF 0x167C      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001D8A   0x1840             ADDS     R0,R0,R1
   \   00001D8C   0xF8DF 0x1674      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001D90   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00001D94   0xF8DF 0x266C      LDR.W    R2,??v_ImageCut_151+0x8
   \   00001D98   0x1889             ADDS     R1,R1,R2
   \   00001D9A   0xF891 0x1069      LDRB     R1,[R1, #+105]
   \   00001D9E   0xF880 0x10A5      STRB     R1,[R0, #+165]
   \   00001DA2   0x2401             MOVS     R4,#+1
   \   00001DA4   0x2301             MOVS     R3,#+1
   \   00001DA6   0xF8DF 0x065C      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001DAA   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001DAE   0xA916             ADD      R1,SP,#+88
   \   00001DB0   0x2246             MOVS     R2,#+70
   \   00001DB2   0x5442             STRB     R2,[R0, R1]
   \   00001DB4   0xF05F 0x0A01      MOVS     R10,#+1
   \   00001DB8   0xE029             B.N      ??v_ImageCut_169
   \                     ??v_ImageCut_200: (+1)
   \   00001DBA   0xF8DF 0x0648      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001DBE   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001DC2   0xF8DF 0x1640      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001DC6   0x1840             ADDS     R0,R0,R1
   \   00001DC8   0xF890 0x00E1      LDRB     R0,[R0, #+225]
   \   00001DCC   0x28FF             CMP      R0,#+255
   \   00001DCE   0xD11E             BNE.N    ??v_ImageCut_169
   \   00001DD0   0xF8DF 0x0630      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001DD4   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001DD8   0xF8DF 0x1628      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001DDC   0x1840             ADDS     R0,R0,R1
   \   00001DDE   0xF890 0x011D      LDRB     R0,[R0, #+285]
   \   00001DE2   0x28FF             CMP      R0,#+255
   \   00001DE4   0xD113             BNE.N    ??v_ImageCut_169
   \   00001DE6   0xF8DF 0x061C      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001DEA   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00001DEE   0xF8DF 0x1614      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001DF2   0x1840             ADDS     R0,R0,R1
   \   00001DF4   0xF8DF 0x160C      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001DF8   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00001DFC   0xF8DF 0x2604      LDR.W    R2,??v_ImageCut_151+0x8
   \   00001E00   0x1889             ADDS     R1,R1,R2
   \   00001E02   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   00001E06   0xF880 0x10A5      STRB     R1,[R0, #+165]
   \   00001E0A   0xF05F 0x0A01      MOVS     R10,#+1
   \                     ??v_ImageCut_169: (+1)
   \   00001E0E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E10   0xF8DF 0x05F0      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001E14   0x1830             ADDS     R0,R6,R0
   \   00001E16   0xF890 0x50A4      LDRB     R5,[R0, #+164]
   \   00001E1A   0xE42F             B.N      ??v_ImageCut_148
   \                     ??v_ImageCut_161: (+1)
   \   00001E1C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00001E20   0xF1B9 0x0FFF      CMP      R9,#+255
   \   00001E24   0xD100             BNE.N    ??v_ImageCut_201
   \   00001E26   0x46B1             MOV      R9,R6
   \                     ??v_ImageCut_201: (+1)
   \   00001E28   0x2100             MOVS     R1,#+0
   \   00001E2A   0x2200             MOVS     R2,#+0
   \   00001E2C   0x2300             MOVS     R3,#+0
   \   00001E2E   0x0019             MOVS     R1,R3
   \   00001E30   0x2300             MOVS     R3,#+0
   \   00001E32   0x001A             MOVS     R2,R3
   \   00001E34   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E36   0xF8DF 0x35CC      LDR.W    R3,??v_ImageCut_151+0x8
   \   00001E3A   0x18F3             ADDS     R3,R6,R3
   \   00001E3C   0xF893 0x30E0      LDRB     R3,[R3, #+224]
   \   00001E40   0x2BFF             CMP      R3,#+255
   \   00001E42   0xD025             BEQ.N    ??v_ImageCut_202
   \   00001E44   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E46   0xF8DF 0x35BC      LDR.W    R3,??v_ImageCut_151+0x8
   \   00001E4A   0x18F3             ADDS     R3,R6,R3
   \   00001E4C   0xF893 0x30E0      LDRB     R3,[R3, #+224]
   \   00001E50   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00001E52   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00001E54   0x42BB             CMP      R3,R7
   \   00001E56   0xDB1B             BLT.N    ??v_ImageCut_202
   \   00001E58   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E5A   0xF8DF 0x35A8      LDR.W    R3,??v_ImageCut_151+0x8
   \   00001E5E   0x18F3             ADDS     R3,R6,R3
   \   00001E60   0xF893 0x30E0      LDRB     R3,[R3, #+224]
   \   00001E64   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00001E66   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00001E68   0x4298             CMP      R0,R3
   \   00001E6A   0xDB11             BLT.N    ??v_ImageCut_202
   \   00001E6C   0x2101             MOVS     R1,#+1
   \   00001E6E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E70   0xF8DF 0x3590      LDR.W    R3,??v_ImageCut_151+0x8
   \   00001E74   0x18F3             ADDS     R3,R6,R3
   \   00001E76   0xF893 0x302C      LDRB     R3,[R3, #+44]
   \   00001E7A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E7C   0xF8DF 0x5584      LDR.W    R5,??v_ImageCut_151+0x8
   \   00001E80   0x1975             ADDS     R5,R6,R5
   \   00001E82   0xF895 0x50E0      LDRB     R5,[R5, #+224]
   \   00001E86   0xFA55 0xF383      UXTAB    R3,R5,R3
   \   00001E8A   0x2502             MOVS     R5,#+2
   \   00001E8C   0xFB93 0xF5F5      SDIV     R5,R3,R5
   \                     ??v_ImageCut_202: (+1)
   \   00001E90   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E92   0xF8DF 0x3570      LDR.W    R3,??v_ImageCut_151+0x8
   \   00001E96   0x18F3             ADDS     R3,R6,R3
   \   00001E98   0xF893 0x311C      LDRB     R3,[R3, #+284]
   \   00001E9C   0x2BFF             CMP      R3,#+255
   \   00001E9E   0xD025             BEQ.N    ??v_ImageCut_203
   \   00001EA0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EA2   0xF8DF 0x3560      LDR.W    R3,??v_ImageCut_151+0x8
   \   00001EA6   0x18F3             ADDS     R3,R6,R3
   \   00001EA8   0xF893 0x311C      LDRB     R3,[R3, #+284]
   \   00001EAC   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00001EAE   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00001EB0   0x42BB             CMP      R3,R7
   \   00001EB2   0xDB1B             BLT.N    ??v_ImageCut_203
   \   00001EB4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EB6   0xF8DF 0x354C      LDR.W    R3,??v_ImageCut_151+0x8
   \   00001EBA   0x18F3             ADDS     R3,R6,R3
   \   00001EBC   0xF893 0x311C      LDRB     R3,[R3, #+284]
   \   00001EC0   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00001EC2   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   00001EC4   0x4298             CMP      R0,R3
   \   00001EC6   0xDB11             BLT.N    ??v_ImageCut_203
   \   00001EC8   0x2201             MOVS     R2,#+1
   \   00001ECA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001ECC   0xF8DF 0x0534      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001ED0   0x1830             ADDS     R0,R6,R0
   \   00001ED2   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   00001ED6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001ED8   0xF8DF 0x3528      LDR.W    R3,??v_ImageCut_151+0x8
   \   00001EDC   0x18F3             ADDS     R3,R6,R3
   \   00001EDE   0xF893 0x311C      LDRB     R3,[R3, #+284]
   \   00001EE2   0xFA53 0xF080      UXTAB    R0,R3,R0
   \   00001EE6   0x2302             MOVS     R3,#+2
   \   00001EE8   0xFB90 0xF5F3      SDIV     R5,R0,R3
   \                     ??v_ImageCut_203: (+1)
   \   00001EEC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00001EEE   0xFA52 0xF081      UXTAB    R0,R2,R1
   \   00001EF2   0x2801             CMP      R0,#+1
   \   00001EF4   0xD10A             BNE.N    ??v_ImageCut_204
   \   00001EF6   0x2044             MOVS     R0,#+68
   \   00001EF8   0xF88D 0x0021      STRB     R0,[SP, #+33]
   \   00001EFC   0x2401             MOVS     R4,#+1
   \   00001EFE   0x2301             MOVS     R3,#+1
   \   00001F00   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F02   0xA816             ADD      R0,SP,#+88
   \   00001F04   0x2146             MOVS     R1,#+70
   \   00001F06   0x5431             STRB     R1,[R6, R0]
   \   00001F08   0xF7FF 0xBBB3      B.W      ??v_ImageCut_147
   \                     ??v_ImageCut_204: (+1)
   \   00001F0C   0x204E             MOVS     R0,#+78
   \   00001F0E   0xF88D 0x0021      STRB     R0,[SP, #+33]
   \   00001F12   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F14   0xF8DF 0x04EC      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001F18   0x1830             ADDS     R0,R6,R0
   \   00001F1A   0xF890 0x00E0      LDRB     R0,[R0, #+224]
   \   00001F1E   0x28FF             CMP      R0,#+255
   \   00001F20   0xF43F 0xABA2      BEQ.W    ??v_ImageCut_146
   \   00001F24   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F26   0xF8DF 0x04DC      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001F2A   0x1830             ADDS     R0,R6,R0
   \   00001F2C   0xF890 0x011C      LDRB     R0,[R0, #+284]
   \   00001F30   0x28FF             CMP      R0,#+255
   \   00001F32   0xF43F 0xAB99      BEQ.W    ??v_ImageCut_146
   \   00001F36   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F38   0xF8DF 0x04C8      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001F3C   0x1830             ADDS     R0,R6,R0
   \   00001F3E   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00001F42   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F44   0xF8DF 0x14BC      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001F48   0x1871             ADDS     R1,R6,R1
   \   00001F4A   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   00001F4E   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00001F52   0x2102             MOVS     R1,#+2
   \   00001F54   0xFB90 0xF5F1      SDIV     R5,R0,R1
   \   00001F58   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F5A   0xF8DF 0x04A8      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001F5E   0x1830             ADDS     R0,R6,R0
   \   00001F60   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   00001F64   0xF8DF 0x149C      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001F68   0xF891 0x11D4      LDRB     R1,[R1, #+468]
   \   00001F6C   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00001F70   0x2102             MOVS     R1,#+2
   \   00001F72   0xFB90 0xF7F1      SDIV     R7,R0,R1
   \   00001F76   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F78   0xF8DF 0x0488      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001F7C   0x1830             ADDS     R0,R6,R0
   \   00001F7E   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   00001F82   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F84   0xF8DF 0x147C      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001F88   0x1871             ADDS     R1,R6,R1
   \   00001F8A   0xF891 0x102C      LDRB     R1,[R1, #+44]
   \   00001F8E   0x1A40             SUBS     R0,R0,R1
   \   00001F90   0x.... 0x....      BL       __aeabi_i2d
   \   00001F94   0x0002             MOVS     R2,R0
   \   00001F96   0x000B             MOVS     R3,R1
   \   00001F98   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   00001F9C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F9E   0xF8DF 0x0464      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001FA2   0xEB10 0x0046      ADDS     R0,R0,R6, LSL #+1
   \   00001FA6   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   00001FAA   0x.... 0x....      BL       __aeabi_i2d
   \   00001FAE   0xF8DF 0x2700      LDR.W    R2,??v_ImageCut_205  ;; 0xa1cac083
   \   00001FB2   0xF8DF 0x3700      LDR.W    R3,??v_ImageCut_205+0x4  ;; 0x3febb645
   \   00001FB6   0x.... 0x....      BL       __aeabi_dmul
   \   00001FBA   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00001FBE   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00001FC2   0xD843             BHI.N    ??v_ImageCut_206
   \   00001FC4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001FC6   0xF8DF 0x043C      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001FCA   0x1830             ADDS     R0,R6,R0
   \   00001FCC   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   00001FD0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001FD2   0x1BC0             SUBS     R0,R0,R7
   \   00001FD4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001FD6   0xF8DF 0x142C      LDR.W    R1,??v_ImageCut_151+0x8
   \   00001FDA   0x1871             ADDS     R1,R6,R1
   \   00001FDC   0xF891 0x102C      LDRB     R1,[R1, #+44]
   \   00001FE0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001FE2   0x1BC9             SUBS     R1,R1,R7
   \   00001FE4   0x4288             CMP      R0,R1
   \   00001FE6   0xDA18             BGE.N    ??v_ImageCut_207
   \   00001FE8   0x2401             MOVS     R4,#+1
   \   00001FEA   0x2301             MOVS     R3,#+1
   \   00001FEC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001FEE   0xA816             ADD      R0,SP,#+88
   \   00001FF0   0x2146             MOVS     R1,#+70
   \   00001FF2   0x5431             STRB     R1,[R6, R0]
   \   00001FF4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001FF6   0xF8DF 0x040C      LDR.W    R0,??v_ImageCut_151+0x8
   \   00001FFA   0x1830             ADDS     R0,R6,R0
   \   00001FFC   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   00002000   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002002   0xF8DF 0x1400      LDR.W    R1,??v_ImageCut_151+0x8
   \   00002006   0x1871             ADDS     R1,R6,R1
   \   00002008   0xF891 0x111C      LDRB     R1,[R1, #+284]
   \   0000200C   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00002010   0x2102             MOVS     R1,#+2
   \   00002012   0xFB90 0xF5F1      SDIV     R5,R0,R1
   \   00002016   0xF7FF 0xBB2C      B.W      ??v_ImageCut_147
   \                     ??v_ImageCut_207: (+1)
   \   0000201A   0x2401             MOVS     R4,#+1
   \   0000201C   0x2301             MOVS     R3,#+1
   \   0000201E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002020   0xA816             ADD      R0,SP,#+88
   \   00002022   0x2146             MOVS     R1,#+70
   \   00002024   0x5431             STRB     R1,[R6, R0]
   \   00002026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002028   0xF8DF 0x03D8      LDR.W    R0,??v_ImageCut_151+0x8
   \   0000202C   0x1830             ADDS     R0,R6,R0
   \   0000202E   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00002032   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002034   0xF8DF 0x13CC      LDR.W    R1,??v_ImageCut_151+0x8
   \   00002038   0x1871             ADDS     R1,R6,R1
   \   0000203A   0xF891 0x10E0      LDRB     R1,[R1, #+224]
   \   0000203E   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00002042   0x2102             MOVS     R1,#+2
   \   00002044   0xFB90 0xF5F1      SDIV     R5,R0,R1
   \   00002048   0xF7FF 0xBB13      B.W      ??v_ImageCut_147
   \                     ??v_ImageCut_206: (+1)
   \   0000204C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000204E   0x2E00             CMP      R6,#+0
   \   00002050   0xF43F 0xAB0F      BEQ.W    ??v_ImageCut_147
   \   00002054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002056   0xF8DF 0x03AC      LDR.W    R0,??v_ImageCut_151+0x8
   \   0000205A   0x1830             ADDS     R0,R6,R0
   \   0000205C   0xF890 0x0067      LDRB     R0,[R0, #+103]
   \   00002060   0x28FF             CMP      R0,#+255
   \   00002062   0xD116             BNE.N    ??v_ImageCut_208
   \   00002064   0x2401             MOVS     R4,#+1
   \   00002066   0x2301             MOVS     R3,#+1
   \   00002068   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000206A   0xA816             ADD      R0,SP,#+88
   \   0000206C   0x2146             MOVS     R1,#+70
   \   0000206E   0x5431             STRB     R1,[R6, R0]
   \   00002070   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002072   0xF8DF 0x0390      LDR.W    R0,??v_ImageCut_151+0x8
   \   00002076   0x1830             ADDS     R0,R6,R0
   \   00002078   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   0000207C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000207E   0xF8DF 0x1384      LDR.W    R1,??v_ImageCut_151+0x8
   \   00002082   0x1871             ADDS     R1,R6,R1
   \   00002084   0xF891 0x111C      LDRB     R1,[R1, #+284]
   \   00002088   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   0000208C   0x2102             MOVS     R1,#+2
   \   0000208E   0xFB90 0xF5F1      SDIV     R5,R0,R1
   \                     ??v_ImageCut_208: (+1)
   \   00002092   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002094   0x48DB             LDR.N    R0,??v_ImageCut_151+0x8
   \   00002096   0x1830             ADDS     R0,R6,R0
   \   00002098   0xF890 0x002B      LDRB     R0,[R0, #+43]
   \   0000209C   0x28FF             CMP      R0,#+255
   \   0000209E   0xF47F 0xAAE8      BNE.W    ??v_ImageCut_147
   \   000020A2   0x2401             MOVS     R4,#+1
   \   000020A4   0x2301             MOVS     R3,#+1
   \   000020A6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000020A8   0xA816             ADD      R0,SP,#+88
   \   000020AA   0x2146             MOVS     R1,#+70
   \   000020AC   0x5431             STRB     R1,[R6, R0]
   \   000020AE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000020B0   0x48D4             LDR.N    R0,??v_ImageCut_151+0x8
   \   000020B2   0x1830             ADDS     R0,R6,R0
   \   000020B4   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   000020B8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000020BA   0x49D2             LDR.N    R1,??v_ImageCut_151+0x8
   \   000020BC   0x1871             ADDS     R1,R6,R1
   \   000020BE   0xF891 0x10E0      LDRB     R1,[R1, #+224]
   \   000020C2   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   000020C6   0x2102             MOVS     R1,#+2
   \   000020C8   0xFB90 0xF5F1      SDIV     R5,R0,R1
   \   000020CC   0xF7FF 0xBAD1      B.W      ??v_ImageCut_147
   1940                  else{m_ImageAbstract.LonlyLine_isXposLonlyLineFirstLine = 0;}///////////////////////
   \                     ??v_ImageCut_190: (+1)
   \   000020D0   0x48CC             LDR.N    R0,??v_ImageCut_151+0x8
   \   000020D2   0x2100             MOVS     R1,#+0
   \   000020D4   0x71C1             STRB     R1,[R0, #+7]
   1941                  if(((255!=m_ImageAbstract.Left_UpBlack2White[m_ImageAbstract.Start_Y_Position+1])
   1942                   ||(255!=m_ImageAbstract.Right_UpBlack2White[m_ImageAbstract.Start_Y_Position+1])
   1943                   ||(1 == firstAndSecond_isBeenDrawing))
   1944                   &&(end_y_ctr > 10))
   \                     ??v_ImageCut_191: (+1)
   \   000020D6   0x48CB             LDR.N    R0,??v_ImageCut_151+0x8
   \   000020D8   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   000020DC   0x49C9             LDR.N    R1,??v_ImageCut_151+0x8
   \   000020DE   0x1840             ADDS     R0,R0,R1
   \   000020E0   0xF890 0x00E1      LDRB     R0,[R0, #+225]
   \   000020E4   0x28FF             CMP      R0,#+255
   \   000020E6   0xD10D             BNE.N    ??v_ImageCut_209
   \   000020E8   0x48C6             LDR.N    R0,??v_ImageCut_151+0x8
   \   000020EA   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   000020EE   0x49C5             LDR.N    R1,??v_ImageCut_151+0x8
   \   000020F0   0x1840             ADDS     R0,R0,R1
   \   000020F2   0xF890 0x011D      LDRB     R0,[R0, #+285]
   \   000020F6   0x28FF             CMP      R0,#+255
   \   000020F8   0xD104             BNE.N    ??v_ImageCut_209
   \   000020FA   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000020FE   0xF1BA 0x0F01      CMP      R10,#+1
   \   00002102   0xD108             BNE.N    ??v_ImageCut_210
   \                     ??v_ImageCut_209: (+1)
   \   00002104   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00002108   0xF1BB 0x0F0B      CMP      R11,#+11
   \   0000210C   0xDB03             BLT.N    ??v_ImageCut_210
   1945                  {m_ImageAbstract.LonlyLine_isXposLonlyLineSecondLine = 1;}
   \   0000210E   0x48BD             LDR.N    R0,??v_ImageCut_151+0x8
   \   00002110   0x2101             MOVS     R1,#+1
   \   00002112   0x7201             STRB     R1,[R0, #+8]
   \   00002114   0xE002             B.N      ??v_ImageCut_211
   1946                  else{m_ImageAbstract.LonlyLine_isXposLonlyLineSecondLine = 0;}///////////////////////
   \                     ??v_ImageCut_210: (+1)
   \   00002116   0x48BB             LDR.N    R0,??v_ImageCut_151+0x8
   \   00002118   0x2100             MOVS     R1,#+0
   \   0000211A   0x7201             STRB     R1,[R0, #+8]
   1947                  
   1948              }while(0);
   1949          
   1950              //if(1 == isHaveLonlyLine){end_y_ctr-=5;}
   1951              
   1952          
   1953              uint8 LonlyLineVaildLineCounter = 0;
   \                     ??v_ImageCut_211: (+1)
   \   0000211C   0x2000             MOVS     R0,#+0
   1954              do//这里做应对障碍的处理。//这里还需要再次优化
   1955              {//所谓障碍的标准就是在很小的宽度处没有所谓的上升沿
   1956                  //break;
   1957                  if(1 == m_ImageAbstract.RtAngle_isLasting){break;}//强制拒绝判断
   \   0000211E   0x49B9             LDR.N    R1,??v_ImageCut_151+0x8
   \   00002120   0xF891 0x11E0      LDRB     R1,[R1, #+480]
   \   00002124   0x2901             CMP      R1,#+1
   \   00002126   0xF000 0x8227      BEQ.W    ??v_ImageCut_212
   1958                  
   1959                  if((1 == isHaveLonlyLine)||(1 == isHaveLonlyLineStartCorner))
   \                     ??v_ImageCut_213: (+1)
   \   0000212A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000212C   0x2C01             CMP      R4,#+1
   \   0000212E   0xD003             BEQ.N    ??v_ImageCut_214
   \   00002130   0xF89D 0x100F      LDRB     R1,[SP, #+15]
   \   00002134   0x2901             CMP      R1,#+1
   \   00002136   0xD115             BNE.N    ??v_ImageCut_215
   1960                  {//单线存在的时候
   1961                      LonlyLineVaildLineCounter = 0;
   \                     ??v_ImageCut_214: (+1)
   \   00002138   0x2000             MOVS     R0,#+0
   1962                      for(uint8 LineReader = m_ImageAbstract.Start_Y_Position;LineReader < end_y_ctr;LineReader++)
   \   0000213A   0x49B2             LDR.N    R1,??v_ImageCut_151+0x8
   \   0000213C   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002140   0xE00B             B.N      ??v_ImageCut_216
   1963                      {
   1964                          if((Sid_DoubleBlack == TrkSide[LineReader])||(Sid_LonlyLine == TrkSide[LineReader]))
   \                     ??v_ImageCut_217: (+1)
   \   00002142   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002144   0xAA16             ADD      R2,SP,#+88
   \   00002146   0x5C8A             LDRB     R2,[R1, R2]
   \   00002148   0x2A3C             CMP      R2,#+60
   \   0000214A   0xD004             BEQ.N    ??v_ImageCut_218
   \   0000214C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000214E   0xAA16             ADD      R2,SP,#+88
   \   00002150   0x5C8A             LDRB     R2,[R1, R2]
   \   00002152   0x2A46             CMP      R2,#+70
   \   00002154   0xD100             BNE.N    ??v_ImageCut_219
   1965                          {LonlyLineVaildLineCounter++;}
   \                     ??v_ImageCut_218: (+1)
   \   00002156   0x1C40             ADDS     R0,R0,#+1
   1966                          //m_ImageTesting.hazardvaildLine[LineReader] = 0;
   1967                      }
   \                     ??v_ImageCut_219: (+1)
   \   00002158   0x1C49             ADDS     R1,R1,#+1
   \                     ??v_ImageCut_216: (+1)
   \   0000215A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000215C   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00002160   0x4559             CMP      R1,R11
   \   00002162   0xD3EE             BCC.N    ??v_ImageCut_217
   1968                  }
   1969                  if(LonlyLineVaildLineCounter > 5){break;}//有问题直接用绝对坐标系
   \                     ??v_ImageCut_215: (+1)
   \   00002164   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002166   0x2806             CMP      R0,#+6
   \   00002168   0xF280 0x8206      BGE.W    ??v_ImageCut_212
   1970                  
   1971                  uint8 hazardStartLine = 0;
   \                     ??v_ImageCut_220: (+1)
   \   0000216C   0x2400             MOVS     R4,#+0
   1972                  for(uint8 loop = m_ImageAbstract.Start_Y_Position+1;loop < end_y_ctr;loop++)
   \   0000216E   0x48A5             LDR.N    R0,??v_ImageCut_151+0x8
   \   00002170   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00002174   0x1C40             ADDS     R0,R0,#+1
   \   00002176   0xE000             B.N      ??v_ImageCut_221
   \                     ??v_ImageCut_222: (+1)
   \   00002178   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_221: (+1)
   \   0000217A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000217C   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00002180   0x4558             CMP      R0,R11
   \   00002182   0xD22F             BCS.N    ??v_ImageCut_223
   1973                  {
   1974                      if(__ABS(m_ImageAbstract.Central[loop] - m_ImageAbstract.Central[loop-1])>(m_ImageAbstract.width[loop]/6))
   \   00002184   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002186   0x499F             LDR.N    R1,??v_ImageCut_151+0x8
   \   00002188   0x1841             ADDS     R1,R0,R1
   \   0000218A   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   0000218E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002190   0x4A9C             LDR.N    R2,??v_ImageCut_151+0x8
   \   00002192   0x1882             ADDS     R2,R0,R2
   \   00002194   0xF892 0x20A3      LDRB     R2,[R2, #+163]
   \   00002198   0x1A89             SUBS     R1,R1,R2
   \   0000219A   0x2900             CMP      R1,#+0
   \   0000219C   0xD50B             BPL.N    ??v_ImageCut_224
   \   0000219E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000021A0   0x4998             LDR.N    R1,??v_ImageCut_151+0x8
   \   000021A2   0x1841             ADDS     R1,R0,R1
   \   000021A4   0xF891 0x10A3      LDRB     R1,[R1, #+163]
   \   000021A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000021AA   0x4A96             LDR.N    R2,??v_ImageCut_151+0x8
   \   000021AC   0x1882             ADDS     R2,R0,R2
   \   000021AE   0xF892 0x20A4      LDRB     R2,[R2, #+164]
   \   000021B2   0x1A89             SUBS     R1,R1,R2
   \   000021B4   0xE00A             B.N      ??v_ImageCut_225
   \                     ??v_ImageCut_224: (+1)
   \   000021B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000021B8   0x4992             LDR.N    R1,??v_ImageCut_151+0x8
   \   000021BA   0x1841             ADDS     R1,R0,R1
   \   000021BC   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   000021C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000021C2   0x4A90             LDR.N    R2,??v_ImageCut_151+0x8
   \   000021C4   0x1882             ADDS     R2,R0,R2
   \   000021C6   0xF892 0x20A3      LDRB     R2,[R2, #+163]
   \   000021CA   0x1A89             SUBS     R1,R1,R2
   \                     ??v_ImageCut_225: (+1)
   \   000021CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000021CE   0x4A8D             LDR.N    R2,??v_ImageCut_151+0x8
   \   000021D0   0xEB12 0x0240      ADDS     R2,R2,R0, LSL #+1
   \   000021D4   0xF9B2 0x2158      LDRSH    R2,[R2, #+344]
   \   000021D8   0x2306             MOVS     R3,#+6
   \   000021DA   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000021DE   0x428A             CMP      R2,R1
   \   000021E0   0xDACA             BGE.N    ??v_ImageCut_222
   1975                      {
   1976                          hazardStartLine = loop;break;
   \   000021E2   0x0004             MOVS     R4,R0
   1977                      }
   1978                  }
   1979                  if(0 == hazardStartLine){break;}
   \                     ??v_ImageCut_223: (+1)
   \   000021E4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000021E6   0x2C00             CMP      R4,#+0
   \   000021E8   0xF000 0x81C6      BEQ.W    ??v_ImageCut_212
   1980                  uint8 y_height_useful = Get45cmLengthFromY(hazardStartLine)/2;
   \                     ??v_ImageCut_226: (+1)
   \   000021EC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000021EE   0xEE00 0x4A10      VMOV     S0,R4
   \   000021F2   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   000021F6   0xEDDD 0x0A11      VLDR     S1,[SP, #+68]
   \   000021FA   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000021FE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00002200   0xEE00 0x4A90      VMOV     S1,R4
   \   00002204   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00002208   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000220C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000220E   0xEE00 0x4A90      VMOV     S1,R4
   \   00002212   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00002216   0xED9D 0x1A12      VLDR     S2,[SP, #+72]
   \   0000221A   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000221E   0xEDDD 0x0A13      VLDR     S1,[SP, #+76]
   \   00002222   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00002226   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00002228   0xEE00 0x4A90      VMOV     S1,R4
   \   0000222C   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00002230   0xED9D 0x1A14      VLDR     S2,[SP, #+80]
   \   00002234   0xEDDD 0x1A15      VLDR     S3,[SP, #+84]
   \   00002238   0xEE40 0x1A81      VMLA.F32 S3,S1,S2
   \   0000223C   0xEE80 0x0A21      VDIV.F32 S0,S0,S3
   \   00002240   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00002244   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00002248   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000224C   0xEE10 0x5A10      VMOV     R5,S0
   1981                  uint8 y_height_allHave = y_height_useful;//应该的纵坐标距离
   \   00002250   0xF88D 0x5008      STRB     R5,[SP, #+8]
   1982                  
   1983                  uint8 y_world_height = ((GetYaxis(hazardStartLine)-GetYaxis(m_ImageAbstract.Start_Y_Position))*45/30);
   \   00002254   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00002256   0xEE00 0x4A10      VMOV     S0,R4
   \   0000225A   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   0000225E   0xF8DF 0x0E4C      LDR.W    R0,??v_ImageCut_227
   \   00002262   0xEDD0 0x0A15      VLDR     S1,[R0, #+84]
   \   00002266   0xF8DF 0x0E44      LDR.W    R0,??v_ImageCut_227
   \   0000226A   0xED90 0x1A16      VLDR     S2,[R0, #+88]
   \   0000226E   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00002272   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00002274   0xEE00 0x4A10      VMOV     S0,R4
   \   00002278   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   0000227C   0xF8DF 0x0E2C      LDR.W    R0,??v_ImageCut_227
   \   00002280   0xEDD0 0x0A18      VLDR     S1,[R0, #+96]
   \   00002284   0xEEF7 0x1A00      VMOV.F32 S3,#1.0
   \   00002288   0xEE40 0x1A20      VMLA.F32 S3,S0,S1
   \   0000228C   0xEE81 0x0A21      VDIV.F32 S0,S2,S3
   \   00002290   0x485C             LDR.N    R0,??v_ImageCut_151+0x8
   \   00002292   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00002296   0xEE00 0x0A90      VMOV     S1,R0
   \   0000229A   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   0000229E   0xF8DF 0x0E0C      LDR.W    R0,??v_ImageCut_227
   \   000022A2   0xED90 0x1A15      VLDR     S2,[R0, #+84]
   \   000022A6   0xF8DF 0x0E04      LDR.W    R0,??v_ImageCut_227
   \   000022AA   0xEDD0 0x1A16      VLDR     S3,[R0, #+88]
   \   000022AE   0xEE40 0x1A81      VMLA.F32 S3,S1,S2
   \   000022B2   0x4854             LDR.N    R0,??v_ImageCut_151+0x8
   \   000022B4   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   000022B8   0xEE00 0x0A90      VMOV     S1,R0
   \   000022BC   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   000022C0   0xF8DF 0x0DE8      LDR.W    R0,??v_ImageCut_227
   \   000022C4   0xED90 0x1A18      VLDR     S2,[R0, #+96]
   \   000022C8   0xEEB7 0x2A00      VMOV.F32 S4,#1.0
   \   000022CC   0xEE00 0x2A81      VMLA.F32 S4,S1,S2
   \   000022D0   0xEEC1 0x0A82      VDIV.F32 S1,S3,S4
   \   000022D4   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   000022D8   0xEDDF 0x0A4B      VLDR.W   S1,??v_ImageCut_151+0xC  ;; 0x42340000
   \   000022DC   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000022E0   0xEEF3 0x0A0E      VMOV.F32 S1,#30.0
   \   000022E4   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   000022E8   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000022EC   0xEE10 0x0A10      VMOV     R0,S0
   1984                  if(y_world_height >= 70){break;}//根据这个实际左边退出 
   \   000022F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000022F2   0x2846             CMP      R0,#+70
   \   000022F4   0xF280 0x8140      BGE.W    ??v_ImageCut_212
   1985                  //if(end_y_ctr <= 10){break;}//当有效距离很短时，忽略障碍，这句话会不会造成问题呢？
   1986                  
   1987                  uint8 loop = 0;
   \                     ??v_ImageCut_228: (+1)
   \   000022F8   0x2700             MOVS     R7,#+0
   1988                  if(hazardStartLine + y_height_useful > 60){y_height_useful = 60;}//y_height_useful更新数值
   \   000022FA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022FC   0xFA55 0xF084      UXTAB    R0,R5,R4
   \   00002300   0x283D             CMP      R0,#+61
   \   00002302   0xDB01             BLT.N    ??v_ImageCut_229
   \   00002304   0x253C             MOVS     R5,#+60
   \   00002306   0xE000             B.N      ??v_ImageCut_230
   1989                  else{y_height_useful = hazardStartLine + y_height_useful;}//限制高度
   \                     ??v_ImageCut_229: (+1)
   \   00002308   0x1965             ADDS     R5,R4,R5
   1990                  
   1991                  
   1992                  uint8 hazard_counter = 0;
   \                     ??v_ImageCut_230: (+1)
   \   0000230A   0x2600             MOVS     R6,#+0
   1993                  for(loop = hazardStartLine + 1;loop <= y_height_useful;loop++)
   \   0000230C   0x1C67             ADDS     R7,R4,#+1
   \   0000230E   0xE055             B.N      ??v_ImageCut_231
   1994                  {//if 'HazarfStartLine' is not a vaild number,we will find It's hard to find the trouble.
   1995                      uint8 perLine_usefulWidth = 0;
   \                     ??v_ImageCut_232: (+1)
   \   00002310   0xF05F 0x0800      MOVS     R8,#+0
   1996                      perLine_usefulWidth = m_ImageAbstract.Right[loop] - m_ImageAbstract.Left[loop];
   \   00002314   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00002316   0x483B             LDR.N    R0,??v_ImageCut_151+0x8
   \   00002318   0x1838             ADDS     R0,R7,R0
   \   0000231A   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   0000231E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00002320   0x4938             LDR.N    R1,??v_ImageCut_151+0x8
   \   00002322   0x1879             ADDS     R1,R7,R1
   \   00002324   0xF891 0x102C      LDRB     R1,[R1, #+44]
   \   00002328   0x1A40             SUBS     R0,R0,R1
   \   0000232A   0x4680             MOV      R8,R0
   1997                      if(((perLine_usefulWidth >= 0.48*m_ImageAbstract.width[loop])
   1998                       &&(perLine_usefulWidth <= 0.8*m_ImageAbstract.width[loop]))
   1999                       &&(255 != m_ImageAbstract.Right[loop])
   2000                       &&(255 != m_ImageAbstract.Left[loop]))
   \   0000232C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000232E   0x4835             LDR.N    R0,??v_ImageCut_151+0x8
   \   00002330   0xEB10 0x0047      ADDS     R0,R0,R7, LSL #+1
   \   00002334   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   00002338   0x.... 0x....      BL       __aeabi_i2d
   \   0000233C   0xF8DF 0x2D70      LDR.W    R2,??v_ImageCut_227+0x4  ;; 0xeb851eb8
   \   00002340   0xF8DF 0x3D70      LDR.W    R3,??v_ImageCut_227+0x8  ;; 0x3fdeb851
   \   00002344   0x.... 0x....      BL       __aeabi_dmul
   \   00002348   0x0002             MOVS     R2,R0
   \   0000234A   0x000B             MOVS     R3,R1
   \   0000234C   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   00002350   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00002354   0x4640             MOV      R0,R8
   \   00002356   0x.... 0x....      BL       __aeabi_ui2d
   \   0000235A   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   0000235E   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00002362   0xD82A             BHI.N    ??v_ImageCut_233
   \   00002364   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00002368   0x4640             MOV      R0,R8
   \   0000236A   0x.... 0x....      BL       __aeabi_ui2d
   \   0000236E   0x0002             MOVS     R2,R0
   \   00002370   0x000B             MOVS     R3,R1
   \   00002372   0x4690             MOV      R8,R2
   \   00002374   0x4699             MOV      R9,R3
   \   00002376   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00002378   0x4822             LDR.N    R0,??v_ImageCut_151+0x8
   \   0000237A   0xEB10 0x0047      ADDS     R0,R0,R7, LSL #+1
   \   0000237E   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   00002382   0x.... 0x....      BL       __aeabi_i2d
   \   00002386   0xF8DF 0x2D30      LDR.W    R2,??v_ImageCut_227+0xC  ;; 0x9999999a
   \   0000238A   0xF8DF 0x3D30      LDR.W    R3,??v_ImageCut_227+0x10  ;; 0x3fe99999
   \   0000238E   0x.... 0x....      BL       __aeabi_dmul
   \   00002392   0x4642             MOV      R2,R8
   \   00002394   0x464B             MOV      R3,R9
   \   00002396   0x.... 0x....      BL       __aeabi_cdrcmple
   \   0000239A   0xD80E             BHI.N    ??v_ImageCut_233
   \   0000239C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000239E   0x4819             LDR.N    R0,??v_ImageCut_151+0x8
   \   000023A0   0x1838             ADDS     R0,R7,R0
   \   000023A2   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   000023A6   0x28FF             CMP      R0,#+255
   \   000023A8   0xD007             BEQ.N    ??v_ImageCut_233
   \   000023AA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000023AC   0x4815             LDR.N    R0,??v_ImageCut_151+0x8
   \   000023AE   0x1838             ADDS     R0,R7,R0
   \   000023B0   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   000023B4   0x28FF             CMP      R0,#+255
   \   000023B6   0xD000             BEQ.N    ??v_ImageCut_233
   2001                      {
   2002                          hazard_counter++;//有问题再判断Hazard
   \   000023B8   0x1C76             ADDS     R6,R6,#+1
   2003                          //m_ImageTesting.hazardvaildLine[loop] = 100;//有效
   2004                      }//可以增加左右线的连续性判断，对障碍进行完全判断
   2005                  }
   \                     ??v_ImageCut_233: (+1)
   \   000023BA   0x1C7F             ADDS     R7,R7,#+1
   \                     ??v_ImageCut_231: (+1)
   \   000023BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000023BE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000023C0   0x42BD             CMP      R5,R7
   \   000023C2   0xD2A5             BCS.N    ??v_ImageCut_232
   2006                  if(hazard_counter >= 0.8 * y_height_allHave)//基本全是
   \   000023C4   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   000023C8   0x.... 0x....      BL       __aeabi_ui2d
   \   000023CC   0xF8DF 0x2CE8      LDR.W    R2,??v_ImageCut_227+0xC  ;; 0x9999999a
   \   000023D0   0xF8DF 0x3CE8      LDR.W    R3,??v_ImageCut_227+0x10  ;; 0x3fe99999
   \   000023D4   0x.... 0x....      BL       __aeabi_dmul
   \   000023D8   0x0002             MOVS     R2,R0
   \   000023DA   0x000B             MOVS     R3,R1
   \   000023DC   0x4690             MOV      R8,R2
   \   000023DE   0x4699             MOV      R9,R3
   \   000023E0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000023E2   0x0030             MOVS     R0,R6
   \   000023E4   0x.... 0x....      BL       __aeabi_ui2d
   \   000023E8   0x4642             MOV      R2,R8
   \   000023EA   0x464B             MOV      R3,R9
   \   000023EC   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000023F0   0xD80C             BHI.N    ??v_ImageCut_234
   2007                  {m_ImageTesting.isMeetingHazard = 1;}
   \   000023F2   0x4803             LDR.N    R0,??v_ImageCut_151+0x4
   \   000023F4   0x2101             MOVS     R1,#+1
   \   000023F6   0xF880 0x1087      STRB     R1,[R0, #+135]
   \   000023FA   0xE00C             B.N      ??v_ImageCut_235
   \                     ??v_ImageCut_151:
   \   000023FC   0x3FD33333         DC32     0x3fd33333
   \   00002400   0x........         DC32     m_ImageTesting
   \   00002404   0x........         DC32     m_ImageAbstract
   \   00002408   0x42340000         DC32     0x42340000
   2008                  else
   2009                  {m_ImageTesting.isMeetingHazard = 0;}
   \                     ??v_ImageCut_234: (+1)
   \   0000240C   0xF8DF 0x0CB0      LDR.W    R0,??v_ImageCut_227+0x14
   \   00002410   0x2100             MOVS     R1,#+0
   \   00002412   0xF880 0x1087      STRB     R1,[R0, #+135]
   2010                  
   2011                  if(1 == m_ImageTesting.isMeetingHazard)
   \                     ??v_ImageCut_235: (+1)
   \   00002416   0xF8DF 0x0CA8      LDR.W    R0,??v_ImageCut_227+0x14
   \   0000241A   0xF890 0x0087      LDRB     R0,[R0, #+135]
   \   0000241E   0x2801             CMP      R0,#+1
   \   00002420   0xF040 0x80AA      BNE.W    ??v_ImageCut_236
   2012                  {
   2013                      uint8 _1isLeft_2isRight = 0;
   \   00002424   0x2000             MOVS     R0,#+0
   2014                      
   2015                      if((hazardStartLine != m_ImageAbstract.Start_Y_Position)&&
   2016                         ((m_ImageAbstract.Central[hazardStartLine] + m_ImageAbstract.Central[hazardStartLine-1])/2
   2017                         <(m_ImageAbstract.Central[hazardStartLine+1] + m_ImageAbstract.Central[hazardStartLine+2])/2))
   \   00002426   0xF8DF 0x1C9C      LDR.W    R1,??v_ImageCut_227+0x18
   \   0000242A   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   0000242E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00002430   0x428C             CMP      R4,R1
   \   00002432   0xD025             BEQ.N    ??v_ImageCut_237
   \   00002434   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00002436   0xF8DF 0x1C8C      LDR.W    R1,??v_ImageCut_227+0x18
   \   0000243A   0x1861             ADDS     R1,R4,R1
   \   0000243C   0xF891 0x10A5      LDRB     R1,[R1, #+165]
   \   00002440   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00002442   0xF8DF 0x2C80      LDR.W    R2,??v_ImageCut_227+0x18
   \   00002446   0x18A2             ADDS     R2,R4,R2
   \   00002448   0xF892 0x20A6      LDRB     R2,[R2, #+166]
   \   0000244C   0xFA52 0xF181      UXTAB    R1,R2,R1
   \   00002450   0x2202             MOVS     R2,#+2
   \   00002452   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00002456   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00002458   0xF8DF 0x2C68      LDR.W    R2,??v_ImageCut_227+0x18
   \   0000245C   0x18A2             ADDS     R2,R4,R2
   \   0000245E   0xF892 0x20A4      LDRB     R2,[R2, #+164]
   \   00002462   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00002464   0xF8DF 0x3C5C      LDR.W    R3,??v_ImageCut_227+0x18
   \   00002468   0x18E3             ADDS     R3,R4,R3
   \   0000246A   0xF893 0x30A3      LDRB     R3,[R3, #+163]
   \   0000246E   0xFA53 0xF282      UXTAB    R2,R3,R2
   \   00002472   0x2302             MOVS     R3,#+2
   \   00002474   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   00002478   0x428A             CMP      R2,R1
   \   0000247A   0xDA01             BGE.N    ??v_ImageCut_237
   2018                      {
   2019                          _1isLeft_2isRight = 2;
   \   0000247C   0x2002             MOVS     R0,#+2
   \   0000247E   0xE02B             B.N      ??v_ImageCut_238
   2020                      }
   2021                      else if((hazardStartLine != m_ImageAbstract.Start_Y_Position)&&
   2022                         ((m_ImageAbstract.Central[hazardStartLine] + m_ImageAbstract.Central[hazardStartLine-1])/2
   2023                         >(m_ImageAbstract.Central[hazardStartLine+1] + m_ImageAbstract.Central[hazardStartLine+2])/2))
   \                     ??v_ImageCut_237: (+1)
   \   00002480   0xF8DF 0x1C40      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002484   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002488   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000248A   0x428C             CMP      R4,R1
   \   0000248C   0xD024             BEQ.N    ??v_ImageCut_238
   \   0000248E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00002490   0xF8DF 0x1C30      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002494   0x1861             ADDS     R1,R4,R1
   \   00002496   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   0000249A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000249C   0xF8DF 0x2C24      LDR.W    R2,??v_ImageCut_227+0x18
   \   000024A0   0x18A2             ADDS     R2,R4,R2
   \   000024A2   0xF892 0x20A3      LDRB     R2,[R2, #+163]
   \   000024A6   0xFA52 0xF181      UXTAB    R1,R2,R1
   \   000024AA   0x2202             MOVS     R2,#+2
   \   000024AC   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000024B0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000024B2   0xF8DF 0x2C10      LDR.W    R2,??v_ImageCut_227+0x18
   \   000024B6   0x18A2             ADDS     R2,R4,R2
   \   000024B8   0xF892 0x20A5      LDRB     R2,[R2, #+165]
   \   000024BC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000024BE   0xF8DF 0x3C04      LDR.W    R3,??v_ImageCut_227+0x18
   \   000024C2   0x18E3             ADDS     R3,R4,R3
   \   000024C4   0xF893 0x30A6      LDRB     R3,[R3, #+166]
   \   000024C8   0xFA53 0xF282      UXTAB    R2,R3,R2
   \   000024CC   0x2302             MOVS     R3,#+2
   \   000024CE   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000024D2   0x428A             CMP      R2,R1
   \   000024D4   0xDA00             BGE.N    ??v_ImageCut_238
   2024                      {
   2025                          _1isLeft_2isRight = 1;
   \   000024D6   0x2001             MOVS     R0,#+1
   2026                      }
   2027                      
   2028                      for(uint8 inter = m_ImageAbstract.Start_Y_Position;inter <= y_height_useful;inter++)
   \                     ??v_ImageCut_238: (+1)
   \   000024D8   0xF8DF 0x1BE8      LDR.W    R1,??v_ImageCut_227+0x18
   \   000024DC   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   000024E0   0xE022             B.N      ??v_ImageCut_239
   2029                      {
   2030                          if((1 == _1isLeft_2isRight)&&(255 != m_ImageAbstract.Left[inter]))
   2031                          {
   2032                              m_ImageAbstract.Central[inter] = 
   2033                             /*(m_ImageAbstract.Central[inter] +*/
   2034                             (m_ImageAbstract.Left[inter] + m_ImageAbstract.Central[inter])/2/*)/2*/;
   2035                          }
   2036                          else if((2 == _1isLeft_2isRight)&&(255 != m_ImageAbstract.Right[inter]))
   \                     ??v_ImageCut_240: (+1)
   \   000024E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000024E4   0x2802             CMP      R0,#+2
   \   000024E6   0xD11E             BNE.N    ??v_ImageCut_241
   \   000024E8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000024EA   0xF8DF 0x2BD8      LDR.W    R2,??v_ImageCut_227+0x18
   \   000024EE   0x188A             ADDS     R2,R1,R2
   \   000024F0   0xF892 0x2068      LDRB     R2,[R2, #+104]
   \   000024F4   0x2AFF             CMP      R2,#+255
   \   000024F6   0xD016             BEQ.N    ??v_ImageCut_241
   2037                          {
   2038                              m_ImageAbstract.Central[inter] = 
   2039                             /*(m_ImageAbstract.Central[inter] +*/
   2040                             (m_ImageAbstract.Right[inter] + m_ImageAbstract.Central[inter])/2/*)/2*/;
   \   000024F8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000024FA   0xF8DF 0x2BC8      LDR.W    R2,??v_ImageCut_227+0x18
   \   000024FE   0x188A             ADDS     R2,R1,R2
   \   00002500   0xF892 0x2068      LDRB     R2,[R2, #+104]
   \   00002504   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002506   0xF8DF 0x3BBC      LDR.W    R3,??v_ImageCut_227+0x18
   \   0000250A   0x18CB             ADDS     R3,R1,R3
   \   0000250C   0xF893 0x30A4      LDRB     R3,[R3, #+164]
   \   00002510   0xFA53 0xF282      UXTAB    R2,R3,R2
   \   00002514   0x2302             MOVS     R3,#+2
   \   00002516   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   0000251A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000251C   0xF8DF 0x3BA4      LDR.W    R3,??v_ImageCut_227+0x18
   \   00002520   0x18CB             ADDS     R3,R1,R3
   \   00002522   0xF883 0x20A4      STRB     R2,[R3, #+164]
   2041                          }
   \                     ??v_ImageCut_241: (+1)
   \   00002526   0x1C49             ADDS     R1,R1,#+1
   \                     ??v_ImageCut_239: (+1)
   \   00002528   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000252A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000252C   0x428D             CMP      R5,R1
   \   0000252E   0xD322             BCC.N    ??v_ImageCut_242
   \   00002530   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002532   0x2801             CMP      R0,#+1
   \   00002534   0xD1D5             BNE.N    ??v_ImageCut_240
   \   00002536   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002538   0xF8DF 0x2B88      LDR.W    R2,??v_ImageCut_227+0x18
   \   0000253C   0x188A             ADDS     R2,R1,R2
   \   0000253E   0xF892 0x202C      LDRB     R2,[R2, #+44]
   \   00002542   0x2AFF             CMP      R2,#+255
   \   00002544   0xD0CD             BEQ.N    ??v_ImageCut_240
   \   00002546   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002548   0xF8DF 0x2B78      LDR.W    R2,??v_ImageCut_227+0x18
   \   0000254C   0x188A             ADDS     R2,R1,R2
   \   0000254E   0xF892 0x202C      LDRB     R2,[R2, #+44]
   \   00002552   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002554   0xF8DF 0x3B6C      LDR.W    R3,??v_ImageCut_227+0x18
   \   00002558   0x18CB             ADDS     R3,R1,R3
   \   0000255A   0xF893 0x30A4      LDRB     R3,[R3, #+164]
   \   0000255E   0xFA53 0xF282      UXTAB    R2,R3,R2
   \   00002562   0x2302             MOVS     R3,#+2
   \   00002564   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   00002568   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000256A   0xF8DF 0x3B58      LDR.W    R3,??v_ImageCut_227+0x18
   \   0000256E   0x18CB             ADDS     R3,R1,R3
   \   00002570   0xF883 0x20A4      STRB     R2,[R3, #+164]
   \   00002574   0xE7D7             B.N      ??v_ImageCut_241
   2042                      }
   2043                      end_y_ctr = y_height_useful;
   \                     ??v_ImageCut_242: (+1)
   \   00002576   0x46AB             MOV      R11,R5
   2044                  }
   2045              }while(0);
   2046          
   2047              /*这个很合理，但是对拐急弯很不合理
   2048              uint8 think_end = end_y_ctr;
   2049              uint8 used_mode = 0;
   2050              for(sint8 loop = end_y_ctr;loop >= m_ImageAbstract.Start_Y_Position;loop--)
   2051              {
   2052                  if(0 == used_mode)
   2053                  {
   2054                      if((constNum_X_MaxCounter - constn_xFindJumpLine_Width * 2 == m_ImageAbstract.Central[loop])
   2055                       ||(constn_xFindJumpLine_Width * 2 == m_ImageAbstract.Central[loop]))
   2056                      {
   2057                          think_end = loop;
   2058                      }
   2059                      else
   2060                      {
   2061                          used_mode = 1;
   2062                      }
   2063                  }
   2064                  else//1 == used_mode
   2065                  {
   2066                      if(Sid_None != TrkSide[loop])
   2067                      {
   2068                          break;
   2069                      }
   2070                      else
   2071                      {
   2072                          think_end = loop;
   2073                      }
   2074                  }
   2075              }
   2076              end_y_ctr = think_end;
   2077              */
   2078              m_ImageAbstract.Last_Y_Position = end_y_ctr;//赋值最后<=根据搜索结果第一次判定最终情况
   \                     ??v_ImageCut_236: (+1)
   \                     ??v_ImageCut_212: (+1)
   \   00002578   0xF8DF 0x0B48      LDR.W    R0,??v_ImageCut_227+0x18
   \   0000257C   0xF880 0xB1D1      STRB     R11,[R0, #+465]
   2079              //检测到坡道的话，就利用最近十点的信息
   2080              
   2081              
   2082          
   2083              
   2084              
   2085              do//进行直角的处理=>这里进行直角处理会好很多
   2086              {
   2087                  //if(0 == m_ImageTesting.isMeetingHazard){break;}
   2088                  /*这个做法是绝对错误的
   2089                  if(1 == TurningBeacauseVeryLittle.isHappened)
   2090                  {
   2091                      m_ImageAbstract.RtAngle_isLasting = 0;
   2092                  }
   2093                  */
   2094                  //if(1 == TurningBeacauseVeryLittle.isHappened){break;}
   2095                  //1.判断直角区间
   2096                  /*
   2097                  if(1 == isHaveLonlyLine)
   2098                  {
   2099                      break;//关闭
   2100                  }*/
   2101                  uint8 finder_timer = 0;
   \   00002580   0x2100             MOVS     R1,#+0
   2102                  //
   2103                  u_Side Rt_WhiteTurningSide = Sid_NaN;
   \   00002582   0x2532             MOVS     R5,#+50
   2104                  
   2105          
   2106                  uint8 step_isfind_Rt_WhiteSide_UpestLine = 0;//找直角最上边
   \   00002584   0xF05F 0x0800      MOVS     R8,#+0
   2107                  uint8 step_isfind_Rt_WhiteSide_LowestLine = 0;//找直角最下边
   \   00002588   0x2400             MOVS     R4,#+0
   2108                  //uint8 step_isfind_Rt_WhiteSide_DoubleIsStraight = 0;//判定两侧直不直
   2109                  
   2110                  //uint8 step_RthasFound_TurningProcess = 0;//已经找到直角，在转向
   2111                      
   2112                  //uint8 step_hasOccurWrong = 0;//发生了错误
   2113                  //
   2114                  uint8 flag_Rt_hasfound = 0;
   \   0000258A   0x2000             MOVS     R0,#+0
   2115                  
   2116                  typedef
   2117                  struct
   2118                  {
   2119                      uint8 RtWhiteSide_StartLine;//起始行
   2120                      uint8 RtWhiteSide_EndLine;//
   2121                      uint8 RtStepTwoLostWhiteCounter;//丢失的（白色区域的）长度
   2122                  }s_RtAngleCondtion;
   2123                  s_RtAngleCondtion RtAngleCondtion;
   2124                  RtAngleCondtion.RtWhiteSide_EndLine = 255;
   \   0000258C   0x22FF             MOVS     R2,#+255
   \   0000258E   0xF88D 0x2009      STRB     R2,[SP, #+9]
   2125                  RtAngleCondtion.RtWhiteSide_StartLine = 255;
   \   00002592   0x22FF             MOVS     R2,#+255
   \   00002594   0xF88D 0x2008      STRB     R2,[SP, #+8]
   2126                  RtAngleCondtion.RtStepTwoLostWhiteCounter = 0;//清空
   \   00002598   0x2200             MOVS     R2,#+0
   \   0000259A   0xF88D 0x200A      STRB     R2,[SP, #+10]
   2127                  
   2128                  for(sint8 loop = m_ImageAbstract.Last_Y_Position - 1;loop >= m_ImageAbstract.Start_Y_Position;loop--)//-128 128
   \   0000259E   0xF8DF 0x2B24      LDR.W    R2,??v_ImageCut_227+0x18
   \   000025A2   0xF992 0x21D1      LDRSB    R2,[R2, #+465]
   \   000025A6   0x1E52             SUBS     R2,R2,#+1
   \   000025A8   0xE000             B.N      ??v_ImageCut_243
   \                     ??v_ImageCut_244: (+1)
   \   000025AA   0x1E52             SUBS     R2,R2,#+1
   \                     ??v_ImageCut_243: (+1)
   \   000025AC   0x0013             MOVS     R3,R2
   \   000025AE   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \   000025B0   0xF8DF 0x6B10      LDR.W    R6,??v_ImageCut_227+0x18
   \   000025B4   0xF896 0x61D0      LDRB     R6,[R6, #+464]
   \   000025B8   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   000025BA   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000025BC   0x42B3             CMP      R3,R6
   \   000025BE   0xF2C0 0x8092      BLT.W    ??v_ImageCut_245
   2129                  {//行累加=>从最后开始
   2130                      if(1 == TurningBeacauseVeryLittle.isHappened)
   \   000025C2   0xF89D 0x3027      LDRB     R3,[SP, #+39]
   \   000025C6   0x2B01             CMP      R3,#+1
   \   000025C8   0xD102             BNE.N    ??v_ImageCut_246
   2131                      {//根据上次修正最远
   2132                          step_isfind_Rt_WhiteSide_UpestLine = 0;
   \   000025CA   0xF05F 0x0800      MOVS     R8,#+0
   2133                          break;//进入奇怪的模式=>
   \   000025CE   0xE08A             B.N      ??v_ImageCut_245
   2134                      }
   2135                      finder_timer++;//第一次搜素
   \                     ??v_ImageCut_246: (+1)
   \   000025D0   0x1C49             ADDS     R1,R1,#+1
   2136                      if((0 == step_isfind_Rt_WhiteSide_UpestLine)//这里还没完成
   2137                     &&(((255 == m_ImageAbstract.Left[loop])&&(255 != m_ImageAbstract.Right[loop]))
   2138                      ||((255 != m_ImageAbstract.Left[loop])&&(255 == m_ImageAbstract.Right[loop]))))
   \   000025D2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000025D6   0xF1B8 0x0F00      CMP      R8,#+0
   \   000025DA   0xD13B             BNE.N    ??v_ImageCut_247
   \   000025DC   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   000025DE   0xF8DF 0x3AE4      LDR.W    R3,??v_ImageCut_227+0x18
   \   000025E2   0x18D3             ADDS     R3,R2,R3
   \   000025E4   0xF893 0x302C      LDRB     R3,[R3, #+44]
   \   000025E8   0x2BFF             CMP      R3,#+255
   \   000025EA   0xD107             BNE.N    ??v_ImageCut_248
   \   000025EC   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   000025EE   0xF8DF 0x3AD4      LDR.W    R3,??v_ImageCut_227+0x18
   \   000025F2   0x18D3             ADDS     R3,R2,R3
   \   000025F4   0xF893 0x3068      LDRB     R3,[R3, #+104]
   \   000025F8   0x2BFF             CMP      R3,#+255
   \   000025FA   0xD10F             BNE.N    ??v_ImageCut_249
   \                     ??v_ImageCut_248: (+1)
   \   000025FC   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   000025FE   0xF8DF 0x3AC4      LDR.W    R3,??v_ImageCut_227+0x18
   \   00002602   0x18D3             ADDS     R3,R2,R3
   \   00002604   0xF893 0x302C      LDRB     R3,[R3, #+44]
   \   00002608   0x2BFF             CMP      R3,#+255
   \   0000260A   0xD023             BEQ.N    ??v_ImageCut_247
   \   0000260C   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   0000260E   0xF8DF 0x3AB4      LDR.W    R3,??v_ImageCut_227+0x18
   \   00002612   0x18D3             ADDS     R3,R2,R3
   \   00002614   0xF893 0x3068      LDRB     R3,[R3, #+104]
   \   00002618   0x2BFF             CMP      R3,#+255
   \   0000261A   0xD11B             BNE.N    ??v_ImageCut_247
   2139                      {//持续搜索至一边有线，前提是保证找到最远的行。
   2140                          step_isfind_Rt_WhiteSide_UpestLine = 1;//标定第一步结束
   \                     ??v_ImageCut_249: (+1)
   \   0000261C   0xF05F 0x0801      MOVS     R8,#+1
   2141                          if(255 == m_ImageAbstract.Left[loop]){/*becauseThisOutOfTheBlackRtAngle='l';*/Rt_WhiteTurningSide = Sid_Left;}
   \   00002620   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   00002622   0xF8DF 0x3AA0      LDR.W    R3,??v_ImageCut_227+0x18
   \   00002626   0x18D3             ADDS     R3,R2,R3
   \   00002628   0xF893 0x302C      LDRB     R3,[R3, #+44]
   \   0000262C   0x2BFF             CMP      R3,#+255
   \   0000262E   0xD100             BNE.N    ??v_ImageCut_250
   \   00002630   0x250A             MOVS     R5,#+10
   2142                          if(255 == m_ImageAbstract.Right[loop]){/*becauseThisOutOfTheBlackRtAngle='r';*/Rt_WhiteTurningSide = Sid_Right;}
   \                     ??v_ImageCut_250: (+1)
   \   00002632   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   00002634   0xF8DF 0x3A8C      LDR.W    R3,??v_ImageCut_227+0x18
   \   00002638   0x18D3             ADDS     R3,R2,R3
   \   0000263A   0xF893 0x3068      LDRB     R3,[R3, #+104]
   \   0000263E   0x2BFF             CMP      R3,#+255
   \   00002640   0xD100             BNE.N    ??v_ImageCut_251
   \   00002642   0x2514             MOVS     R5,#+20
   2143                          RtAngleCondtion.RtWhiteSide_EndLine = loop;
   \                     ??v_ImageCut_251: (+1)
   \   00002644   0xF88D 0x2009      STRB     R2,[SP, #+9]
   2144                          if(finder_timer > 5){step_isfind_Rt_WhiteSide_UpestLine = 0;break;} //认定判定失败=>当远处有奇怪的东西
   \   00002648   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000264A   0x2906             CMP      R1,#+6
   \   0000264C   0xDB41             BLT.N    ??v_ImageCut_252
   \   0000264E   0xF05F 0x0800      MOVS     R8,#+0
   \   00002652   0xE048             B.N      ??v_ImageCut_245
   2145                      }
   2146                      else
   2147                      {
   2148                          if(0 == step_isfind_Rt_WhiteSide_LowestLine)//(1 == step_isfind_Rt_WhiteSide_UpestLine)
   \                     ??v_ImageCut_247: (+1)
   \   00002654   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00002656   0x2C00             CMP      R4,#+0
   \   00002658   0xD13B             BNE.N    ??v_ImageCut_252
   2149                          {//因为在else，后面是隐藏条件
   2150                              if(Sid_Left == Rt_WhiteTurningSide)
   \   0000265A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000265C   0x2D0A             CMP      R5,#+10
   \   0000265E   0xD118             BNE.N    ??v_ImageCut_253
   2151                              {
   2152                                  if(255 != m_ImageAbstract.Left[loop])
   \   00002660   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   00002662   0xF8DF 0x3A60      LDR.W    R3,??v_ImageCut_227+0x18
   \   00002666   0x18D3             ADDS     R3,R2,R3
   \   00002668   0xF893 0x302C      LDRB     R3,[R3, #+44]
   \   0000266C   0x2BFF             CMP      R3,#+255
   \   0000266E   0xD003             BEQ.N    ??v_ImageCut_254
   2153                                  {
   2154                                      //m_ImageAbstract.RtAngle_isLasting = 1;
   2155                                      RtAngleCondtion.RtWhiteSide_StartLine = loop;
   \   00002670   0xF88D 0x2008      STRB     R2,[SP, #+8]
   2156                                      step_isfind_Rt_WhiteSide_LowestLine = 1;//标定这一条件
   \   00002674   0x2401             MOVS     R4,#+1
   2157                                      break;
   \   00002676   0xE036             B.N      ??v_ImageCut_245
   2158                                  }
   2159                                  if(255 == m_ImageAbstract.Right[loop]){RtAngleCondtion.RtStepTwoLostWhiteCounter++;}
   \                     ??v_ImageCut_254: (+1)
   \   00002678   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   0000267A   0xF8DF 0x3A48      LDR.W    R3,??v_ImageCut_227+0x18
   \   0000267E   0x18D3             ADDS     R3,R2,R3
   \   00002680   0xF893 0x3068      LDRB     R3,[R3, #+104]
   \   00002684   0x2BFF             CMP      R3,#+255
   \   00002686   0xD104             BNE.N    ??v_ImageCut_253
   \   00002688   0xF89D 0x300A      LDRB     R3,[SP, #+10]
   \   0000268C   0x1C5B             ADDS     R3,R3,#+1
   \   0000268E   0xF88D 0x300A      STRB     R3,[SP, #+10]
   2160                              }
   2161                              if(Sid_Right == Rt_WhiteTurningSide)
   \                     ??v_ImageCut_253: (+1)
   \   00002692   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002694   0x2D14             CMP      R5,#+20
   \   00002696   0xD11C             BNE.N    ??v_ImageCut_252
   2162                              {
   2163                                  if(255 != m_ImageAbstract.Right[loop])
   \   00002698   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   0000269A   0xF8DF 0x3A28      LDR.W    R3,??v_ImageCut_227+0x18
   \   0000269E   0x18D3             ADDS     R3,R2,R3
   \   000026A0   0xF893 0x3068      LDRB     R3,[R3, #+104]
   \   000026A4   0x2BFF             CMP      R3,#+255
   \   000026A6   0xD007             BEQ.N    ??v_ImageCut_255
   2164                                  {
   2165                                      //m_ImageAbstract.RtAngle_isLasting = 1;
   2166                                      RtAngleCondtion.RtWhiteSide_StartLine = loop;
   \   000026A8   0xF88D 0x2008      STRB     R2,[SP, #+8]
   2167                                      step_isfind_Rt_WhiteSide_LowestLine = 1;//标定这一条件
   \   000026AC   0x2401             MOVS     R4,#+1
   2168                                      break;
   \   000026AE   0xE01A             B.N      ??v_ImageCut_245
   \                     ??v_ImageCut_205:
   \   000026B0   0xA1CAC083         DC32     0xa1cac083
   \   000026B4   0x3FEBB645         DC32     0x3febb645
   2169                                  }
   2170                                  if(255 == m_ImageAbstract.Left[loop]){RtAngleCondtion.RtStepTwoLostWhiteCounter++;}
   \                     ??v_ImageCut_255: (+1)
   \   000026B8   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \   000026BA   0xF8DF 0x3A08      LDR.W    R3,??v_ImageCut_227+0x18
   \   000026BE   0x18D3             ADDS     R3,R2,R3
   \   000026C0   0xF893 0x302C      LDRB     R3,[R3, #+44]
   \   000026C4   0x2BFF             CMP      R3,#+255
   \   000026C6   0xD104             BNE.N    ??v_ImageCut_252
   \   000026C8   0xF89D 0x300A      LDRB     R3,[SP, #+10]
   \   000026CC   0x1C5B             ADDS     R3,R3,#+1
   \   000026CE   0xF88D 0x300A      STRB     R3,[SP, #+10]
   2171                              }
   2172                          }/*else//这里结束了 => 所以进行下一条件{}*/
   2173                      }
   2174                      if((0 == step_isfind_Rt_WhiteSide_UpestLine)&&(finder_timer > 6)){break;}
   \                     ??v_ImageCut_252: (+1)
   \   000026D2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000026D6   0xF1B8 0x0F00      CMP      R8,#+0
   \   000026DA   0xF47F 0xAF66      BNE.W    ??v_ImageCut_244
   \   000026DE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000026E0   0x2907             CMP      R1,#+7
   \   000026E2   0xF6FF 0xAF62      BLT.W    ??v_ImageCut_244
   2175                  }//循环结束
   2176                  
   2177                  if(1 == step_isfind_Rt_WhiteSide_UpestLine)//最近端可能找不到，但远端是没有的
   \                     ??v_ImageCut_245: (+1)
   \   000026E6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000026EA   0xF1B8 0x0F01      CMP      R8,#+1
   \   000026EE   0xF040 0x84A0      BNE.W    ??v_ImageCut_256
   2178                  {
   2179                      do{
   2180                      if(0 == step_isfind_Rt_WhiteSide_LowestLine)
   \   000026F2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000026F4   0x2C00             CMP      R4,#+0
   \   000026F6   0xD10C             BNE.N    ??v_ImageCut_257
   2181                      {
   2182                          if(1 == m_ImageAbstract.RtAngle_isLasting)//
   \   000026F8   0xF8DF 0x19C8      LDR.W    R1,??v_ImageCut_227+0x18
   \   000026FC   0xF891 0x11E0      LDRB     R1,[R1, #+480]
   \   00002700   0x2901             CMP      R1,#+1
   \   00002702   0xF040 0x82BC      BNE.W    ??v_ImageCut_258
   2183                          {/*becauseThisOutOfTheBlackRtAngle = 'S';*/ //限定开始位置的错误//这里导致的错误。但是为什么会找不到近端
   2184                              RtAngleCondtion.RtWhiteSide_StartLine = m_ImageAbstract.Start_Y_Position;}
   \   00002706   0xF8DF 0x19BC      LDR.W    R1,??v_ImageCut_227+0x18
   \   0000270A   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   0000270E   0xF88D 0x1008      STRB     R1,[SP, #+8]
   2185                          else
   2186                          {RtAngleCondtion.RtWhiteSide_EndLine = m_ImageAbstract.Last_Y_Position;
   2187                          RtAngleCondtion.RtWhiteSide_StartLine = m_ImageAbstract.Start_Y_Position;
   2188                          SideChangeOccur = 7;break;}//暂时的措施
   2189                      }
   2190                      float length = Get45cmLengthFromY(RtAngleCondtion.RtWhiteSide_StartLine);
   \                     ??v_ImageCut_257: (+1)
   \   00002712   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002716   0xEE00 0x1A10      VMOV     S0,R1
   \   0000271A   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   0000271E   0xEDDD 0x0A11      VLDR     S1,[SP, #+68]
   \   00002722   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00002726   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   0000272A   0xEE00 0x1A90      VMOV     S1,R1
   \   0000272E   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00002732   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00002736   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   0000273A   0xEE00 0x1A90      VMOV     S1,R1
   \   0000273E   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00002742   0xED9D 0x1A12      VLDR     S2,[SP, #+72]
   \   00002746   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000274A   0xEDDD 0x0A13      VLDR     S1,[SP, #+76]
   \   0000274E   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00002752   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002756   0xEE00 0x1A90      VMOV     S1,R1
   \   0000275A   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   0000275E   0xED9D 0x1A14      VLDR     S2,[SP, #+80]
   \   00002762   0xEDDD 0x1A15      VLDR     S3,[SP, #+84]
   \   00002766   0xEE40 0x1A81      VMLA.F32 S3,S1,S2
   \   0000276A   0xEE80 0x0A21      VDIV.F32 S0,S0,S3
   2191                      m_ImageAbstract.RtAngleLength = 
   2192                      ((float)GetYaxis(RtAngleCondtion.RtWhiteSide_EndLine) - (float)GetYaxis(RtAngleCondtion.RtWhiteSide_StartLine))/
   2193                      ((float)GetYaxis(m_ImageAbstract.Last_Y_Position) - (float)GetYaxis(m_ImageAbstract.Start_Y_Position));
   \   0000276E   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00002772   0xEE00 0x1A90      VMOV     S1,R1
   \   00002776   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   0000277A   0xF8DF 0x1930      LDR.W    R1,??v_ImageCut_227
   \   0000277E   0xED91 0x1A15      VLDR     S2,[R1, #+84]
   \   00002782   0xF8DF 0x1928      LDR.W    R1,??v_ImageCut_227
   \   00002786   0xEDD1 0x1A16      VLDR     S3,[R1, #+88]
   \   0000278A   0xEE40 0x1A81      VMLA.F32 S3,S1,S2
   \   0000278E   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00002792   0xEE00 0x1A90      VMOV     S1,R1
   \   00002796   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   0000279A   0xF8DF 0x1910      LDR.W    R1,??v_ImageCut_227
   \   0000279E   0xED91 0x1A18      VLDR     S2,[R1, #+96]
   \   000027A2   0xEEB7 0x2A00      VMOV.F32 S4,#1.0
   \   000027A6   0xEE00 0x2A81      VMLA.F32 S4,S1,S2
   \   000027AA   0xEEC1 0x0A82      VDIV.F32 S1,S3,S4
   \   000027AE   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   000027B2   0xEE01 0x1A10      VMOV     S2,R1
   \   000027B6   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   000027BA   0xF8DF 0x18F0      LDR.W    R1,??v_ImageCut_227
   \   000027BE   0xEDD1 0x1A15      VLDR     S3,[R1, #+84]
   \   000027C2   0xF8DF 0x18E8      LDR.W    R1,??v_ImageCut_227
   \   000027C6   0xED91 0x2A16      VLDR     S4,[R1, #+88]
   \   000027CA   0xEE01 0x2A21      VMLA.F32 S4,S2,S3
   \   000027CE   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   000027D2   0xEE01 0x1A10      VMOV     S2,R1
   \   000027D6   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   000027DA   0xF8DF 0x18D0      LDR.W    R1,??v_ImageCut_227
   \   000027DE   0xEDD1 0x1A18      VLDR     S3,[R1, #+96]
   \   000027E2   0xEEF7 0x2A00      VMOV.F32 S5,#1.0
   \   000027E6   0xEE41 0x2A21      VMLA.F32 S5,S2,S3
   \   000027EA   0xEE82 0x1A22      VDIV.F32 S2,S4,S5
   \   000027EE   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   000027F2   0xF8DF 0x18D0      LDR.W    R1,??v_ImageCut_227+0x18
   \   000027F6   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   000027FA   0xEE01 0x1A10      VMOV     S2,R1
   \   000027FE   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00002802   0xF8DF 0x18A8      LDR.W    R1,??v_ImageCut_227
   \   00002806   0xEDD1 0x1A15      VLDR     S3,[R1, #+84]
   \   0000280A   0xF8DF 0x18A0      LDR.W    R1,??v_ImageCut_227
   \   0000280E   0xED91 0x2A16      VLDR     S4,[R1, #+88]
   \   00002812   0xEE01 0x2A21      VMLA.F32 S4,S2,S3
   \   00002816   0xF8DF 0x18AC      LDR.W    R1,??v_ImageCut_227+0x18
   \   0000281A   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   0000281E   0xEE01 0x1A10      VMOV     S2,R1
   \   00002822   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00002826   0xF8DF 0x1884      LDR.W    R1,??v_ImageCut_227
   \   0000282A   0xEDD1 0x1A18      VLDR     S3,[R1, #+96]
   \   0000282E   0xEEF7 0x2A00      VMOV.F32 S5,#1.0
   \   00002832   0xEE41 0x2A21      VMLA.F32 S5,S2,S3
   \   00002836   0xEE82 0x1A22      VDIV.F32 S2,S4,S5
   \   0000283A   0xF8DF 0x1888      LDR.W    R1,??v_ImageCut_227+0x18
   \   0000283E   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002842   0xEE01 0x1A90      VMOV     S3,R1
   \   00002846   0xEEF8 0x1A61      VCVT.F32.U32 S3,S3
   \   0000284A   0xF8DF 0x1860      LDR.W    R1,??v_ImageCut_227
   \   0000284E   0xED91 0x2A15      VLDR     S4,[R1, #+84]
   \   00002852   0xF8DF 0x1858      LDR.W    R1,??v_ImageCut_227
   \   00002856   0xEDD1 0x2A16      VLDR     S5,[R1, #+88]
   \   0000285A   0xEE41 0x2A82      VMLA.F32 S5,S3,S4
   \   0000285E   0xF8DF 0x1864      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002862   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002866   0xEE01 0x1A90      VMOV     S3,R1
   \   0000286A   0xEEF8 0x1A61      VCVT.F32.U32 S3,S3
   \   0000286E   0xF8DF 0x183C      LDR.W    R1,??v_ImageCut_227
   \   00002872   0xED91 0x2A18      VLDR     S4,[R1, #+96]
   \   00002876   0xEEB7 0x3A00      VMOV.F32 S6,#1.0
   \   0000287A   0xEE01 0x3A82      VMLA.F32 S6,S3,S4
   \   0000287E   0xEEC2 0x1A83      VDIV.F32 S3,S5,S6
   \   00002882   0xEE31 0x1A61      VSUB.F32 S2,S2,S3
   \   00002886   0xEEC0 0x0A81      VDIV.F32 S1,S1,S2
   \   0000288A   0xF8DF 0x1838      LDR.W    R1,??v_ImageCut_227+0x18
   \   0000288E   0xEDC1 0x0A03      VSTR     S1,[R1, #+12]
   2194                      show_isWrong = 'P';
   \   00002892   0x2150             MOVS     R1,#+80
   \   00002894   0xF88D 0x100C      STRB     R1,[SP, #+12]
   2195                      if(
   2196                          ((RtAngleCondtion.RtWhiteSide_EndLine - RtAngleCondtion.RtWhiteSide_StartLine)>=1*length/2)
   2197                          &&((RtAngleCondtion.RtWhiteSide_EndLine - RtAngleCondtion.RtWhiteSide_StartLine)<=3*length/2)  
   2198                          &&((RtAngleCondtion.RtStepTwoLostWhiteCounter) < length/10)//这里也许有问题？
   2199                          &&((float)(GetYaxis(RtAngleCondtion.RtWhiteSide_EndLine) - (float)GetYaxis(RtAngleCondtion.RtWhiteSide_StartLine))*3>=
   2200                             (float)(GetYaxis(m_ImageAbstract.Last_Y_Position) - (float)GetYaxis(m_ImageAbstract.Start_Y_Position)))//最后一个3件需要修改
   2201                          &&((float)(GetYaxis(RtAngleCondtion.RtWhiteSide_EndLine) - (float)GetYaxis(RtAngleCondtion.RtWhiteSide_StartLine))*2<=
   2202                             (float)(GetYaxis(m_ImageAbstract.Last_Y_Position) - (float)GetYaxis(m_ImageAbstract.Start_Y_Position)))
   2203                          )
   \   00002898   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \   0000289C   0xEE60 0x0A20      VMUL.F32 S1,S0,S1
   \   000028A0   0xEEB0 0x1A00      VMOV.F32 S2,#2.0
   \   000028A4   0xEEC0 0x0A81      VDIV.F32 S1,S1,S2
   \   000028A8   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   000028AC   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   000028B0   0x1A89             SUBS     R1,R1,R2
   \   000028B2   0xEE01 0x1A10      VMOV     S2,R1
   \   000028B6   0xEEB8 0x1AC1      VCVT.F32.S32 S2,S2
   \   000028BA   0xEEB4 0x1A60      VCMP.F32 S2,S1
   \   000028BE   0xEEF1 0xFA10      FMSTAT   
   \   000028C2   0xF2C0 0x8357      BLT.W    ??v_ImageCut_259
   \   000028C6   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   000028CA   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   000028CE   0x1A89             SUBS     R1,R1,R2
   \   000028D0   0xEE00 0x1A90      VMOV     S1,R1
   \   000028D4   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000028D8   0xEEB0 0x1A08      VMOV.F32 S2,#3.0
   \   000028DC   0xEE20 0x1A01      VMUL.F32 S2,S0,S2
   \   000028E0   0xEEF0 0x1A00      VMOV.F32 S3,#2.0
   \   000028E4   0xEE81 0x1A21      VDIV.F32 S2,S2,S3
   \   000028E8   0xEEB4 0x1A60      VCMP.F32 S2,S1
   \   000028EC   0xEEF1 0xFA10      FMSTAT   
   \   000028F0   0xF2C0 0x8340      BLT.W    ??v_ImageCut_259
   \   000028F4   0xEEF2 0x0A04      VMOV.F32 S1,#10.0
   \   000028F8   0xEEC0 0x0A20      VDIV.F32 S1,S0,S1
   \   000028FC   0xF89D 0x100A      LDRB     R1,[SP, #+10]
   \   00002900   0xEE01 0x1A10      VMOV     S2,R1
   \   00002904   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00002908   0xEEB4 0x1A60      VCMP.F32 S2,S1
   \   0000290C   0xEEF1 0xFA10      FMSTAT   
   \   00002910   0xF140 0x8330      BPL.W    ??v_ImageCut_259
   \   00002914   0xF8DF 0x17AC      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002918   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   0000291C   0xEE00 0x1A90      VMOV     S1,R1
   \   00002920   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00002924   0xF8DF 0x1784      LDR.W    R1,??v_ImageCut_227
   \   00002928   0xED91 0x1A15      VLDR     S2,[R1, #+84]
   \   0000292C   0xF8DF 0x177C      LDR.W    R1,??v_ImageCut_227
   \   00002930   0xEDD1 0x1A16      VLDR     S3,[R1, #+88]
   \   00002934   0xEE40 0x1A81      VMLA.F32 S3,S1,S2
   \   00002938   0xF8DF 0x1788      LDR.W    R1,??v_ImageCut_227+0x18
   \   0000293C   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   00002940   0xEE00 0x1A90      VMOV     S1,R1
   \   00002944   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00002948   0xF8DF 0x1760      LDR.W    R1,??v_ImageCut_227
   \   0000294C   0xED91 0x1A18      VLDR     S2,[R1, #+96]
   \   00002950   0xEEB7 0x2A00      VMOV.F32 S4,#1.0
   \   00002954   0xEE00 0x2A81      VMLA.F32 S4,S1,S2
   \   00002958   0xEEC1 0x0A82      VDIV.F32 S1,S3,S4
   \   0000295C   0xF8DF 0x1764      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002960   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002964   0xEE01 0x1A10      VMOV     S2,R1
   \   00002968   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   0000296C   0xF8DF 0x173C      LDR.W    R1,??v_ImageCut_227
   \   00002970   0xEDD1 0x1A15      VLDR     S3,[R1, #+84]
   \   00002974   0xF8DF 0x1734      LDR.W    R1,??v_ImageCut_227
   \   00002978   0xED91 0x2A16      VLDR     S4,[R1, #+88]
   \   0000297C   0xEE01 0x2A21      VMLA.F32 S4,S2,S3
   \   00002980   0xF8DF 0x1740      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002984   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002988   0xEE01 0x1A10      VMOV     S2,R1
   \   0000298C   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00002990   0xF8DF 0x1718      LDR.W    R1,??v_ImageCut_227
   \   00002994   0xEDD1 0x1A18      VLDR     S3,[R1, #+96]
   \   00002998   0xEEF7 0x2A00      VMOV.F32 S5,#1.0
   \   0000299C   0xEE41 0x2A21      VMLA.F32 S5,S2,S3
   \   000029A0   0xEE82 0x1A22      VDIV.F32 S2,S4,S5
   \   000029A4   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   000029A8   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   000029AC   0xEE01 0x1A10      VMOV     S2,R1
   \   000029B0   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   000029B4   0xF8DF 0x16F4      LDR.W    R1,??v_ImageCut_227
   \   000029B8   0xEDD1 0x1A15      VLDR     S3,[R1, #+84]
   \   000029BC   0xF8DF 0x16EC      LDR.W    R1,??v_ImageCut_227
   \   000029C0   0xED91 0x2A16      VLDR     S4,[R1, #+88]
   \   000029C4   0xEE01 0x2A21      VMLA.F32 S4,S2,S3
   \   000029C8   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   000029CC   0xEE01 0x1A10      VMOV     S2,R1
   \   000029D0   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   000029D4   0xF8DF 0x16D4      LDR.W    R1,??v_ImageCut_227
   \   000029D8   0xEDD1 0x1A18      VLDR     S3,[R1, #+96]
   \   000029DC   0xEEF7 0x2A00      VMOV.F32 S5,#1.0
   \   000029E0   0xEE41 0x2A21      VMLA.F32 S5,S2,S3
   \   000029E4   0xEE82 0x1A22      VDIV.F32 S2,S4,S5
   \   000029E8   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   000029EC   0xEE01 0x1A90      VMOV     S3,R1
   \   000029F0   0xEEF8 0x1A61      VCVT.F32.U32 S3,S3
   \   000029F4   0xF8DF 0x16B4      LDR.W    R1,??v_ImageCut_227
   \   000029F8   0xED91 0x2A15      VLDR     S4,[R1, #+84]
   \   000029FC   0xF8DF 0x16AC      LDR.W    R1,??v_ImageCut_227
   \   00002A00   0xEDD1 0x2A16      VLDR     S5,[R1, #+88]
   \   00002A04   0xEE41 0x2A82      VMLA.F32 S5,S3,S4
   \   00002A08   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002A0C   0xEE01 0x1A90      VMOV     S3,R1
   \   00002A10   0xEEF8 0x1A61      VCVT.F32.U32 S3,S3
   \   00002A14   0xF8DF 0x1694      LDR.W    R1,??v_ImageCut_227
   \   00002A18   0xED91 0x2A18      VLDR     S4,[R1, #+96]
   \   00002A1C   0xEEB7 0x3A00      VMOV.F32 S6,#1.0
   \   00002A20   0xEE01 0x3A82      VMLA.F32 S6,S3,S4
   \   00002A24   0xEEC2 0x1A83      VDIV.F32 S3,S5,S6
   \   00002A28   0xEE31 0x1A61      VSUB.F32 S2,S2,S3
   \   00002A2C   0xEEF0 0x1A08      VMOV.F32 S3,#3.0
   \   00002A30   0xEE21 0x1A21      VMUL.F32 S2,S2,S3
   \   00002A34   0xEEB4 0x1A60      VCMP.F32 S2,S1
   \   00002A38   0xEEF1 0xFA10      FMSTAT   
   \   00002A3C   0xF2C0 0x829A      BLT.W    ??v_ImageCut_259
   \   00002A40   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00002A44   0xEE00 0x1A90      VMOV     S1,R1
   \   00002A48   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00002A4C   0xF8DF 0x165C      LDR.W    R1,??v_ImageCut_227
   \   00002A50   0xED91 0x1A15      VLDR     S2,[R1, #+84]
   \   00002A54   0xF8DF 0x1654      LDR.W    R1,??v_ImageCut_227
   \   00002A58   0xEDD1 0x1A16      VLDR     S3,[R1, #+88]
   \   00002A5C   0xEE40 0x1A81      VMLA.F32 S3,S1,S2
   \   00002A60   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00002A64   0xEE00 0x1A90      VMOV     S1,R1
   \   00002A68   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   00002A6C   0xF8DF 0x163C      LDR.W    R1,??v_ImageCut_227
   \   00002A70   0xED91 0x1A18      VLDR     S2,[R1, #+96]
   \   00002A74   0xEEB7 0x2A00      VMOV.F32 S4,#1.0
   \   00002A78   0xEE00 0x2A81      VMLA.F32 S4,S1,S2
   \   00002A7C   0xEEC1 0x0A82      VDIV.F32 S1,S3,S4
   \   00002A80   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002A84   0xEE01 0x1A10      VMOV     S2,R1
   \   00002A88   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00002A8C   0xF8DF 0x161C      LDR.W    R1,??v_ImageCut_227
   \   00002A90   0xEDD1 0x1A15      VLDR     S3,[R1, #+84]
   \   00002A94   0xF8DF 0x1614      LDR.W    R1,??v_ImageCut_227
   \   00002A98   0xED91 0x2A16      VLDR     S4,[R1, #+88]
   \   00002A9C   0xEE01 0x2A21      VMLA.F32 S4,S2,S3
   \   00002AA0   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002AA4   0xEE01 0x1A10      VMOV     S2,R1
   \   00002AA8   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00002AAC   0xF8DF 0x15FC      LDR.W    R1,??v_ImageCut_227
   \   00002AB0   0xEDD1 0x1A18      VLDR     S3,[R1, #+96]
   \   00002AB4   0xEEF7 0x2A00      VMOV.F32 S5,#1.0
   \   00002AB8   0xEE41 0x2A21      VMLA.F32 S5,S2,S3
   \   00002ABC   0xEE82 0x1A22      VDIV.F32 S2,S4,S5
   \   00002AC0   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   00002AC4   0xEEB0 0x1A00      VMOV.F32 S2,#2.0
   \   00002AC8   0xEE60 0x0A81      VMUL.F32 S1,S1,S2
   \   00002ACC   0xF8DF 0x15F4      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002AD0   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   00002AD4   0xEE01 0x1A10      VMOV     S2,R1
   \   00002AD8   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00002ADC   0xF8DF 0x15CC      LDR.W    R1,??v_ImageCut_227
   \   00002AE0   0xEDD1 0x1A15      VLDR     S3,[R1, #+84]
   \   00002AE4   0xF8DF 0x15C4      LDR.W    R1,??v_ImageCut_227
   \   00002AE8   0xED91 0x2A16      VLDR     S4,[R1, #+88]
   \   00002AEC   0xEE01 0x2A21      VMLA.F32 S4,S2,S3
   \   00002AF0   0xF8DF 0x15D0      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002AF4   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   00002AF8   0xEE01 0x1A10      VMOV     S2,R1
   \   00002AFC   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00002B00   0xF8DF 0x15A8      LDR.W    R1,??v_ImageCut_227
   \   00002B04   0xEDD1 0x1A18      VLDR     S3,[R1, #+96]
   \   00002B08   0xEEF7 0x2A00      VMOV.F32 S5,#1.0
   \   00002B0C   0xEE41 0x2A21      VMLA.F32 S5,S2,S3
   \   00002B10   0xEE82 0x1A22      VDIV.F32 S2,S4,S5
   \   00002B14   0xF8DF 0x15AC      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002B18   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002B1C   0xEE01 0x1A90      VMOV     S3,R1
   \   00002B20   0xEEF8 0x1A61      VCVT.F32.U32 S3,S3
   \   00002B24   0xF8DF 0x1584      LDR.W    R1,??v_ImageCut_227
   \   00002B28   0xED91 0x2A15      VLDR     S4,[R1, #+84]
   \   00002B2C   0xF8DF 0x157C      LDR.W    R1,??v_ImageCut_227
   \   00002B30   0xEDD1 0x2A16      VLDR     S5,[R1, #+88]
   \   00002B34   0xEE41 0x2A82      VMLA.F32 S5,S3,S4
   \   00002B38   0xF8DF 0x1588      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002B3C   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002B40   0xEE01 0x1A90      VMOV     S3,R1
   \   00002B44   0xEEF8 0x1A61      VCVT.F32.U32 S3,S3
   \   00002B48   0xF8DF 0x1560      LDR.W    R1,??v_ImageCut_227
   \   00002B4C   0xED91 0x2A18      VLDR     S4,[R1, #+96]
   \   00002B50   0xEEB7 0x3A00      VMOV.F32 S6,#1.0
   \   00002B54   0xEE01 0x3A82      VMLA.F32 S6,S3,S4
   \   00002B58   0xEEC2 0x1A83      VDIV.F32 S3,S5,S6
   \   00002B5C   0xEE31 0x1A61      VSUB.F32 S2,S2,S3
   \   00002B60   0xEEB4 0x1A60      VCMP.F32 S2,S1
   \   00002B64   0xEEF1 0xFA10      FMSTAT   
   \   00002B68   0xF2C0 0x8204      BLT.W    ??v_ImageCut_259
   2204                      {
   2205                          show_isWrong = 'A';
   \   00002B6C   0x2141             MOVS     R1,#+65
   \   00002B6E   0xF88D 0x100C      STRB     R1,[SP, #+12]
   2206                          float K = 255.f;
   \   00002B72   0xEDDF 0x0A02      VLDR.W   S1,??v_ImageCut_260  ;; 0x437f0000
   2207                          float var = 255.f;
   \   00002B76   0xED9F 0x0A01      VLDR.W   S0,??v_ImageCut_260  ;; 0x437f0000
   2208                          if(Sid_NaN == Rt_WhiteTurningSide)
   \   00002B7A   0xE001             B.N      ??v_ImageCut_261
   \                     ??v_ImageCut_260:
   \   00002B7C   0x437F0000         DC32     0x437f0000
   \                     ??v_ImageCut_261: (+1)
   \   00002B80   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B82   0x2D32             CMP      R5,#+50
   \   00002B84   0xD102             BNE.N    ??v_ImageCut_262
   2209                          {
   2210                              Rt_WhiteTurningSide = m_ImageAbstract.Rt_LastTurning;
   \   00002B86   0xF8DF 0x153C      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002B8A   0x7C4D             LDRB     R5,[R1, #+17]
   2211                          }
   2212                          
   2213                          if((Sid_Left == Rt_WhiteTurningSide)&&(RtAngleCondtion.RtWhiteSide_EndLine-RtAngleCondtion.RtWhiteSide_StartLine>4))
   \                     ??v_ImageCut_262: (+1)
   \   00002B8C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B8E   0x2D0A             CMP      R5,#+10
   \   00002B90   0xF040 0x80FE      BNE.W    ??v_ImageCut_263
   \   00002B94   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00002B98   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00002B9C   0x1A89             SUBS     R1,R1,R2
   \   00002B9E   0x2905             CMP      R1,#+5
   \   00002BA0   0xF2C0 0x80F6      BLT.W    ??v_ImageCut_263
   2214                          {
   2215                              float cut_number = (RtAngleCondtion.RtWhiteSide_EndLine + RtAngleCondtion.RtWhiteSide_StartLine)/2 - (RtAngleCondtion.RtWhiteSide_StartLine + m_ImageAbstract.Start_Y_Position)/2;
   \   00002BA4   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   00002BA8   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002BAC   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00002BB0   0x2102             MOVS     R1,#+2
   \   00002BB2   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00002BB6   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002BBA   0xF8DF 0x2508      LDR.W    R2,??v_ImageCut_227+0x18
   \   00002BBE   0xF892 0x21D0      LDRB     R2,[R2, #+464]
   \   00002BC2   0xFA52 0xF181      UXTAB    R1,R2,R1
   \   00002BC6   0x2202             MOVS     R2,#+2
   \   00002BC8   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00002BCC   0x1A40             SUBS     R0,R0,R1
   \   00002BCE   0xEE00 0x0A90      VMOV     S1,R0
   \   00002BD2   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   2216                              float cut_son = m_ImageAbstract.Right[(RtAngleCondtion.RtWhiteSide_EndLine + RtAngleCondtion.RtWhiteSide_StartLine)/2]
   2217                                            - m_ImageAbstract.Right[(RtAngleCondtion.RtWhiteSide_StartLine + m_ImageAbstract.Start_Y_Position)/2];
   \   00002BD6   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   00002BDA   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002BDE   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00002BE2   0x2102             MOVS     R1,#+2
   \   00002BE4   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00002BE8   0xF8DF 0x14D8      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002BEC   0x1840             ADDS     R0,R0,R1
   \   00002BEE   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   00002BF2   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002BF6   0xF8DF 0x24CC      LDR.W    R2,??v_ImageCut_227+0x18
   \   00002BFA   0xF892 0x21D0      LDRB     R2,[R2, #+464]
   \   00002BFE   0xFA52 0xF181      UXTAB    R1,R2,R1
   \   00002C02   0x2202             MOVS     R2,#+2
   \   00002C04   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00002C08   0xF8DF 0x24B8      LDR.W    R2,??v_ImageCut_227+0x18
   \   00002C0C   0x1889             ADDS     R1,R1,R2
   \   00002C0E   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   00002C12   0x1A40             SUBS     R0,R0,R1
   \   00002C14   0xEE01 0x0A10      VMOV     S2,R0
   \   00002C18   0xEEB8 0x1AC1      VCVT.F32.S32 S2,S2
   2218                              K = cut_son / cut_number;//根据纵轴决定横轴
   \   00002C1C   0xEEC1 0x0A20      VDIV.F32 S1,S2,S1
   2219                              float B = m_ImageAbstract.Right[(RtAngleCondtion.RtWhiteSide_StartLine + m_ImageAbstract.Start_Y_Position)/2]
   2220                                      - K*(RtAngleCondtion.RtWhiteSide_StartLine + m_ImageAbstract.Start_Y_Position)/2;//m_ImageAbstract.Left[];                
   \   00002C20   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00002C24   0xF8DF 0x149C      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002C28   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002C2C   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00002C30   0x2102             MOVS     R1,#+2
   \   00002C32   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00002C36   0xF8DF 0x148C      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002C3A   0x1840             ADDS     R0,R0,R1
   \   00002C3C   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   00002C40   0xEE01 0x0A10      VMOV     S2,R0
   \   00002C44   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00002C48   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00002C4C   0xF8DF 0x1474      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002C50   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002C54   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00002C58   0xEE01 0x0A90      VMOV     S3,R0
   \   00002C5C   0xEEF8 0x1AE1      VCVT.F32.S32 S3,S3
   \   00002C60   0xEE61 0x1AA0      VMUL.F32 S3,S3,S1
   \   00002C64   0xEEB0 0x2A00      VMOV.F32 S4,#2.0
   \   00002C68   0xEEC1 0x1A82      VDIV.F32 S3,S3,S4
   \   00002C6C   0xEE31 0x1A61      VSUB.F32 S2,S2,S3
   2221                              uint32 counter = 0;                    
   \   00002C70   0x2000             MOVS     R0,#+0
   2222                              for(uint8 inter = (m_ImageAbstract.Start_Y_Position + 2);
   \   00002C72   0xF8DF 0x1450      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002C76   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002C7A   0x1C89             ADDS     R1,R1,#+2
   \   00002C7C   0xE03C             B.N      ??v_ImageCut_264
   \                     ??v_ImageCut_258: (+1)
   \   00002C7E   0xF8DF 0x1444      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002C82   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   00002C86   0xF88D 0x1009      STRB     R1,[SP, #+9]
   \   00002C8A   0xF8DF 0x1438      LDR.W    R1,??v_ImageCut_227+0x18
   \   00002C8E   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002C92   0xF88D 0x1008      STRB     R1,[SP, #+8]
   \   00002C96   0x2107             MOVS     R1,#+7
   \   00002C98   0xF88D 0x100D      STRB     R1,[SP, #+13]
   \   00002C9C   0xE1DB             B.N      ??v_ImageCut_265
   2223                                  inter < (m_ImageAbstract.Last_Y_Position - 2);inter++)
   2224                              {
   2225                                  if(255 != m_ImageAbstract.Right[inter])
   \                     ??v_ImageCut_266: (+1)
   \   00002C9E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002CA0   0xF8DF 0x2420      LDR.W    R2,??v_ImageCut_227+0x18
   \   00002CA4   0x188A             ADDS     R2,R1,R2
   \   00002CA6   0xF892 0x2068      LDRB     R2,[R2, #+104]
   \   00002CAA   0x2AFF             CMP      R2,#+255
   \   00002CAC   0xD023             BEQ.N    ??v_ImageCut_267
   2226                                  {
   2227                                      counter ++;
   \   00002CAE   0x1C40             ADDS     R0,R0,#+1
   2228                                      float ThinkGoodNumber = inter * K + B;
   \   00002CB0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002CB2   0xEE01 0x1A90      VMOV     S3,R1
   \   00002CB6   0xEEB8 0x2A61      VCVT.F32.U32 S4,S3
   \   00002CBA   0xEEF0 0x1A41      VMOV.F32 S3,S2
   \   00002CBE   0xEE42 0x1A20      VMLA.F32 S3,S4,S1
   2229                                      var += (float)((ThinkGoodNumber - m_ImageAbstract.Right[inter])*(ThinkGoodNumber - m_ImageAbstract.Right[inter]));
   \   00002CC2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002CC4   0xF8DF 0x23FC      LDR.W    R2,??v_ImageCut_227+0x18
   \   00002CC8   0x188A             ADDS     R2,R1,R2
   \   00002CCA   0xF892 0x2068      LDRB     R2,[R2, #+104]
   \   00002CCE   0xEE02 0x2A10      VMOV     S4,R2
   \   00002CD2   0xEEB8 0x2A42      VCVT.F32.U32 S4,S4
   \   00002CD6   0xEE31 0x2AC2      VSUB.F32 S4,S3,S4
   \   00002CDA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002CDC   0xF8DF 0x23E4      LDR.W    R2,??v_ImageCut_227+0x18
   \   00002CE0   0x188A             ADDS     R2,R1,R2
   \   00002CE2   0xF892 0x2068      LDRB     R2,[R2, #+104]
   \   00002CE6   0xEE02 0x2A90      VMOV     S5,R2
   \   00002CEA   0xEEF8 0x2A62      VCVT.F32.U32 S5,S5
   \   00002CEE   0xEE71 0x1AE2      VSUB.F32 S3,S3,S5
   \   00002CF2   0xEE02 0x0A21      VMLA.F32 S0,S4,S3
   2230                                  }
   2231                              }
   \                     ??v_ImageCut_267: (+1)
   \   00002CF6   0x1C49             ADDS     R1,R1,#+1
   \                     ??v_ImageCut_264: (+1)
   \   00002CF8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002CFA   0xF8DF 0x23C8      LDR.W    R2,??v_ImageCut_227+0x18
   \   00002CFE   0xF892 0x21D1      LDRB     R2,[R2, #+465]
   \   00002D02   0x1E92             SUBS     R2,R2,#+2
   \   00002D04   0x4291             CMP      R1,R2
   \   00002D06   0xDBCA             BLT.N    ??v_ImageCut_266
   2232                              var /= counter;
   \   00002D08   0xEE01 0x0A10      VMOV     S2,R0
   \   00002D0C   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00002D10   0xEE80 0x0A01      VDIV.F32 S0,S0,S2
   2233                              if((__F_ABS(var) >= 8.f)||(__F_ABS(K) >= 2.f))
   \   00002D14   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00002D18   0xEEF1 0xFA10      FMSTAT   
   \   00002D1C   0xD502             BPL.N    ??v_ImageCut_268
   \   00002D1E   0xEEB1 0x1A40      VNEG.F32 S2,S0
   \   00002D22   0xE001             B.N      ??v_ImageCut_269
   \                     ??v_ImageCut_268: (+1)
   \   00002D24   0xEEB0 0x1A40      VMOV.F32 S2,S0
   \                     ??v_ImageCut_269: (+1)
   \   00002D28   0xEEF2 0x1A00      VMOV.F32 S3,#8.0
   \   00002D2C   0xEEB4 0x1A61      VCMP.F32 S2,S3
   \   00002D30   0xEEF1 0xFA10      FMSTAT   
   \   00002D34   0xDA10             BGE.N    ??v_ImageCut_270
   \   00002D36   0xEEF5 0x0A40      VCMP.F32 S1,#0.0
   \   00002D3A   0xEEF1 0xFA10      FMSTAT   
   \   00002D3E   0xD502             BPL.N    ??v_ImageCut_271
   \   00002D40   0xEEB1 0x1A60      VNEG.F32 S2,S1
   \   00002D44   0xE001             B.N      ??v_ImageCut_272
   \                     ??v_ImageCut_271: (+1)
   \   00002D46   0xEEB0 0x1A60      VMOV.F32 S2,S1
   \                     ??v_ImageCut_272: (+1)
   \   00002D4A   0xEEF0 0x1A00      VMOV.F32 S3,#2.0
   \   00002D4E   0xEEB4 0x1A61      VCMP.F32 S2,S3
   \   00002D52   0xEEF1 0xFA10      FMSTAT   
   \   00002D56   0xDB0C             BLT.N    ??v_ImageCut_273
   2234                              {//不满足?
   2235                                  show_isWrong = 'S';
   \                     ??v_ImageCut_270: (+1)
   \   00002D58   0x2053             MOVS     R0,#+83
   \   00002D5A   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2236                                  flag_Rt_hasfound = 0;//第一次直角标志没找到
   \   00002D5E   0x2000             MOVS     R0,#+0
   2237                                  m_ImageAbstract.Rt_Angle_End_Y = RtAngleCondtion.RtWhiteSide_EndLine;
   \   00002D60   0x49D8             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002D62   0xF89D 0x2009      LDRB     R2,[SP, #+9]
   \   00002D66   0x74CA             STRB     R2,[R1, #+19]
   2238                                  m_ImageAbstract.Rt_Angle_Start_Y = RtAngleCondtion.RtWhiteSide_StartLine;
   \   00002D68   0x49D6             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002D6A   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00002D6E   0x748A             STRB     R2,[R1, #+18]
   \   00002D70   0xE00E             B.N      ??v_ImageCut_263
   2239                                  //SideChangeOccur = 6;
   2240                              }
   2241                              else
   2242                              {
   2243                                  show_isWrong = 'D';
   \                     ??v_ImageCut_273: (+1)
   \   00002D72   0x2044             MOVS     R0,#+68
   \   00002D74   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2244                                  flag_Rt_hasfound = 1;
   \   00002D78   0x2001             MOVS     R0,#+1
   2245                                  m_ImageAbstract.Rt_Angle_End_Y = RtAngleCondtion.RtWhiteSide_EndLine;
   \   00002D7A   0x49D2             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002D7C   0xF89D 0x2009      LDRB     R2,[SP, #+9]
   \   00002D80   0x74CA             STRB     R2,[R1, #+19]
   2246                                  m_ImageAbstract.Rt_Angle_Start_Y = RtAngleCondtion.RtWhiteSide_StartLine;//(RtAngleCondtion.RtWhiteSide_EndLine-RtAngleCondtion.RtWhiteSide_StartLine>4)
   \   00002D82   0x49D0             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002D84   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00002D88   0x748A             STRB     R2,[R1, #+18]
   2247                                  SideChangeOccur = 5;
   \   00002D8A   0x2105             MOVS     R1,#+5
   \   00002D8C   0xF88D 0x100D      STRB     R1,[SP, #+13]
   2248                              }
   2249                          }
   2250                          if((Sid_Right == Rt_WhiteTurningSide)&&(RtAngleCondtion.RtWhiteSide_EndLine-RtAngleCondtion.RtWhiteSide_StartLine>4))
   \                     ??v_ImageCut_263: (+1)
   \   00002D90   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D92   0x2D14             CMP      R5,#+20
   \   00002D94   0xF040 0x80E5      BNE.W    ??v_ImageCut_274
   \   00002D98   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00002D9C   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00002DA0   0x1A89             SUBS     R1,R1,R2
   \   00002DA2   0x2905             CMP      R1,#+5
   \   00002DA4   0xF2C0 0x80DD      BLT.W    ??v_ImageCut_274
   2251                          {
   2252                              float cut_number = (RtAngleCondtion.RtWhiteSide_EndLine + RtAngleCondtion.RtWhiteSide_StartLine)/2
   2253                                               - (RtAngleCondtion.RtWhiteSide_StartLine + m_ImageAbstract.Start_Y_Position)/2;
   \   00002DA8   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   00002DAC   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002DB0   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00002DB4   0x2102             MOVS     R1,#+2
   \   00002DB6   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00002DBA   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002DBE   0x4AC1             LDR.N    R2,??v_ImageCut_227+0x18
   \   00002DC0   0xF892 0x21D0      LDRB     R2,[R2, #+464]
   \   00002DC4   0xFA52 0xF181      UXTAB    R1,R2,R1
   \   00002DC8   0x2202             MOVS     R2,#+2
   \   00002DCA   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00002DCE   0x1A40             SUBS     R0,R0,R1
   \   00002DD0   0xEE00 0x0A90      VMOV     S1,R0
   \   00002DD4   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   2254                              float cut_son = m_ImageAbstract.Left[(RtAngleCondtion.RtWhiteSide_EndLine + RtAngleCondtion.RtWhiteSide_StartLine)/2]
   2255                                            - m_ImageAbstract.Left[(RtAngleCondtion.RtWhiteSide_StartLine + m_ImageAbstract.Start_Y_Position)/2];
   \   00002DD8   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   00002DDC   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002DE0   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00002DE4   0x2102             MOVS     R1,#+2
   \   00002DE6   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00002DEA   0x49B6             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002DEC   0x1840             ADDS     R0,R0,R1
   \   00002DEE   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00002DF2   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00002DF6   0x4AB3             LDR.N    R2,??v_ImageCut_227+0x18
   \   00002DF8   0xF892 0x21D0      LDRB     R2,[R2, #+464]
   \   00002DFC   0xFA52 0xF181      UXTAB    R1,R2,R1
   \   00002E00   0x2202             MOVS     R2,#+2
   \   00002E02   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00002E06   0x4AAF             LDR.N    R2,??v_ImageCut_227+0x18
   \   00002E08   0x1889             ADDS     R1,R1,R2
   \   00002E0A   0xF891 0x102C      LDRB     R1,[R1, #+44]
   \   00002E0E   0x1A40             SUBS     R0,R0,R1
   \   00002E10   0xEE01 0x0A10      VMOV     S2,R0
   \   00002E14   0xEEB8 0x1AC1      VCVT.F32.S32 S2,S2
   2256                              K = cut_son / cut_number;//根据纵轴决定横轴
   \   00002E18   0xEEC1 0x0A20      VDIV.F32 S1,S2,S1
   2257                              float B = m_ImageAbstract.Left[(RtAngleCondtion.RtWhiteSide_StartLine + m_ImageAbstract.Start_Y_Position)/2]
   2258                                      - K*(RtAngleCondtion.RtWhiteSide_StartLine + m_ImageAbstract.Start_Y_Position)/2;//m_ImageAbstract.Left[];                
   \   00002E1C   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00002E20   0x49A8             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002E22   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002E26   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00002E2A   0x2102             MOVS     R1,#+2
   \   00002E2C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00002E30   0x49A4             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002E32   0x1840             ADDS     R0,R0,R1
   \   00002E34   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00002E38   0xEE01 0x0A10      VMOV     S2,R0
   \   00002E3C   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00002E40   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00002E44   0x499F             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002E46   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002E4A   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   00002E4E   0xEE01 0x0A90      VMOV     S3,R0
   \   00002E52   0xEEF8 0x1AE1      VCVT.F32.S32 S3,S3
   \   00002E56   0xEE61 0x1AA0      VMUL.F32 S3,S3,S1
   \   00002E5A   0xEEB0 0x2A00      VMOV.F32 S4,#2.0
   \   00002E5E   0xEEC1 0x1A82      VDIV.F32 S3,S3,S4
   \   00002E62   0xEE31 0x1A61      VSUB.F32 S2,S2,S3
   2259                              uint32 counter = 0; 
   \   00002E66   0x2000             MOVS     R0,#+0
   2260                              for(uint8 inter = (m_ImageAbstract.Start_Y_Position + 2);
   \   00002E68   0x4996             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002E6A   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002E6E   0x1C89             ADDS     R1,R1,#+2
   \   00002E70   0xE029             B.N      ??v_ImageCut_275
   2261                                  inter < (m_ImageAbstract.Last_Y_Position - 2);inter++)
   2262                              {
   2263                                  if(255 != m_ImageAbstract.Left[inter])
   \                     ??v_ImageCut_276: (+1)
   \   00002E72   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002E74   0x4A93             LDR.N    R2,??v_ImageCut_227+0x18
   \   00002E76   0x188A             ADDS     R2,R1,R2
   \   00002E78   0xF892 0x202C      LDRB     R2,[R2, #+44]
   \   00002E7C   0x2AFF             CMP      R2,#+255
   \   00002E7E   0xD021             BEQ.N    ??v_ImageCut_277
   2264                                  {
   2265                                      counter ++;
   \   00002E80   0x1C40             ADDS     R0,R0,#+1
   2266                                      float ThinkGoodNumber = inter * K + B;
   \   00002E82   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002E84   0xEE01 0x1A90      VMOV     S3,R1
   \   00002E88   0xEEB8 0x2A61      VCVT.F32.U32 S4,S3
   \   00002E8C   0xEEF0 0x1A41      VMOV.F32 S3,S2
   \   00002E90   0xEE42 0x1A20      VMLA.F32 S3,S4,S1
   2267                                      var += (float)((ThinkGoodNumber - m_ImageAbstract.Left[inter])*(ThinkGoodNumber - m_ImageAbstract.Left[inter]));
   \   00002E94   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002E96   0x4A8B             LDR.N    R2,??v_ImageCut_227+0x18
   \   00002E98   0x188A             ADDS     R2,R1,R2
   \   00002E9A   0xF892 0x202C      LDRB     R2,[R2, #+44]
   \   00002E9E   0xEE02 0x2A10      VMOV     S4,R2
   \   00002EA2   0xEEB8 0x2A42      VCVT.F32.U32 S4,S4
   \   00002EA6   0xEE31 0x2AC2      VSUB.F32 S4,S3,S4
   \   00002EAA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002EAC   0x4A85             LDR.N    R2,??v_ImageCut_227+0x18
   \   00002EAE   0x188A             ADDS     R2,R1,R2
   \   00002EB0   0xF892 0x202C      LDRB     R2,[R2, #+44]
   \   00002EB4   0xEE02 0x2A90      VMOV     S5,R2
   \   00002EB8   0xEEF8 0x2A62      VCVT.F32.U32 S5,S5
   \   00002EBC   0xEE71 0x1AE2      VSUB.F32 S3,S3,S5
   \   00002EC0   0xEE02 0x0A21      VMLA.F32 S0,S4,S3
   2268                                  }
   2269                              }
   \                     ??v_ImageCut_277: (+1)
   \   00002EC4   0x1C49             ADDS     R1,R1,#+1
   \                     ??v_ImageCut_275: (+1)
   \   00002EC6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00002EC8   0x4A7E             LDR.N    R2,??v_ImageCut_227+0x18
   \   00002ECA   0xF892 0x21D1      LDRB     R2,[R2, #+465]
   \   00002ECE   0x1E92             SUBS     R2,R2,#+2
   \   00002ED0   0x4291             CMP      R1,R2
   \   00002ED2   0xDBCE             BLT.N    ??v_ImageCut_276
   2270                              var /= counter;
   \   00002ED4   0xEE01 0x0A10      VMOV     S2,R0
   \   00002ED8   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   00002EDC   0xEE80 0x0A01      VDIV.F32 S0,S0,S2
   2271                              if((__F_ABS(var) >= 12.f)||(__F_ABS(K) >= 2.f))
   \   00002EE0   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00002EE4   0xEEF1 0xFA10      FMSTAT   
   \   00002EE8   0xD502             BPL.N    ??v_ImageCut_278
   \   00002EEA   0xEEB1 0x1A40      VNEG.F32 S2,S0
   \   00002EEE   0xE001             B.N      ??v_ImageCut_279
   \                     ??v_ImageCut_278: (+1)
   \   00002EF0   0xEEB0 0x1A40      VMOV.F32 S2,S0
   \                     ??v_ImageCut_279: (+1)
   \   00002EF4   0xEEF2 0x1A08      VMOV.F32 S3,#12.0
   \   00002EF8   0xEEB4 0x1A61      VCMP.F32 S2,S3
   \   00002EFC   0xEEF1 0xFA10      FMSTAT   
   \   00002F00   0xDA10             BGE.N    ??v_ImageCut_280
   \   00002F02   0xEEF5 0x0A40      VCMP.F32 S1,#0.0
   \   00002F06   0xEEF1 0xFA10      FMSTAT   
   \   00002F0A   0xD502             BPL.N    ??v_ImageCut_281
   \   00002F0C   0xEEB1 0x1A60      VNEG.F32 S2,S1
   \   00002F10   0xE001             B.N      ??v_ImageCut_282
   \                     ??v_ImageCut_281: (+1)
   \   00002F12   0xEEB0 0x1A60      VMOV.F32 S2,S1
   \                     ??v_ImageCut_282: (+1)
   \   00002F16   0xEEF0 0x1A00      VMOV.F32 S3,#2.0
   \   00002F1A   0xEEB4 0x1A61      VCMP.F32 S2,S3
   \   00002F1E   0xEEF1 0xFA10      FMSTAT   
   \   00002F22   0xDB0F             BLT.N    ??v_ImageCut_283
   2272                              {
   2273                                  show_isWrong = 'S';
   \                     ??v_ImageCut_280: (+1)
   \   00002F24   0x2053             MOVS     R0,#+83
   \   00002F26   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2274                                  flag_Rt_hasfound = 0;
   \   00002F2A   0x2000             MOVS     R0,#+0
   2275                                  m_ImageAbstract.Rt_Angle_End_Y = RtAngleCondtion.RtWhiteSide_EndLine;
   \   00002F2C   0x4965             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002F2E   0xF89D 0x2009      LDRB     R2,[SP, #+9]
   \   00002F32   0x74CA             STRB     R2,[R1, #+19]
   2276                                  m_ImageAbstract.Rt_Angle_Start_Y = RtAngleCondtion.RtWhiteSide_StartLine;
   \   00002F34   0x4963             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002F36   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00002F3A   0x748A             STRB     R2,[R1, #+18]
   2277                                  SideChangeOccur = 1;
   \   00002F3C   0x2101             MOVS     R1,#+1
   \   00002F3E   0xF88D 0x100D      STRB     R1,[SP, #+13]
   \   00002F42   0xE00E             B.N      ??v_ImageCut_274
   2278                              }
   2279                              else
   2280                              {
   2281                                  show_isWrong = 'D';
   \                     ??v_ImageCut_283: (+1)
   \   00002F44   0x2044             MOVS     R0,#+68
   \   00002F46   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2282                                  flag_Rt_hasfound = 1;
   \   00002F4A   0x2001             MOVS     R0,#+1
   2283                                  m_ImageAbstract.Rt_Angle_End_Y = RtAngleCondtion.RtWhiteSide_EndLine;
   \   00002F4C   0x495D             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002F4E   0xF89D 0x2009      LDRB     R2,[SP, #+9]
   \   00002F52   0x74CA             STRB     R2,[R1, #+19]
   2284                                  m_ImageAbstract.Rt_Angle_Start_Y = RtAngleCondtion.RtWhiteSide_StartLine;
   \   00002F54   0x495B             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002F56   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00002F5A   0x748A             STRB     R2,[R1, #+18]
   2285                                  SideChangeOccur = 2;
   \   00002F5C   0x2102             MOVS     R1,#+2
   \   00002F5E   0xF88D 0x100D      STRB     R1,[SP, #+13]
   2286                              }
   2287                          }
   2288                          m_ImageAbstract.Rt_K_Var = K;
   \                     ??v_ImageCut_274: (+1)
   \   00002F62   0x4958             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002F64   0xEDC1 0x0A07      VSTR     S1,[R1, #+28]
   2289                          m_ImageAbstract.Rt_Var = var;
   \   00002F68   0x4956             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002F6A   0xED81 0x0A08      VSTR     S0,[R1, #+32]
   2290                          m_ImageAbstract.Rt_LastTurning = Rt_WhiteTurningSide;
   \   00002F6E   0x4955             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002F70   0x744D             STRB     R5,[R1, #+17]
   \   00002F72   0xE05D             B.N      ??v_ImageCut_284
   2291                      }
   2292                      else
   2293                      {
   2294                          RtAngleCondtion.RtWhiteSide_EndLine = m_ImageAbstract.Last_Y_Position;
   \                     ??v_ImageCut_259: (+1)
   \   00002F74   0x4953             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002F76   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   00002F7A   0xF88D 0x1009      STRB     R1,[SP, #+9]
   2295                          RtAngleCondtion.RtWhiteSide_StartLine = m_ImageAbstract.Start_Y_Position;
   \   00002F7E   0x4951             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002F80   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00002F84   0xF88D 0x1008      STRB     R1,[SP, #+8]
   2296                          SideChangeOccur = 3;
   \   00002F88   0x2103             MOVS     R1,#+3
   \   00002F8A   0xF88D 0x100D      STRB     R1,[SP, #+13]
   2297                              m_ImageAbstract.Rt_Angle_error = 0;
   \   00002F8E   0x494D             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002F90   0x2200             MOVS     R2,#+0
   \   00002F92   0x828A             STRH     R2,[R1, #+20]
   2298                              if(!((RtAngleCondtion.RtWhiteSide_EndLine - RtAngleCondtion.RtWhiteSide_StartLine)>=1*length/2))
   \   00002F94   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \   00002F98   0xEE60 0x0A20      VMUL.F32 S1,S0,S1
   \   00002F9C   0xEEB0 0x1A00      VMOV.F32 S2,#2.0
   \   00002FA0   0xEEC0 0x0A81      VDIV.F32 S1,S1,S2
   \   00002FA4   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00002FA8   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00002FAC   0x1A89             SUBS     R1,R1,R2
   \   00002FAE   0xEE01 0x1A10      VMOV     S2,R1
   \   00002FB2   0xEEB8 0x1AC1      VCVT.F32.S32 S2,S2
   \   00002FB6   0xEEB4 0x1A60      VCMP.F32 S2,S1
   \   00002FBA   0xEEF1 0xFA10      FMSTAT   
   \   00002FBE   0xDA02             BGE.N    ??v_ImageCut_285
   2299                              {m_ImageAbstract.Rt_Angle_error = 0x01;}
   \   00002FC0   0x4940             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002FC2   0x2201             MOVS     R2,#+1
   \   00002FC4   0x828A             STRH     R2,[R1, #+20]
   2300                              if(!((RtAngleCondtion.RtWhiteSide_EndLine - RtAngleCondtion.RtWhiteSide_StartLine)<=3*length/2))  
   \                     ??v_ImageCut_285: (+1)
   \   00002FC6   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00002FCA   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00002FCE   0x1A89             SUBS     R1,R1,R2
   \   00002FD0   0xEE00 0x1A90      VMOV     S1,R1
   \   00002FD4   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00002FD8   0xEEB0 0x1A08      VMOV.F32 S2,#3.0
   \   00002FDC   0xEE20 0x1A01      VMUL.F32 S2,S0,S2
   \   00002FE0   0xEEF0 0x1A00      VMOV.F32 S3,#2.0
   \   00002FE4   0xEE81 0x1A21      VDIV.F32 S2,S2,S3
   \   00002FE8   0xEEB4 0x1A60      VCMP.F32 S2,S1
   \   00002FEC   0xEEF1 0xFA10      FMSTAT   
   \   00002FF0   0xDA02             BGE.N    ??v_ImageCut_286
   2301                              {m_ImageAbstract.Rt_Angle_error = 0x02;}
   \   00002FF2   0x4934             LDR.N    R1,??v_ImageCut_227+0x18
   \   00002FF4   0x2202             MOVS     R2,#+2
   \   00002FF6   0x828A             STRH     R2,[R1, #+20]
   2302                              if(!((RtAngleCondtion.RtStepTwoLostWhiteCounter) < length/10))
   \                     ??v_ImageCut_286: (+1)
   \   00002FF8   0xEEF2 0x0A04      VMOV.F32 S1,#10.0
   \   00002FFC   0xEEC0 0x0A20      VDIV.F32 S1,S0,S1
   \   00003000   0xF89D 0x100A      LDRB     R1,[SP, #+10]
   \   00003004   0xEE01 0x1A10      VMOV     S2,R1
   \   00003008   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   0000300C   0xEEB4 0x1A60      VCMP.F32 S2,S1
   \   00003010   0xEEF1 0xFA10      FMSTAT   
   \   00003014   0xD402             BMI.N    ??v_ImageCut_287
   2303                              {m_ImageAbstract.Rt_Angle_error = 0x04;}
   \   00003016   0x492B             LDR.N    R1,??v_ImageCut_227+0x18
   \   00003018   0x2204             MOVS     R2,#+4
   \   0000301A   0x828A             STRH     R2,[R1, #+20]
   2304                              if(!(length > 6))
   \                     ??v_ImageCut_287: (+1)
   \   0000301C   0xEDDF 0x0A2A      VLDR.W   S1,??v_ImageCut_227+0x1C  ;; 0x40c00001
   \   00003020   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00003024   0xEEF1 0xFA10      FMSTAT   
   \   00003028   0xDA02             BGE.N    ??v_ImageCut_284
   2305                              {m_ImageAbstract.Rt_Angle_error = 0x08;}
   \   0000302A   0x4926             LDR.N    R1,??v_ImageCut_227+0x18
   \   0000302C   0x2208             MOVS     R2,#+8
   \   0000302E   0x828A             STRH     R2,[R1, #+20]
   2306                      }
   2307                      }while(0);
   \                     ??v_ImageCut_284: (+1)
   \   00003030   0xE011             B.N      ??v_ImageCut_265
   2308                  }
   2309                  else
   2310                  {
   2311                      if(1 == m_ImageAbstract.RtAngle_isLasting)
   \                     ??v_ImageCut_256: (+1)
   \   00003032   0x4924             LDR.N    R1,??v_ImageCut_227+0x18
   \   00003034   0xF891 0x11E0      LDRB     R1,[R1, #+480]
   \   00003038   0x2901             CMP      R1,#+1
   \   0000303A   0xD10C             BNE.N    ??v_ImageCut_265
   2312                      {
   2313                          RtAngleCondtion.RtWhiteSide_EndLine = m_ImageAbstract.Last_Y_Position;
   \   0000303C   0x4921             LDR.N    R1,??v_ImageCut_227+0x18
   \   0000303E   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   00003042   0xF88D 0x1009      STRB     R1,[SP, #+9]
   2314                          RtAngleCondtion.RtWhiteSide_StartLine = m_ImageAbstract.Start_Y_Position;
   \   00003046   0x491F             LDR.N    R1,??v_ImageCut_227+0x18
   \   00003048   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   0000304C   0xF88D 0x1008      STRB     R1,[SP, #+8]
   2315                          SideChangeOccur = 4;
   \   00003050   0x2104             MOVS     R1,#+4
   \   00003052   0xF88D 0x100D      STRB     R1,[SP, #+13]
   2316                      }
   2317                  }
   2318                  
   2319                  if(1 == flag_Rt_hasfound)
   \                     ??v_ImageCut_265: (+1)
   \   00003056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003058   0x2801             CMP      R0,#+1
   \   0000305A   0xD103             BNE.N    ??v_ImageCut_288
   2320                  {
   2321                      m_ImageAbstract.RtAngle_isLasting = 1;//如若isLasting第一次找到
   \   0000305C   0x4819             LDR.N    R0,??v_ImageCut_227+0x18
   \   0000305E   0x2101             MOVS     R1,#+1
   \   00003060   0xF880 0x11E0      STRB     R1,[R0, #+480]
   2322                  }
   2323                  
   2324                  uint8 isTime2BackAngel = 0;
   \                     ??v_ImageCut_288: (+1)
   \   00003064   0x2000             MOVS     R0,#+0
   \   00003066   0xF88D 0x000F      STRB     R0,[SP, #+15]
   2325                  do
   2326                  {
   2327                      //break;
   2328                      if(1 == m_ImageAbstract.RtAngle_isLasting)
   \   0000306A   0x4816             LDR.N    R0,??v_ImageCut_227+0x18
   \   0000306C   0xF890 0x01E0      LDRB     R0,[R0, #+480]
   \   00003070   0x2801             CMP      R0,#+1
   \   00003072   0xF040 0x82A4      BNE.W    ??v_ImageCut_289
   2329                      {
   2330                          float change_X = 0.f;
   \   00003076   0xED9F 0x8A15      VLDR.W   S16,??v_ImageCut_227+0x20  ;; 0x0
   2331                          if(Sid_NaN == Rt_WhiteTurningSide)
   \   0000307A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000307C   0x2D32             CMP      R5,#+50
   \   0000307E   0xD101             BNE.N    ??v_ImageCut_290
   2332                          {
   2333                              /*becauseThisOutOfTheBlackRtAngle = 'Z';*///全局Zero情况
   2334                              Rt_WhiteTurningSide = m_ImageAbstract.Rt_LastTurning;//这里也做一个修补
   \   00003080   0x4810             LDR.N    R0,??v_ImageCut_227+0x18
   \   00003082   0x7C45             LDRB     R5,[R0, #+17]
   2335                          }//由于出现Zero的情况，或许会导致这些问题的出现
   2336                          
   2337                          uint8 choose_theLast = m_ImageAbstract.Last_Y_Position;
   \                     ??v_ImageCut_290: (+1)
   \   00003084   0x480F             LDR.N    R0,??v_ImageCut_227+0x18
   \   00003086   0xF890 0x01D1      LDRB     R0,[R0, #+465]
   2338                          uint8 end_findLeftOrRight = (m_ImageAbstract.Last_Y_Position + RtAngleCondtion.RtWhiteSide_StartLine)/2;/*(m_ImageAbstract.Last_Y_Position+(m_ImageAbstract.Last_Y_Position + RtAngleCondtion.RtWhiteSide_StartLine)/2)/2*/ //;
   \   0000308A   0x490E             LDR.N    R1,??v_ImageCut_227+0x18
   \   0000308C   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   00003090   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00003094   0x1851             ADDS     R1,R2,R1
   \   00003096   0x2202             MOVS     R2,#+2
   \   00003098   0xFB91 0xF6F2      SDIV     R6,R1,R2
   2339          #define         DE_CalTheBetween(y)             (((__ABS(m_ImageAbstract.Left[y]\
   2340                                                        -m_ImageAbstract.Right[y])\
   2341                                                        <=1.1*m_ImageAbstract.width[y])\
   2342                                                      &&\
   2343                                                          (__ABS(m_ImageAbstract.Left[y]\
   2344                                                        -m_ImageAbstract.Right[y])\
   2345                                                        >=0.9*m_ImageAbstract.width[y]))\
   2346                                                      &&(255 != m_ImageAbstract.Left[y])\
   2347                                                      &&(255 != m_ImageAbstract.Right[y]))
   2348                                                              
   2349                          
   2350          
   2351                          if(1 == TurningBeacauseVeryLittle.isHappened)
   \   0000309C   0xF89D 0x1027      LDRB     R1,[SP, #+39]
   \   000030A0   0x2901             CMP      R1,#+1
   \   000030A2   0xD115             BNE.N    ??v_ImageCut_291
   2352                          {
   2353                              isTime2BackAngel = 1;break;
   \   000030A4   0x2001             MOVS     R0,#+1
   \   000030A6   0xF88D 0x000F      STRB     R0,[SP, #+15]
   \   000030AA   0xE288             B.N      ??v_ImageCut_292
   \                     ??v_ImageCut_227:
   \   000030AC   0x........         DC32     m_Control
   \   000030B0   0xEB851EB8         DC32     0xeb851eb8
   \   000030B4   0x3FDEB851         DC32     0x3fdeb851
   \   000030B8   0x9999999A         DC32     0x9999999a
   \   000030BC   0x3FE99999         DC32     0x3fe99999
   \   000030C0   0x........         DC32     m_ImageTesting
   \   000030C4   0x........         DC32     m_ImageAbstract
   \   000030C8   0x40C00001         DC32     0x40c00001
   \   000030CC   0x00000000         DC32     0x0
   2354                              //end_findLeftOrRight = (TurningBeacauseVeryLittle.y_end + m_ImageAbstract.Start_Y_Position)/2;
   2355                              //choose_theLast = TurningBeacauseVeryLittle.y_end;
   2356                              //isTime2BackAngel = 1;break;
   2357                          }
   2358                          uint8 endJudgeLine =(choose_theLast+
   2359                                              (choose_theLast+
   2360                                              (choose_theLast+end_findLeftOrRight)/2)/2)/2;
   \                     ??v_ImageCut_291: (+1)
   \   000030D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000030D2   0xFA56 0xF180      UXTAB    R1,R6,R0
   \   000030D6   0x2202             MOVS     R2,#+2
   \   000030D8   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000030DC   0xFA51 0xF180      UXTAB    R1,R1,R0
   \   000030E0   0x2202             MOVS     R2,#+2
   \   000030E2   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000030E6   0xFA51 0xF080      UXTAB    R0,R1,R0
   \   000030EA   0x2102             MOVS     R1,#+2
   \   000030EC   0xFB90 0xF7F1      SDIV     R7,R0,R1
   2361                          if(Sid_Right == Rt_WhiteTurningSide)
   \   000030F0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000030F2   0x2D14             CMP      R5,#+20
   \   000030F4   0xD131             BNE.N    ??v_ImageCut_293
   2362                          {//=========================================================
   2363                              /*
   2364                              if((255 != m_ImageAbstract.Left[m_ImageAbstract.Last_Y_Position])
   2365                               &&(m_ImageAbstract.Left[m_ImageAbstract.Last_Y_Position] >= 181-3-6))
   2366                              {
   2367                                  m_ImageAbstract.Last_Y_Position = (m_ImageAbstract.Last_Y_Position + m_ImageAbstract.Start_Y_Position)/2;
   2368                              }
   2369                              */
   2370                              show_About_RtAngle = 'l';
   \   000030F6   0xF05F 0x0B6C      MOVS     R11,#+108
   2371                              change_X = m_ImageAbstract.Right[end_findLeftOrRight];
   \   000030FA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000030FC   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003100   0x1830             ADDS     R0,R6,R0
   \   00003102   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   00003106   0xEE00 0x0A10      VMOV     S0,R0
   \   0000310A   0xEEB8 0x8A40      VCVT.F32.U32 S16,S0
   2372                              if((255.f == m_ImageAbstract.Right[end_findLeftOrRight])/*||(1 == TurningBeacauseVeryLittle.isHappened)*/)
   \   0000310E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003110   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003114   0x1830             ADDS     R0,R6,R0
   \   00003116   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   0000311A   0xEE00 0x0A10      VMOV     S0,R0
   \   0000311E   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00003122   0xEDDF 0x0AD1      VLDR.W   S1,??v_ImageCut_294  ;; 0x437f0000
   \   00003126   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   0000312A   0xEEF1 0xFA10      FMSTAT   
   \   0000312E   0xD17A             BNE.N    ??v_ImageCut_295
   2373                              {   becauseThisOutOfTheBlackRtAngle = 'H';
   \   00003130   0x2048             MOVS     R0,#+72
   \   00003132   0xF88D 0x000E      STRB     R0,[SP, #+14]
   2374                                  change_X = 2.5*m_ImageAbstract.width[end_findLeftOrRight];
   \   00003136   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003138   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   0000313C   0xEB10 0x0046      ADDS     R0,R0,R6, LSL #+1
   \   00003140   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   00003144   0x.... 0x....      BL       __aeabi_i2d
   \   00003148   0x2200             MOVS     R2,#+0
   \   0000314A   0x.... 0x....      LDR.W    R3,??DataTable7_3  ;; 0x40040000
   \   0000314E   0x.... 0x....      BL       __aeabi_dmul
   \   00003152   0x.... 0x....      BL       __aeabi_d2f
   \   00003156   0xEE08 0x0A10      VMOV     S16,R0
   2375                                  /*change_X -= m_ImageAbstract.Central[end_findLeftOrRight];
   2376                                  change_X = __F_ABS(change_X);*/
   2377                              }
   2378                              else
   2379                              {
   2380                                  becauseThisOutOfTheBlackRtAngle = 'N';
   2381                                  change_X -= m_ImageAbstract.Central[end_findLeftOrRight];
   2382                                  change_X = __F_ABS(change_X);
   2383                                  if(255!= m_ImageAbstract.Left[endJudgeLine])
   2384                                  {
   2385                                      if(DE_CalTheBetween(endJudgeLine)/*&&
   2386                                         DE_CalTheBetween((m_ImageAbstract.Last_Y_Position+(m_ImageAbstract.Last_Y_Position+end_findLeftOrRight)/2)/2)*/
   2387                                         )
   2388                                      {
   2389                                          isTime2BackAngel = 1;break;
   2390                                      }
   2391                                  }
   2392                              }
   2393                              //if(change_X < 3.f){change_X = 3.f;}
   2394                              //if(change_X > 185.f){change_X = 185.f;}
   2395                          }
   2396                          if(Sid_Left == Rt_WhiteTurningSide)
   \                     ??v_ImageCut_293: (+1)
   \   0000315A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000315C   0x2D0A             CMP      R5,#+10
   \   0000315E   0xD134             BNE.N    ??v_ImageCut_296
   2397                          {
   2398                              /*
   2399                              if((255 != m_ImageAbstract.Right[m_ImageAbstract.Last_Y_Position])
   2400                               &&(m_ImageAbstract.Right[m_ImageAbstract.Last_Y_Position] <= 6+6))
   2401                              {
   2402                                  m_ImageAbstract.Last_Y_Position = (m_ImageAbstract.Last_Y_Position + m_ImageAbstract.Start_Y_Position)/2;
   2403                              }
   2404                              */
   2405                              show_About_RtAngle = 'r';
   \   00003160   0xF05F 0x0B72      MOVS     R11,#+114
   2406                              change_X = m_ImageAbstract.Left[end_findLeftOrRight];
   \   00003164   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003166   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   0000316A   0x1830             ADDS     R0,R6,R0
   \   0000316C   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00003170   0xEE00 0x0A10      VMOV     S0,R0
   \   00003174   0xEEB8 0x8A40      VCVT.F32.U32 S16,S0
   2407                              if((255.f == m_ImageAbstract.Left[end_findLeftOrRight])/*||(1 == TurningBeacauseVeryLittle.isHappened)*/)
   \   00003178   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000317A   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   0000317E   0x1830             ADDS     R0,R6,R0
   \   00003180   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00003184   0xEE00 0x0A10      VMOV     S0,R0
   \   00003188   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   0000318C   0xEDDF 0x0AB6      VLDR.W   S1,??v_ImageCut_294  ;; 0x437f0000
   \   00003190   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00003194   0xEEF1 0xFA10      FMSTAT   
   \   00003198   0xF040 0x8108      BNE.W    ??v_ImageCut_297
   2408                              {   becauseThisOutOfTheBlackRtAngle = 'H';
   \   0000319C   0x2048             MOVS     R0,#+72
   \   0000319E   0xF88D 0x000E      STRB     R0,[SP, #+14]
   2409                                  change_X = 2.5*m_ImageAbstract.width[end_findLeftOrRight];
   \   000031A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000031A4   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000031A8   0xEB10 0x0046      ADDS     R0,R0,R6, LSL #+1
   \   000031AC   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   000031B0   0x.... 0x....      BL       __aeabi_i2d
   \   000031B4   0x2200             MOVS     R2,#+0
   \   000031B6   0x.... 0x....      LDR.W    R3,??DataTable7_3  ;; 0x40040000
   \   000031BA   0x.... 0x....      BL       __aeabi_dmul
   \   000031BE   0x.... 0x....      BL       __aeabi_d2f
   \   000031C2   0xEE08 0x0A10      VMOV     S16,R0
   2410                                  //change_X = __F_ABS(change_X);
   2411                              }
   2412                              else
   2413                              {
   2414                                  //m_ImageTesting.Back2Angel_LineCounter = end_findLeftOrRight;
   2415                                  becauseThisOutOfTheBlackRtAngle = 'N';
   2416                                  change_X -= m_ImageAbstract.Central[end_findLeftOrRight];
   2417                                  change_X = __F_ABS(change_X);
   2418                                  if(255!=m_ImageAbstract.Right[endJudgeLine])
   2419                                  {
   2420                                      if(DE_CalTheBetween(endJudgeLine)/*&&
   2421                                         DE_CalTheBetween((m_ImageAbstract.Last_Y_Position+(m_ImageAbstract.Last_Y_Position+end_findLeftOrRight)/2)/2)*/
   2422                                         )
   2423                                      {
   2424                                          isTime2BackAngel = 1;break;
   2425                                      }
   2426                                  }
   2427                              }
   2428                              //if(change_X < 0.f){change_X = 0.f;}
   2429                              //if(change_X > 185.f){change_X = 185.f;}
   2430                              change_X = -change_X;
   \                     ??v_ImageCut_298: (+1)
   \   000031C6   0xEEB1 0x8A48      VNEG.F32 S16,S16
   2431                          }//=========================================================
   2432                          m_ImageTesting.Back2Angel_LineCounter = endJudgeLine;
   \                     ??v_ImageCut_296: (+1)
   \   000031CA   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   000031CE   0xF880 0x7086      STRB     R7,[R0, #+134]
   2433                          if((RtAngleCondtion.RtWhiteSide_StartLine - (m_ImageAbstract.Last_Y_Position - RtAngleCondtion.RtWhiteSide_StartLine)/2) > 0)
   \   000031D2   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   000031D6   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   000031DA   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   000031DE   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   000031E2   0x1A89             SUBS     R1,R1,R2
   \   000031E4   0x2202             MOVS     R2,#+2
   \   000031E6   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000031EA   0x1A40             SUBS     R0,R0,R1
   \   000031EC   0x2801             CMP      R0,#+1
   \   000031EE   0xF2C0 0x81A1      BLT.W    ??v_ImageCut_299
   2434                          {
   2435                              RtAngleCondtion.RtWhiteSide_StartLine = (uint8)((float)RtAngleCondtion.RtWhiteSide_StartLine - (m_ImageAbstract.Last_Y_Position - RtAngleCondtion.RtWhiteSide_StartLine)*0.5f);
   \   000031F2   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   000031F6   0xEE00 0x0A10      VMOV     S0,R0
   \   000031FA   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   000031FE   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003202   0xF890 0x01D1      LDRB     R0,[R0, #+465]
   \   00003206   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   0000320A   0x1A40             SUBS     R0,R0,R1
   \   0000320C   0xEE00 0x0A90      VMOV     S1,R0
   \   00003210   0xEEFA 0x0AEF      VCVT.F32.S32 S1,S1,#+1
   \   00003214   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00003218   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000321C   0xEE10 0x0A10      VMOV     R0,S0
   \   00003220   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00003224   0xE189             B.N      ??v_ImageCut_300
   2436                          }
   \                     ??v_ImageCut_295: (+1)
   \   00003226   0x204E             MOVS     R0,#+78
   \   00003228   0xF88D 0x000E      STRB     R0,[SP, #+14]
   \   0000322C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000322E   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003232   0x1830             ADDS     R0,R6,R0
   \   00003234   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   00003238   0xEE00 0x0A10      VMOV     S0,R0
   \   0000323C   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00003240   0xEE38 0x8A40      VSUB.F32 S16,S16,S0
   \   00003244   0xEEB5 0x8A40      VCMP.F32 S16,#0.0
   \   00003248   0xEEF1 0xFA10      FMSTAT   
   \   0000324C   0xD502             BPL.N    ??v_ImageCut_301
   \   0000324E   0xEEB1 0x8A48      VNEG.F32 S16,S16
   \   00003252   0xE7FF             B.N      ??v_ImageCut_302
   \                     ??v_ImageCut_301: (+1)
   \                     ??v_ImageCut_302: (+1)
   \   00003254   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00003256   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   0000325A   0x1838             ADDS     R0,R7,R0
   \   0000325C   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00003260   0x28FF             CMP      R0,#+255
   \   00003262   0xF43F 0xAF7A      BEQ.W    ??v_ImageCut_293
   \   00003266   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00003268   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   0000326C   0x1838             ADDS     R0,R7,R0
   \   0000326E   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00003272   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00003274   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00003278   0x1879             ADDS     R1,R7,R1
   \   0000327A   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   0000327E   0x1A40             SUBS     R0,R0,R1
   \   00003280   0x2800             CMP      R0,#+0
   \   00003282   0xD50D             BPL.N    ??v_ImageCut_303
   \   00003284   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00003286   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   0000328A   0x1838             ADDS     R0,R7,R0
   \   0000328C   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   00003290   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00003292   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00003296   0x1879             ADDS     R1,R7,R1
   \   00003298   0xF891 0x102C      LDRB     R1,[R1, #+44]
   \   0000329C   0x1A40             SUBS     R0,R0,R1
   \   0000329E   0xE00C             B.N      ??v_ImageCut_304
   \                     ??v_ImageCut_303: (+1)
   \   000032A0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000032A2   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000032A6   0x1838             ADDS     R0,R7,R0
   \   000032A8   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   000032AC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000032AE   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   000032B2   0x1879             ADDS     R1,R7,R1
   \   000032B4   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   000032B8   0x1A40             SUBS     R0,R0,R1
   \                     ??v_ImageCut_304: (+1)
   \   000032BA   0x.... 0x....      BL       __aeabi_i2d
   \   000032BE   0x0002             MOVS     R2,R0
   \   000032C0   0x000B             MOVS     R3,R1
   \   000032C2   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   000032C6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000032C8   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000032CC   0xEB10 0x0047      ADDS     R0,R0,R7, LSL #+1
   \   000032D0   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   000032D4   0x.... 0x....      BL       __aeabi_i2d
   \   000032D8   0x.... 0x....      LDR.W    R2,??DataTable7_5  ;; 0x9999999a
   \   000032DC   0x.... 0x....      LDR.W    R3,??DataTable7_6  ;; 0x3ff19999
   \   000032E0   0x.... 0x....      BL       __aeabi_dmul
   \   000032E4   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   000032E8   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000032EC   0xF63F 0xAF35      BHI.W    ??v_ImageCut_293
   \   000032F0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000032F2   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000032F6   0x1838             ADDS     R0,R7,R0
   \   000032F8   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   000032FC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000032FE   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00003302   0x1879             ADDS     R1,R7,R1
   \   00003304   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   00003308   0x1A40             SUBS     R0,R0,R1
   \   0000330A   0x2800             CMP      R0,#+0
   \   0000330C   0xD50E             BPL.N    ??v_ImageCut_305
   \   0000330E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00003310   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003314   0x1838             ADDS     R0,R7,R0
   \   00003316   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   0000331A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000331C   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00003320   0x1879             ADDS     R1,R7,R1
   \   00003322   0xF891 0x102C      LDRB     R1,[R1, #+44]
   \   00003326   0xEBB0 0x0901      SUBS     R9,R0,R1
   \   0000332A   0xE00D             B.N      ??v_ImageCut_306
   \                     ??v_ImageCut_305: (+1)
   \   0000332C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000332E   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003332   0x1838             ADDS     R0,R7,R0
   \   00003334   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00003338   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000333A   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000333E   0x1879             ADDS     R1,R7,R1
   \   00003340   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   00003344   0xEBB0 0x0901      SUBS     R9,R0,R1
   \                     ??v_ImageCut_306: (+1)
   \   00003348   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000334A   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   0000334E   0xEB10 0x0047      ADDS     R0,R0,R7, LSL #+1
   \   00003352   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   00003356   0x.... 0x....      BL       __aeabi_i2d
   \   0000335A   0x.... 0x....      LDR.W    R2,??DataTable7_7  ;; 0xcccccccd
   \   0000335E   0x.... 0x....      LDR.W    R3,??DataTable7_8  ;; 0x3feccccc
   \   00003362   0x.... 0x....      BL       __aeabi_dmul
   \   00003366   0x0002             MOVS     R2,R0
   \   00003368   0x000B             MOVS     R3,R1
   \   0000336A   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   0000336E   0x4648             MOV      R0,R9
   \   00003370   0x.... 0x....      BL       __aeabi_i2d
   \   00003374   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00003378   0x.... 0x....      BL       __aeabi_cdrcmple
   \   0000337C   0xF63F 0xAEED      BHI.W    ??v_ImageCut_293
   \   00003380   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00003382   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003386   0x1838             ADDS     R0,R7,R0
   \   00003388   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   0000338C   0x28FF             CMP      R0,#+255
   \   0000338E   0xF43F 0xAEE4      BEQ.W    ??v_ImageCut_293
   \   00003392   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00003394   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003398   0x1838             ADDS     R0,R7,R0
   \   0000339A   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   0000339E   0x28FF             CMP      R0,#+255
   \   000033A0   0xF43F 0xAEDB      BEQ.W    ??v_ImageCut_293
   \   000033A4   0x2001             MOVS     R0,#+1
   \   000033A6   0xF88D 0x000F      STRB     R0,[SP, #+15]
   \   000033AA   0xE108             B.N      ??v_ImageCut_292
   \                     ??v_ImageCut_297: (+1)
   \   000033AC   0x204E             MOVS     R0,#+78
   \   000033AE   0xF88D 0x000E      STRB     R0,[SP, #+14]
   \   000033B2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000033B4   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000033B8   0x1830             ADDS     R0,R6,R0
   \   000033BA   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   000033BE   0xEE00 0x0A10      VMOV     S0,R0
   \   000033C2   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   000033C6   0xEE38 0x8A40      VSUB.F32 S16,S16,S0
   \   000033CA   0xEEB5 0x8A40      VCMP.F32 S16,#0.0
   \   000033CE   0xEEF1 0xFA10      FMSTAT   
   \   000033D2   0xD502             BPL.N    ??v_ImageCut_307
   \   000033D4   0xEEB1 0x8A48      VNEG.F32 S16,S16
   \   000033D8   0xE7FF             B.N      ??v_ImageCut_308
   \                     ??v_ImageCut_307: (+1)
   \                     ??v_ImageCut_308: (+1)
   \   000033DA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000033DC   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000033E0   0x1838             ADDS     R0,R7,R0
   \   000033E2   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   000033E6   0x28FF             CMP      R0,#+255
   \   000033E8   0xF43F 0xAEED      BEQ.W    ??v_ImageCut_298
   \   000033EC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000033EE   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000033F2   0x1838             ADDS     R0,R7,R0
   \   000033F4   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   000033F8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000033FA   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   000033FE   0x1879             ADDS     R1,R7,R1
   \   00003400   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   00003404   0x1A40             SUBS     R0,R0,R1
   \   00003406   0x2800             CMP      R0,#+0
   \   00003408   0xD50D             BPL.N    ??v_ImageCut_309
   \   0000340A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000340C   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003410   0x1838             ADDS     R0,R7,R0
   \   00003412   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   00003416   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00003418   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000341C   0x1879             ADDS     R1,R7,R1
   \   0000341E   0xF891 0x102C      LDRB     R1,[R1, #+44]
   \   00003422   0x1A40             SUBS     R0,R0,R1
   \   00003424   0xE00C             B.N      ??v_ImageCut_310
   \                     ??v_ImageCut_309: (+1)
   \   00003426   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00003428   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   0000342C   0x1838             ADDS     R0,R7,R0
   \   0000342E   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00003432   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00003434   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00003438   0x1879             ADDS     R1,R7,R1
   \   0000343A   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   0000343E   0x1A40             SUBS     R0,R0,R1
   \                     ??v_ImageCut_310: (+1)
   \   00003440   0x.... 0x....      BL       __aeabi_i2d
   \   00003444   0x0002             MOVS     R2,R0
   \   00003446   0x000B             MOVS     R3,R1
   \   00003448   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   0000344C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000344E   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003452   0xEB10 0x0047      ADDS     R0,R0,R7, LSL #+1
   \   00003456   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   0000345A   0x.... 0x....      BL       __aeabi_i2d
   \   0000345E   0x.... 0x....      LDR.W    R2,??DataTable7_5  ;; 0x9999999a
   \   00003462   0x.... 0x....      LDR.W    R3,??DataTable7_6  ;; 0x3ff19999
   \   00003466   0xE001             B.N      ??v_ImageCut_311
   \                     ??v_ImageCut_294:
   \   00003468   0x437F0000         DC32     0x437f0000
   \                     ??v_ImageCut_311: (+1)
   \   0000346C   0x.... 0x....      BL       __aeabi_dmul
   \   00003470   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00003474   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00003478   0xF63F 0xAEA5      BHI.W    ??v_ImageCut_298
   \   0000347C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000347E   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003482   0x1838             ADDS     R0,R7,R0
   \   00003484   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00003488   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000348A   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000348E   0x1879             ADDS     R1,R7,R1
   \   00003490   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   00003494   0x1A40             SUBS     R0,R0,R1
   \   00003496   0x2800             CMP      R0,#+0
   \   00003498   0xD50D             BPL.N    ??v_ImageCut_312
   \   0000349A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000349C   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000034A0   0x1838             ADDS     R0,R7,R0
   \   000034A2   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   000034A6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000034A8   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   000034AC   0x1879             ADDS     R1,R7,R1
   \   000034AE   0xF891 0x102C      LDRB     R1,[R1, #+44]
   \   000034B2   0x1A45             SUBS     R5,R0,R1
   \   000034B4   0xE00C             B.N      ??v_ImageCut_313
   \                     ??v_ImageCut_312: (+1)
   \   000034B6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000034B8   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000034BC   0x1838             ADDS     R0,R7,R0
   \   000034BE   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   000034C2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000034C4   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   000034C8   0x1879             ADDS     R1,R7,R1
   \   000034CA   0xF891 0x1068      LDRB     R1,[R1, #+104]
   \   000034CE   0x1A45             SUBS     R5,R0,R1
   \                     ??v_ImageCut_313: (+1)
   \   000034D0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000034D2   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000034D6   0xEB10 0x0047      ADDS     R0,R0,R7, LSL #+1
   \   000034DA   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   000034DE   0x.... 0x....      BL       __aeabi_i2d
   \   000034E2   0x.... 0x....      LDR.W    R2,??DataTable7_7  ;; 0xcccccccd
   \   000034E6   0x.... 0x....      LDR.W    R3,??DataTable7_8  ;; 0x3feccccc
   \   000034EA   0x.... 0x....      BL       __aeabi_dmul
   \   000034EE   0x0002             MOVS     R2,R0
   \   000034F0   0x000B             MOVS     R3,R1
   \   000034F2   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   000034F6   0x0028             MOVS     R0,R5
   \   000034F8   0x.... 0x....      BL       __aeabi_i2d
   \   000034FC   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00003500   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00003504   0xF63F 0xAE5F      BHI.W    ??v_ImageCut_298
   \   00003508   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000350A   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   0000350E   0x1838             ADDS     R0,R7,R0
   \   00003510   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00003514   0x28FF             CMP      R0,#+255
   \   00003516   0xF43F 0xAE56      BEQ.W    ??v_ImageCut_298
   \   0000351A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000351C   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003520   0x1838             ADDS     R0,R7,R0
   \   00003522   0xF890 0x0068      LDRB     R0,[R0, #+104]
   \   00003526   0x28FF             CMP      R0,#+255
   \   00003528   0xF43F 0xAE4D      BEQ.W    ??v_ImageCut_298
   \   0000352C   0x2001             MOVS     R0,#+1
   \   0000352E   0xF88D 0x000F      STRB     R0,[SP, #+15]
   \   00003532   0xE044             B.N      ??v_ImageCut_292
   2437                          else
   2438                          {
   2439                              RtAngleCondtion.RtWhiteSide_StartLine = 0;//保证切弯道
   \                     ??v_ImageCut_299: (+1)
   \   00003534   0x2000             MOVS     R0,#+0
   \   00003536   0xF88D 0x0008      STRB     R0,[SP, #+8]
   2440                          }
   2441                          
   2442                          
   2443                          /*
   2444                          if((m_ImageAbstract.Central[m_ImageAbstract.Last_Y_Position] <= 6 + 6)
   2445                           ||(m_ImageAbstract.Central[m_ImageAbstract.Last_Y_Position] >= 181 - 6))
   2446                          {
   2447                              change_X = 6*change_X;
   2448                          }//
   2449                          */
   2450                          sint16 Rt_central_Pos = 0;//
   \                     ??v_ImageCut_300: (+1)
   \   0000353A   0x2100             MOVS     R1,#+0
   2451                          for(uint8 y_counter = RtAngleCondtion.RtWhiteSide_StartLine;y_counter < m_ImageAbstract.Last_Y_Position;y_counter++)
   \   0000353C   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00003540   0xE036             B.N      ??v_ImageCut_314
   2452                          {
   2453                              //break;//暂时注释更改效果
   2454                              Rt_central_Pos = (sint16)(m_ImageAbstract.Central[RtAngleCondtion.RtWhiteSide_StartLine]
   2455                                              + ((float)(y_counter - RtAngleCondtion.RtWhiteSide_StartLine) * change_X / 
   2456                                              (float)(m_ImageAbstract.Last_Y_Position - RtAngleCondtion.RtWhiteSide_StartLine)));
   \                     ??v_ImageCut_315: (+1)
   \   00003542   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00003546   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \   0000354A   0x1889             ADDS     R1,R1,R2
   \   0000354C   0xF891 0x10A4      LDRB     R1,[R1, #+164]
   \   00003550   0xEE00 0x1A10      VMOV     S0,R1
   \   00003554   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00003558   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000355A   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   0000355E   0x1A41             SUBS     R1,R0,R1
   \   00003560   0xEE00 0x1A90      VMOV     S1,R1
   \   00003564   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00003568   0xEE60 0x0A88      VMUL.F32 S1,S1,S16
   \   0000356C   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00003570   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   00003574   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00003578   0x1A89             SUBS     R1,R1,R2
   \   0000357A   0xEE01 0x1A10      VMOV     S2,R1
   \   0000357E   0xEEB8 0x1AC1      VCVT.F32.S32 S2,S2
   \   00003582   0xEEC0 0x0A81      VDIV.F32 S1,S1,S2
   \   00003586   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   0000358A   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000358E   0xEE10 0x1A10      VMOV     R1,S0
   2457                              if(Rt_central_Pos > 184){Rt_central_Pos = 184;}
   \   00003592   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00003594   0x29B9             CMP      R1,#+185
   \   00003596   0xDB00             BLT.N    ??v_ImageCut_316
   \   00003598   0x21B8             MOVS     R1,#+184
   2458                              if(Rt_central_Pos < 0){Rt_central_Pos = 0;}//以上两行为限幅
   \                     ??v_ImageCut_316: (+1)
   \   0000359A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000359C   0x2900             CMP      R1,#+0
   \   0000359E   0xD500             BPL.N    ??v_ImageCut_317
   \   000035A0   0x2100             MOVS     R1,#+0
   2459                              m_ImageAbstract.Central[y_counter] = Rt_central_Pos;//赋值
   \                     ??v_ImageCut_317: (+1)
   \   000035A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035A4   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \   000035A8   0x1882             ADDS     R2,R0,R2
   \   000035AA   0xF882 0x10A4      STRB     R1,[R2, #+164]
   2460                          }
   \   000035AE   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageCut_314: (+1)
   \   000035B0   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   000035B4   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   000035B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035BA   0x4288             CMP      R0,R1
   \   000035BC   0xD3C1             BCC.N    ??v_ImageCut_315
   2461                      }
   2462                  }while(0);
   2463                  
   2464                  if(1 == m_ImageAbstract.RtAngle_isLasting)
   \                     ??v_ImageCut_289: (+1)
   \                     ??v_ImageCut_292: (+1)
   \   000035BE   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000035C2   0xF890 0x01E0      LDRB     R0,[R0, #+480]
   \   000035C6   0x2801             CMP      R0,#+1
   \   000035C8   0xD102             BNE.N    ??v_ImageCut_318
   2465                  {
   2466                      show_About_RtAngle = 'T';
   \   000035CA   0xF05F 0x0B54      MOVS     R11,#+84
   \   000035CE   0xE001             B.N      ??v_ImageCut_319
   2467                  }
   2468                  else
   2469                  {
   2470                      show_About_RtAngle = 'N';
   \                     ??v_ImageCut_318: (+1)
   \   000035D0   0xF05F 0x0B4E      MOVS     R11,#+78
   2471                  }
   2472                      
   2473                  
   2474                  if(0 == step_isfind_Rt_WhiteSide_UpestLine)
   \                     ??v_ImageCut_319: (+1)
   \   000035D4   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000035D8   0xF1B8 0x0F00      CMP      R8,#+0
   \   000035DC   0xD106             BNE.N    ??v_ImageCut_320
   2475                  {
   2476                      if(0 == step_isfind_Rt_WhiteSide_LowestLine)
   \   000035DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000035E0   0x2C00             CMP      R4,#+0
   \   000035E2   0xD101             BNE.N    ??v_ImageCut_321
   2477                      {
   2478                          show_About_LonlyLine = 'Z';//近端没有，远端也没有
   \   000035E4   0x275A             MOVS     R7,#+90
   \   000035E6   0xE007             B.N      ??v_ImageCut_322
   2479                      }
   2480                      else
   2481                      {
   2482                          show_About_LonlyLine = 'X';
   \                     ??v_ImageCut_321: (+1)
   \   000035E8   0x2758             MOVS     R7,#+88
   \   000035EA   0xE005             B.N      ??v_ImageCut_322
   2483                      }
   2484                  }
   2485                  else
   2486                  {
   2487                      if(0 == step_isfind_Rt_WhiteSide_LowestLine)//能找到远端，但找不到近端
   \                     ??v_ImageCut_320: (+1)
   \   000035EC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000035EE   0x2C00             CMP      R4,#+0
   \   000035F0   0xD101             BNE.N    ??v_ImageCut_323
   2488                      {
   2489                          show_About_LonlyLine = 'C';
   \   000035F2   0x2743             MOVS     R7,#+67
   \   000035F4   0xE000             B.N      ??v_ImageCut_322
   2490                      }
   2491                      else
   2492                      {
   2493                          show_About_LonlyLine = 'V';
   \                     ??v_ImageCut_323: (+1)
   \   000035F6   0x2756             MOVS     R7,#+86
   2494                      }
   2495                  }
   2496                  
   2497                  if(1 == isTime2BackAngel)//终止条件
   \                     ??v_ImageCut_322: (+1)
   \   000035F8   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \   000035FC   0x2801             CMP      R0,#+1
   \   000035FE   0xD104             BNE.N    ??v_ImageCut_324
   2498                  {
   2499                      m_ImageAbstract.RtAngle_isLasting = 0;
   \   00003600   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003604   0x2100             MOVS     R1,#+0
   \   00003606   0xF880 0x11E0      STRB     R1,[R0, #+480]
   2500                  }
   2501              }while(0);
   2502          
   2503              /*
   2504              if(1 == isHaveLonlyLine)
   2505              {
   2506                  m_ImageAbstract.LastFrame_CentralPos = m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position];//定义上次中线
   2507              }
   2508              else
   2509              {
   2510                  //这里应该用第一次遇到单线作为修正
   2511                  m_ImageAbstract.LastFrame_CentralPos = m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position];
   2512              }
   2513              */
   2514              
   2515              do//Last Of The wilds;
   2516              {
   2517                  uint8 RampExist = 0;
   \                     ??v_ImageCut_324: (+1)
   \   0000360A   0x2000             MOVS     R0,#+0
   2518                  if(0 == m_ImageAbstract.openTheRamp){break;}
   \   0000360C   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00003610   0x7809             LDRB     R1,[R1, #+0]
   \   00003612   0x2900             CMP      R1,#+0
   \   00003614   0xD031             BEQ.N    ??v_ImageCut_325
   2519                  for(uint8 loop = m_ImageAbstract.Start_Y_Position;loop < m_ImageAbstract.Last_Y_Position;loop++)
   \                     ??v_ImageCut_326: (+1)
   \   00003616   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000361A   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   0000361E   0xE022             B.N      ??v_ImageCut_327
   2520                  {
   2521                      if((Sid_Double == TrkSide[loop])
   2522                       &&(255 != m_ImageAbstract.Left[loop])
   2523                       &&(255 != m_ImageAbstract.Right[loop]))
   \                     ??v_ImageCut_328: (+1)
   \   00003620   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00003622   0xAA16             ADD      R2,SP,#+88
   \   00003624   0x5C8A             LDRB     R2,[R1, R2]
   \   00003626   0x2A1E             CMP      R2,#+30
   \   00003628   0xD11C             BNE.N    ??v_ImageCut_329
   \   0000362A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000362C   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \   00003630   0x188A             ADDS     R2,R1,R2
   \   00003632   0xF892 0x202C      LDRB     R2,[R2, #+44]
   \   00003636   0x2AFF             CMP      R2,#+255
   \   00003638   0xD014             BEQ.N    ??v_ImageCut_329
   \   0000363A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000363C   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \   00003640   0x188A             ADDS     R2,R1,R2
   \   00003642   0xF892 0x2068      LDRB     R2,[R2, #+104]
   \   00003646   0x2AFF             CMP      R2,#+255
   \   00003648   0xD00C             BEQ.N    ??v_ImageCut_329
   2524                      {
   2525                          uint8 witdh = m_ImageAbstract.Right[loop] - m_ImageAbstract.Left[loop];
   \   0000364A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000364C   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \   00003650   0x188A             ADDS     R2,R1,R2
   \   00003652   0xF892 0x2068      LDRB     R2,[R2, #+104]
   \   00003656   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00003658   0x.... 0x....      LDR.W    R3,??DataTable7_2
   \   0000365C   0x18CB             ADDS     R3,R1,R3
   \   0000365E   0xF893 0x302C      LDRB     R3,[R3, #+44]
   \   00003662   0x1AD2             SUBS     R2,R2,R3
   2526                          if(witdh >= 1.5*m_ImageAbstract.width[loop])
   2527                          {
   2528                              //RampExist = 1;
   2529                          }
   2530                      }
   2531                  }
   \                     ??v_ImageCut_329: (+1)
   \   00003664   0x1C49             ADDS     R1,R1,#+1
   \                     ??v_ImageCut_327: (+1)
   \   00003666   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \   0000366A   0xF892 0x21D1      LDRB     R2,[R2, #+465]
   \   0000366E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00003670   0x4291             CMP      R1,R2
   \   00003672   0xD3D5             BCC.N    ??v_ImageCut_328
   2532                  m_ImageAbstract.RampExist = RampExist;
   \   00003674   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00003678   0x7048             STRB     R0,[R1, #+1]
   2533              }while(0);
   2534              
   2535              uint8 isCanOutPut = 0;
   \                     ??v_ImageCut_325: (+1)
   \   0000367A   0x2000             MOVS     R0,#+0
   2536              for(uint8 loop = m_ImageAbstract.Start_Y_Position;loop < m_ImageAbstract.Last_Y_Position;loop++)
   \   0000367C   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00003680   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   00003684   0xE001             B.N      ??v_ImageCut_330
   2537              {
   2538                  m_Control.SideWhat[loop] = TrkSide[loop];
   2539                  if((m_ImageAbstract.Central[loop] <= 6)||(m_ImageAbstract.Central[loop] >= 181 - 3))
   2540                  {
   2541                      isCanOutPut = 1;
   \                     ??v_ImageCut_331: (+1)
   \   00003686   0x2001             MOVS     R0,#+1
   2542                  }
   \                     ??v_ImageCut_332: (+1)
   \   00003688   0x1C49             ADDS     R1,R1,#+1
   \                     ??v_ImageCut_330: (+1)
   \   0000368A   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \   0000368E   0xF892 0x21D1      LDRB     R2,[R2, #+465]
   \   00003692   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00003694   0x4291             CMP      R1,R2
   \   00003696   0xD218             BCS.N    ??v_ImageCut_333
   \   00003698   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000369A   0x.... 0x....      LDR.W    R2,??DataTable7_9
   \   0000369E   0x188A             ADDS     R2,R1,R2
   \   000036A0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000036A2   0xAB16             ADD      R3,SP,#+88
   \   000036A4   0x5CCB             LDRB     R3,[R1, R3]
   \   000036A6   0xF882 0x30A0      STRB     R3,[R2, #+160]
   \   000036AA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000036AC   0x.... 0x....      LDR.W    R2,??DataTable7_2
   \   000036B0   0x188A             ADDS     R2,R1,R2
   \   000036B2   0xF892 0x20A4      LDRB     R2,[R2, #+164]
   \   000036B6   0x1FD2             SUBS     R2,R2,#+7
   \   000036B8   0x2AAB             CMP      R2,#+171
   \   000036BA   0xD2E4             BCS.N    ??v_ImageCut_331
   2543                  else
   2544                  {
   2545                      if(1 == isCanOutPut)
   \   000036BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036BE   0x2801             CMP      R0,#+1
   \   000036C0   0xD1E2             BNE.N    ??v_ImageCut_332
   2546                      {
   2547                          m_ImageAbstract.Last_Y_Position = loop;break;
   \   000036C2   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000036C6   0xF880 0x11D1      STRB     R1,[R0, #+465]
   2548                      }
   2549                  }
   2550              }
   2551              
   2552              
   2553              m_ImageAbstract.LastFrame_CentralPos = m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position]
   2554                 /*+ (m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position] - m_ImageAbstract.LastFrame_CentralPos)*/;
   \                     ??v_ImageCut_333: (+1)
   \   000036CA   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000036CE   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   000036D2   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   000036D6   0x1840             ADDS     R0,R0,R1
   \   000036D8   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   000036DC   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   000036E0   0xF881 0x01D4      STRB     R0,[R1, #+468]
   2555              //所以，这里应该做一个处理。关于上一次的第一行，到底是个啥
   2556              
   2557              m_ImageAbstract.Show_Start_Y_Position = m_ImageAbstract.Start_Y_Position;
   \   000036E4   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000036E8   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   000036EC   0xF891 0x11D0      LDRB     R1,[R1, #+464]
   \   000036F0   0xF880 0x11E1      STRB     R1,[R0, #+481]
   2558              m_ImageAbstract.Show_Last_Y_Position = m_ImageAbstract.Last_Y_Position;
   \   000036F4   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000036F8   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   000036FC   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   00003700   0xF880 0x11E2      STRB     R1,[R0, #+482]
   2559              
   2560              
   2561              
   2562              m_ImageAbstract.LonlyLine_VeryStraightGetCorner_AboutDeadLine_Val_Y = 255;
   \   00003704   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003708   0x21FF             MOVS     R1,#+255
   \   0000370A   0xF880 0x122C      STRB     R1,[R0, #+556]
   2563              m_ImageAbstract.LonlyLine_VeryStraightGetCorner_AboutDeadLine_Var_x = 255;//更改
   \   0000370E   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00003712   0x21FF             MOVS     R1,#+255
   \   00003714   0xF880 0x122B      STRB     R1,[R0, #+555]
   2564              
   2565              /**************************************************************************/
   2566              //声响
   2567              /*
   2568              if(1 == m_ImageAbstract.RtAngle_isLasting)//直角声响控制
   2569              {
   2570                  v_BuzzerBeepSet(100);//
   2571              }
   2572              */
   2573              
   2574              if(/*(1 == TurningBeacauseVeryLittle__isHappened)||*//*(1 == m_ImageTesting.isMeetingHazard)*/
   2575                 (1 == m_ImageAbstract.RtAngle_isLasting)||(1 == m_ImageTesting.isMeetingHazard))
   \   00003718   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   0000371C   0xF890 0x01E0      LDRB     R0,[R0, #+480]
   \   00003720   0x2801             CMP      R0,#+1
   \   00003722   0xD005             BEQ.N    ??v_ImageCut_334
   \   00003724   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00003728   0xF890 0x0087      LDRB     R0,[R0, #+135]
   \   0000372C   0x2801             CMP      R0,#+1
   \   0000372E   0xD103             BNE.N    ??v_ImageCut_335
   2576              {
   2577                  
   2578                  //m_Control.servo_imageYstopLine = 20;
   2579                  v_BuzzerBeepSet(300);//
   \                     ??v_ImageCut_334: (+1)
   \   00003730   0xF44F 0x7096      MOV      R0,#+300
   \   00003734   0x.... 0x....      BL       v_BuzzerBeepSet
   2580              }
   2581              else
   2582              {
   2583                  //m_Control.servo_imageYstopLine = 40;
   2584              }
   2585              
   2586              
   2587              m_ModeMachine.showRtBlackAngle = show_About_RtAngle;
   \                     ??v_ImageCut_335: (+1)
   \   00003738   0x.... 0x....      LDR.W    R0,??DataTable7_10
   \   0000373C   0xF880 0xB023      STRB     R11,[R0, #+35]
   2588              m_ModeMachine.showLonlyInformation = show_About_LonlyLine;
   \   00003740   0x.... 0x....      LDR.W    R0,??DataTable7_10
   \   00003744   0xF880 0x7021      STRB     R7,[R0, #+33]
   2589              //m_ModeMachine.showBuzzerInformation = show_BuzzerInfor;
   2590              m_ModeMachine.showBlackBar = show_isWrong;
   \   00003748   0x.... 0x....      LDR.W    R0,??DataTable7_10
   \   0000374C   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   00003750   0xF880 0x1022      STRB     R1,[R0, #+34]
   2591              m_ModeMachine.showYcutDown = showYcutDown;
   \   00003754   0x.... 0x....      LDR.W    R0,??DataTable7_10
   \   00003758   0xF89D 0x1014      LDRB     R1,[SP, #+20]
   \   0000375C   0xF880 0x1024      STRB     R1,[R0, #+36]
   2592              m_ModeMachine.showBlackCutBar = showBlackCutBar;
   \   00003760   0x.... 0x....      LDR.W    R0,??DataTable7_10
   \   00003764   0xF89D 0x102E      LDRB     R1,[SP, #+46]
   \   00003768   0xF880 0x1025      STRB     R1,[R0, #+37]
   2593              m_ModeMachine.becauseThisOutOfTheBlackRtAngle = becauseThisOutOfTheBlackRtAngle;
   \   0000376C   0x.... 0x....      LDR.W    R0,??DataTable7_10
   \   00003770   0xF89D 0x100E      LDRB     R1,[SP, #+14]
   \   00003774   0xF880 0x1026      STRB     R1,[R0, #+38]
   2594              
   2595              m_ImageTesting.showLonlyLineFindAboutUpSet = showLonlyLineFindAboutUpSet;
   \   00003778   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   0000377C   0xF89D 0x1021      LDRB     R1,[SP, #+33]
   \   00003780   0x7201             STRB     R1,[R0, #+8]
   2596              m_ImageTesting.HaveLonlyLineStartCornerLastLine = HaveLonlyLineStartCornerLastLine;
   \   00003782   0x....             LDR.N    R0,??DataTable7_4
   \   00003784   0xF89D 0x1015      LDRB     R1,[SP, #+21]
   \   00003788   0x7041             STRB     R1,[R0, #+1]
   2597              m_ImageTesting.isOccurCross = isOccurCross;
   \   0000378A   0x....             LDR.N    R0,??DataTable7_4
   \   0000378C   0xF89D 0x1020      LDRB     R1,[SP, #+32]
   \   00003790   0xF880 0x1081      STRB     R1,[R0, #+129]
   2598              m_ImageTesting.FindLitteWidthTurning= FindLitteWidthTurning;
   \   00003794   0x....             LDR.N    R0,??DataTable7_4
   \   00003796   0xF89D 0x1022      LDRB     R1,[SP, #+34]
   \   0000379A   0xF880 0x1082      STRB     R1,[R0, #+130]
   2599              m_ImageTesting.firstAndSecond_isBeenDrawing = firstAndSecond_isBeenDrawing;
   \   0000379E   0x....             LDR.N    R0,??DataTable7_4
   \   000037A0   0xF880 0xA085      STRB     R10,[R0, #+133]
   2600              m_ImageTesting.SideChangeOccur = SideChangeOccur;
   \   000037A4   0x....             LDR.N    R0,??DataTable7_4
   \   000037A6   0xF89D 0x100D      LDRB     R1,[SP, #+13]
   \   000037AA   0xF880 0x1088      STRB     R1,[R0, #+136]
   2601              
   2602              m_ImageTesting.TurnOnTheLonlyLine = TurnOnTheLonlyLine;
   \   000037AE   0x....             LDR.N    R0,??DataTable7_4
   \   000037B0   0xF89D 0x1023      LDRB     R1,[SP, #+35]
   \   000037B4   0xF880 0x1089      STRB     R1,[R0, #+137]
   2603          }
   \   000037B8   0xB034             ADD      SP,SP,#+208
   \   000037BA   0xECBD 0x8B02      VPOP     {D8}
   \   000037BE   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   2604          

   \                                 In section .text, align 2, keep-with-next
   2605          void v_ImageMixis()//图像融合
   2606          {//这里有极大问题
   2607              
   2608          }
   \                     v_ImageMixis: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2609          /*
   2610          不管怎么说，如果想要识别出直角，要么强拐，要么在图上绘制出不合时宜的拐线。
   2611          所以说不想做前者，只能是后者。
   2612          那么怎么判别呢？
   2613          可以将直角归纳为：长直道后，需要一个强行拐弯的区域
   2614          如若根据实际情况更改数值的话，会遇到另外一个蛋疼的情况。
   2615          那就是当靠近一边时候，会出现误判的情况。
   2616          如果没有宽度限制，那么除非极致出弯，否则不会出现强拐不过去的情况。
   2617          就算极致出弯，照样强拐不过去。
   2618          那么不如用这种方法。
   2619          当检测到丢失的情况大于全丢失长度3/4时，更改方式
   2620          检测方差系数，小于数值时，
   2621          */
   2622          

   \                                 In section .text, align 4, keep-with-next
   2623          void v_ImageOptimalization()
   2624          {//图像优化
   2625              //float curve[58];//总共点数有60个，故声明58个曲率//并不需要维护这个曲率
   2626              for(uint8 loop = m_ImageAbstract.Start_Y_Position + 3;loop < m_ImageAbstract.Last_Y_Position - 2;loop++)
   \                     v_ImageOptimalization: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7_2
   \   00000002   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   00000006   0x1CC0             ADDS     R0,R0,#+3
   \   00000008   0xE007             B.N      ??v_ImageOptimalization_0
   2627              {
   2628                  float curve_1 = 0;//GetCurve_n_cut_1(loop);//curve[loop - 1];
   2629                  float curve_2 = 0;//GetCurve_n_add_1(loop);//curve[loop + 1];
   2630                  if(curve_1*curve_2 < 0.f)
   2631                  {
   2632                      float curve_0 = 0;//GetCurve_n_cut_2(loop);//curve[loop - 2];
   2633                      float curve_3 = 0;//GetCurve_n_add_2(loop);//curve[loop + 2];
   2634                      if((curve_1*curve_2 > 0.f)&&(curve_2*curve_3 > 0.f))
   2635                      {
   2636                          if((__F_ABS(curve_1) < __F_ABS(curve_2))&&(__F_ABS(curve_1) < __F_ABS(curve_3)))
   2637                          {
   2638                              curve_1 = - curve_1;
   2639                          }
   2640                          else if((__F_ABS(curve_2) < __F_ABS(curve_1))&&(__F_ABS(curve_2) < __F_ABS(curve_0)))
   \                     ??v_ImageOptimalization_1: (+1)
   \                     ??v_ImageOptimalization_2: (+1)
   \   0000000A   0xEEF4 0x0A40      VCMP.F32 S1,S0
   \   0000000E   0xEEF1 0xFA10      FMSTAT   
   \   00000012   0xD501             BPL.N    ??v_ImageOptimalization_3
   2641                          {
   2642                              curve_2 = - curve_2;
   \   00000014   0xEEB1 0x1A41      VNEG.F32 S2,S2
   2643                          }
   \                     ??v_ImageOptimalization_3: (+1)
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \                     ??v_ImageOptimalization_0: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x....             LDR.N    R1,??DataTable7_2
   \   0000001E   0xF891 0x11D1      LDRB     R1,[R1, #+465]
   \   00000022   0x1E89             SUBS     R1,R1,#+2
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xDA79             BGE.N    ??v_ImageOptimalization_4
   \   00000028   0xEDDF 0x....      VLDR.W   S1,??DataTable7  ;; 0x0
   \   0000002C   0xED9F 0x....      VLDR.W   S2,??DataTable7  ;; 0x0
   \   00000030   0xEE20 0x0A81      VMUL.F32 S0,S1,S2
   \   00000034   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00000038   0xEEF1 0xFA10      FMSTAT   
   \   0000003C   0xD5EC             BPL.N    ??v_ImageOptimalization_3
   \   0000003E   0xED9F 0x....      VLDR.W   S0,??DataTable7  ;; 0x0
   \   00000042   0xEDDF 0x....      VLDR.W   S3,??DataTable7  ;; 0x0
   \   00000046   0xEE20 0x2A81      VMUL.F32 S4,S1,S2
   \   0000004A   0xEEB5 0x2A40      VCMP.F32 S4,#0.0
   \   0000004E   0xEEF1 0xFA10      FMSTAT   
   \   00000052   0xDDE1             BLE.N    ??v_ImageOptimalization_3
   \   00000054   0xEE21 0x2A21      VMUL.F32 S4,S2,S3
   \   00000058   0xEEB5 0x2A40      VCMP.F32 S4,#0.0
   \   0000005C   0xEEF1 0xFA10      FMSTAT   
   \   00000060   0xDDDA             BLE.N    ??v_ImageOptimalization_3
   \   00000062   0xEEF5 0x0A40      VCMP.F32 S1,#0.0
   \   00000066   0xEEF1 0xFA10      FMSTAT   
   \   0000006A   0xD502             BPL.N    ??v_ImageOptimalization_5
   \   0000006C   0xEEB1 0x2A60      VNEG.F32 S4,S1
   \   00000070   0xE001             B.N      ??v_ImageOptimalization_6
   \                     ??v_ImageOptimalization_5: (+1)
   \   00000072   0xEEB0 0x2A60      VMOV.F32 S4,S1
   \                     ??v_ImageOptimalization_6: (+1)
   \   00000076   0xEEB5 0x1A40      VCMP.F32 S2,#0.0
   \   0000007A   0xEEF1 0xFA10      FMSTAT   
   \   0000007E   0xD502             BPL.N    ??v_ImageOptimalization_7
   \   00000080   0xEEF1 0x2A41      VNEG.F32 S5,S2
   \   00000084   0xE001             B.N      ??v_ImageOptimalization_8
   \                     ??v_ImageOptimalization_7: (+1)
   \   00000086   0xEEF0 0x2A41      VMOV.F32 S5,S2
   \                     ??v_ImageOptimalization_8: (+1)
   \   0000008A   0xEEB4 0x2A62      VCMP.F32 S4,S5
   \   0000008E   0xEEF1 0xFA10      FMSTAT   
   \   00000092   0xD519             BPL.N    ??v_ImageOptimalization_9
   \   00000094   0xEEF5 0x0A40      VCMP.F32 S1,#0.0
   \   00000098   0xEEF1 0xFA10      FMSTAT   
   \   0000009C   0xD502             BPL.N    ??v_ImageOptimalization_10
   \   0000009E   0xEEB1 0x2A60      VNEG.F32 S4,S1
   \   000000A2   0xE001             B.N      ??v_ImageOptimalization_11
   \                     ??v_ImageOptimalization_10: (+1)
   \   000000A4   0xEEB0 0x2A60      VMOV.F32 S4,S1
   \                     ??v_ImageOptimalization_11: (+1)
   \   000000A8   0xEEF5 0x1A40      VCMP.F32 S3,#0.0
   \   000000AC   0xEEF1 0xFA10      FMSTAT   
   \   000000B0   0xD502             BPL.N    ??v_ImageOptimalization_12
   \   000000B2   0xEEF1 0x1A61      VNEG.F32 S3,S3
   \   000000B6   0xE7FF             B.N      ??v_ImageOptimalization_13
   \                     ??v_ImageOptimalization_12: (+1)
   \                     ??v_ImageOptimalization_13: (+1)
   \   000000B8   0xEEB4 0x2A61      VCMP.F32 S4,S3
   \   000000BC   0xEEF1 0xFA10      FMSTAT   
   \   000000C0   0xD502             BPL.N    ??v_ImageOptimalization_9
   \   000000C2   0xEEF1 0x0A60      VNEG.F32 S1,S1
   \   000000C6   0xE7A7             B.N      ??v_ImageOptimalization_3
   \                     ??v_ImageOptimalization_9: (+1)
   \   000000C8   0xEEB5 0x1A40      VCMP.F32 S2,#0.0
   \   000000CC   0xEEF1 0xFA10      FMSTAT   
   \   000000D0   0xD502             BPL.N    ??v_ImageOptimalization_14
   \   000000D2   0xEEF1 0x1A41      VNEG.F32 S3,S2
   \   000000D6   0xE001             B.N      ??v_ImageOptimalization_15
   \                     ??v_ImageOptimalization_14: (+1)
   \   000000D8   0xEEF0 0x1A41      VMOV.F32 S3,S2
   \                     ??v_ImageOptimalization_15: (+1)
   \   000000DC   0xEEF5 0x0A40      VCMP.F32 S1,#0.0
   \   000000E0   0xEEF1 0xFA10      FMSTAT   
   \   000000E4   0xD502             BPL.N    ??v_ImageOptimalization_16
   \   000000E6   0xEEF1 0x0A60      VNEG.F32 S1,S1
   \   000000EA   0xE7FF             B.N      ??v_ImageOptimalization_17
   \                     ??v_ImageOptimalization_16: (+1)
   \                     ??v_ImageOptimalization_17: (+1)
   \   000000EC   0xEEF4 0x1A60      VCMP.F32 S3,S1
   \   000000F0   0xEEF1 0xFA10      FMSTAT   
   \   000000F4   0xD590             BPL.N    ??v_ImageOptimalization_3
   \   000000F6   0xEEB5 0x1A40      VCMP.F32 S2,#0.0
   \   000000FA   0xEEF1 0xFA10      FMSTAT   
   \   000000FE   0xD502             BPL.N    ??v_ImageOptimalization_18
   \   00000100   0xEEF1 0x0A41      VNEG.F32 S1,S2
   \   00000104   0xE001             B.N      ??v_ImageOptimalization_19
   \                     ??v_ImageOptimalization_18: (+1)
   \   00000106   0xEEF0 0x0A41      VMOV.F32 S1,S2
   \                     ??v_ImageOptimalization_19: (+1)
   \   0000010A   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   0000010E   0xEEF1 0xFA10      FMSTAT   
   \   00000112   0xF57F 0xAF7A      BPL.W    ??v_ImageOptimalization_1
   \   00000116   0xEEB1 0x0A40      VNEG.F32 S0,S0
   \   0000011A   0xE776             B.N      ??v_ImageOptimalization_2
   2644                      }
   2645                  }
   2646                  //此处为移动
   2647                  //uint8 newPoint = 0;
   2648                  //newPoint = setLeftInterVal(newPoint);
   2649                  //newPoint = setRightInterVal(newPoint);
   2650                  //m_ImageAbstract.Central[loop] = newPoint;
   2651              }
   2652          }
   \                     ??v_ImageOptimalization_4: (+1)
   \   0000011C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   2653          void v_ImageAbstractEnhanced()
   2654          {
   2655          }
   \                     v_ImageAbstractEnhanced: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2656          
   2657          
   2658                      //ratio = 1.f;// => 求平均值
   2659                      //从严格意义上来讲，任何的方法都可以看成对一行的转向
   2660                      //我原来想法是根据某一参数在任何情况下都能走中线
   2661                      //实践证明这一参数只有可能是速度，选取一行根据速度，或者根据速度选取某一行
   2662                      
   2663                      //我们本身想的是按照曲率过弯，但实际上，这个需要舵机电机的双重配合，所以，可能舵机的一次打角并不合适全部情况
   2664                      //同时，曲率作为全部的信号，应当同时输入给电机舵机。
   2665                      //但是，这种情况不如设计成，舵机决定电机速度，电机决定舵机的实际打角情况。
   2666                      //至于舵机打角跟什么有关，首先由沿着舵机轮向的转向，以及切向的外移误差。
   2667                      //所以根据曲率给舵机打角这是不合理的 => S(1/R) 实际应当是 S(1/R,V)
   2668                      //楼上公式才是舵机的实际情况，然而比赛的时候，更多还是关注速度，所以我们应当将速度作为一个重要参考量高于舵量
   2669                      
   2670                      //此时什么才是最适合描述舵机的呢？很显然根据速度导致的切向误差是关键因素，如若将切向误差具体化。
   2671                      //驳：如若打滑，我们打更多舵量，或许在一定范围内很合适，但向外滑动会剧烈，如若导致推头，反而得不偿失。
   2672                      
   2673                      //只能从直觉上来讲，速度会有一定的影响，但更多还应当是响应情况。就如同前瞻很远可以提前打角。
   2674                      //所以我们应当根据速度反馈量决定前瞻 => 即有效行，当有效行足够少时一定会影响打角
   2675                      //但当有效行足够多时，我觉得并不会造成太多的影响，所以应当是，速度乘以控制时间=>这里决定打角的最外因素。

   \                                 In section .text, align 4, keep-with-next
   2676          uint16 n_getSteerMiddleLine_UsedAverage()//舵机控制策略
   2677          {//消除前十行影响又如何？//消除20cm以内的影响
   \                     n_getSteerMiddleLine_UsedAverage: (+1)
   \   00000000   0xB0BC             SUB      SP,SP,#+240
   2678              /*
   2679              if(m_Control.GiveSpeed < 250)
   2680              {
   2681                  m_Control.servo_imageYstopLine = 30;
   2682              }
   2683              else
   2684              {
   2685                  m_Control.servo_imageYstopLine = 40;
   2686              }
   2687              */
   2688              sint16 central_counter = 0;//返回的输出量
   \   00000002   0x2000             MOVS     R0,#+0
   2689              
   2690              uint16 LastY_Position = 0;//(m_ImageAbstract.Last_Y_Position > m_Control.servo_imageYstopLine)?
   \   00000004   0x2100             MOVS     R1,#+0
   2691                                       //m_Control.servo_imageYstopLine:m_ImageAbstract.Last_Y_Position;//选定最远距离
   2692              if(m_ImageAbstract.Last_Y_Position > m_Control.servo_imageYstopLine)
   \   00000006   0x....             LDR.N    R2,??DataTable7_9
   \   00000008   0xF892 0x2084      LDRB     R2,[R2, #+132]
   \   0000000C   0x....             LDR.N    R3,??DataTable7_2
   \   0000000E   0xF893 0x31D1      LDRB     R3,[R3, #+465]
   \   00000012   0x429A             CMP      R2,R3
   \   00000014   0xD203             BCS.N    ??n_getSteerMiddleLine_UsedAverage_0
   2693              {
   2694                  LastY_Position = m_Control.servo_imageYstopLine;
   \   00000016   0x....             LDR.N    R0,??DataTable7_9
   \   00000018   0xF890 0x1084      LDRB     R1,[R0, #+132]
   \   0000001C   0xE002             B.N      ??n_getSteerMiddleLine_UsedAverage_1
   2695              }
   2696              else
   2697              {
   2698                  LastY_Position = m_ImageAbstract.Last_Y_Position;//到这里就认定远处几行可能不可用
   \                     ??n_getSteerMiddleLine_UsedAverage_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable7_2
   \   00000020   0xF890 0x11D1      LDRB     R1,[R0, #+465]
   2699              } 
   2700                                       
   2701              sint16 all_height = LastY_Position - m_ImageAbstract.Start_Y_Position;//高度全长
   \                     ??n_getSteerMiddleLine_UsedAverage_1: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable7_2
   \   00000026   0xF890 0x01D0      LDRB     R0,[R0, #+464]
   \   0000002A   0x1A08             SUBS     R0,R1,R0
   2702              float f_turning_para[60];//转向参数
   2703          
   2704              float central_ratio = 1.f;
   \   0000002C   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   2705              //绝对不变量 => 偏移引导中线的距离是绝对不变占两侧总长的距离是不变的
   2706              //单边变换后可能会转向过度
   2707              float y_10cm_world = 0.f;//真实世界的10cm以内，可以不用考虑 => 接近16或17cm
   \   00000030   0xEDDF 0x....      VLDR.W   S3,??DataTable7  ;; 0x0
   2708              do//这里就是一个很重要的条件
   2709              {
   2710                  float d = m_Control.image_ratio[3];
   \   00000034   0x....             LDR.N    R2,??DataTable7_9
   \   00000036   0xED92 0x0A14      VLDR     S0,[R2, #+80]
   2711          	float e = m_Control.image_ratio[4];
   \   0000003A   0x....             LDR.N    R2,??DataTable7_9
   \   0000003C   0xEDD2 0x0A15      VLDR     S1,[R2, #+84]
   2712          	float f = m_Control.image_ratio[5];
   \   00000040   0x....             LDR.N    R2,??DataTable7_9
   \   00000042   0xED92 0x2A16      VLDR     S4,[R2, #+88]
   2713          	float g = m_Control.image_ratio[6];
   \   00000046   0x....             LDR.N    R2,??DataTable7_9
   \   00000048   0xEDD2 0x2A17      VLDR     S5,[R2, #+92]
   2714          	float h = m_Control.image_ratio[7];
   \   0000004C   0x....             LDR.N    R2,??DataTable7_9
   \   0000004E   0xED92 0x3A18      VLDR     S6,[R2, #+96]
   2715                  
   2716                  
   2717                  float y0 = (d*m_ImageAbstract.Central[0] + e*0.f + f)/(g*m_ImageAbstract.Central[0] + h*0.f + 1.f);
   \   00000052   0x....             LDR.N    R2,??DataTable7_2
   \   00000054   0xF892 0x20A4      LDRB     R2,[R2, #+164]
   \   00000058   0xEE03 0x2A90      VMOV     S7,R2
   \   0000005C   0xEEF8 0x3A63      VCVT.F32.U32 S7,S7
   \   00000060   0xEE23 0x0A80      VMUL.F32 S0,S7,S0
   \   00000064   0xEDDF 0x....      VLDR.W   S7,??DataTable7  ;; 0x0
   \   00000068   0xEE00 0x0AA3      VMLA.F32 S0,S1,S7
   \   0000006C   0xEE30 0x0A02      VADD.F32 S0,S0,S4
   \   00000070   0x....             LDR.N    R2,??DataTable7_2
   \   00000072   0xF892 0x20A4      LDRB     R2,[R2, #+164]
   \   00000076   0xEE03 0x2A90      VMOV     S7,R2
   \   0000007A   0xEEF8 0x3A63      VCVT.F32.U32 S7,S7
   \   0000007E   0xEE63 0x2AA2      VMUL.F32 S5,S7,S5
   \   00000082   0xEDDF 0x....      VLDR.W   S7,??DataTable7  ;; 0x0
   \   00000086   0xEE43 0x2A23      VMLA.F32 S5,S6,S7
   \   0000008A   0xEEF7 0x3A00      VMOV.F32 S7,#1.0
   \   0000008E   0xEE72 0x2AA3      VADD.F32 S5,S5,S7
   \   00000092   0xEE80 0x0A22      VDIV.F32 S0,S0,S5
   2718                  //y0 = y0 + (30*100/45);
   2719                  //y0 = (f-y0)/(y0*h-e);
   2720                  
   2721                  y_10cm_world = y0 + (30*10/45);//10cm
   \   00000096   0xEEF1 0x2A08      VMOV.F32 S5,#6.0
   \   0000009A   0xEE30 0x0A22      VADD.F32 S0,S0,S5
   \   0000009E   0xEEF0 0x1A40      VMOV.F32 S3,S0
   2722                  y_10cm_world = (f-y_10cm_world)/(y_10cm_world*h-e);//获取
   \   000000A2   0xEE32 0x0A61      VSUB.F32 S0,S4,S3
   \   000000A6   0xEE61 0x1A83      VMUL.F32 S3,S3,S6
   \   000000AA   0xEE71 0x0AE0      VSUB.F32 S1,S3,S1
   \   000000AE   0xEEC0 0x1A20      VDIV.F32 S3,S0,S1
   2723              }while(0);
   2724              /*
   2725              if(all_height <= y_10cm_world)//设置参数为转向
   2726              {m_Control.need_Hold = 1;
   2727              central_counter = m_ImageAbstract.servo_gaiaInfor_image;return central_counter;}
   2728              */
   2729              float counter_pisCut = 0.f;//被除数
   \   000000B2   0xED9F 0x....      VLDR.W   S0,??DataTable7  ;; 0x0
   2730              uint8 timer_counter = 0; float pos_counter = 0;
   \   000000B6   0x2200             MOVS     R2,#+0
   \   000000B8   0xEDDF 0x....      VLDR.W   S1,??DataTable7  ;; 0x0
   2731              for(uint8 loop = m_ImageAbstract.Start_Y_Position + 1;
   \   000000BC   0x....             LDR.N    R3,??DataTable7_2
   \   000000BE   0xF893 0x31D0      LDRB     R3,[R3, #+464]
   \   000000C2   0x1C5B             ADDS     R3,R3,#+1
   \   000000C4   0xE065             B.N      ??n_getSteerMiddleLine_UsedAverage_2
   2732                        loop < LastY_Position - 1;
   2733                        loop ++)
   2734              {//全部信息作为参考
   2735                  central_ratio = 1.f;//基本赛道宽度的系数问题
   2736                  //if(loop >= y_10cm_world)//当比10cm大的时候才要使用
   2737                  //{
   2738                  if((1 == m_CarRunningMode.isUsedDoubleServoPID)
   2739                   &&((Sid_Left == m_Control.SideWhat[loop])
   2740                    ||(Sid_Right == m_Control.SideWhat[loop])))
   2741                  {
   2742                      central_ratio = 1.f;
   2743                  }
   2744                  else
   2745                  {
   2746                      central_ratio = 1.414f;
   \                     ??n_getSteerMiddleLine_UsedAverage_3: (+1)
   \   000000C6   0xED9F 0x....      VLDR.W   S2,??DataTable7_1  ;; 0x3fb4fdf4
   2747                  }//以上认定曲线
   2748                 // f_turning_para[loop] 
   2749                  f_turning_para[loop] = (30.f*(m_ImageAbstract.Central[loop] - 86)/(m_ImageAbstract.width[loop]/central_ratio));//还原// / 45.f
   \                     ??n_getSteerMiddleLine_UsedAverage_4: (+1)
   \   000000CA   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000CC   0x....             LDR.N    R0,??DataTable7_2
   \   000000CE   0x1818             ADDS     R0,R3,R0
   \   000000D0   0xF890 0x00A4      LDRB     R0,[R0, #+164]
   \   000000D4   0x3856             SUBS     R0,R0,#+86
   \   000000D6   0xEE01 0x0A90      VMOV     S3,R0
   \   000000DA   0xEEF8 0x1AE1      VCVT.F32.S32 S3,S3
   \   000000DE   0xEEB3 0x2A0E      VMOV.F32 S4,#30.0
   \   000000E2   0xEE61 0x1A82      VMUL.F32 S3,S3,S4
   \   000000E6   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000E8   0x....             LDR.N    R0,??DataTable7_2
   \   000000EA   0xEB10 0x0043      ADDS     R0,R0,R3, LSL #+1
   \   000000EE   0xF9B0 0x0158      LDRSH    R0,[R0, #+344]
   \   000000F2   0xEE02 0x0A10      VMOV     S4,R0
   \   000000F6   0xEEB8 0x2AC2      VCVT.F32.S32 S4,S4
   \   000000FA   0xEE82 0x1A01      VDIV.F32 S2,S4,S2
   \   000000FE   0xEE81 0x1A81      VDIV.F32 S2,S3,S2
   \   00000102   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000104   0xA800             ADD      R0,SP,#+0
   \   00000106   0xEB10 0x0083      ADDS     R0,R0,R3, LSL #+2
   \   0000010A   0xED80 0x1A00      VSTR     S2,[R0, #0]
   2750                  //pos_counter += f_turning_para[loop] * m_Control.P_Curve;
   2751                  timer_counter ++;
   \   0000010E   0x1C52             ADDS     R2,R2,#+1
   2752                  
   2753                  float number = m_Control.K_Curve;//
   \   00000110   0x....             LDR.N    R0,??DataTable7_9
   \   00000112   0xED90 0x1A23      VLDR     S2,[R0, #+140]
   2754                  float a = (number / 2.f) - 1.f / (2.f * LastY_Position);
   \   00000116   0xEEF0 0x1A00      VMOV.F32 S3,#2.0
   \   0000011A   0xEE81 0x1A21      VDIV.F32 S2,S2,S3
   \   0000011E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000120   0xEE01 0x1A90      VMOV     S3,R1
   \   00000124   0xEEF8 0x1A61      VCVT.F32.U32 S3,S3
   \   00000128   0xEEB0 0x2A00      VMOV.F32 S4,#2.0
   \   0000012C   0xEE61 0x1A82      VMUL.F32 S3,S3,S4
   \   00000130   0xEEB7 0x2A00      VMOV.F32 S4,#1.0
   \   00000134   0xEEC2 0x1A21      VDIV.F32 S3,S4,S3
   \   00000138   0xEE31 0x1A61      VSUB.F32 S2,S2,S3
   2755                  const float b = 1;
   \   0000013C   0xEEF7 0x1A00      VMOV.F32 S3,#1.0
   2756                  const float c = 1;
   \   00000140   0xEEB7 0x2A00      VMOV.F32 S4,#1.0
   2757                  float ratio = a * timer_counter * timer_counter + b * timer_counter + c;
   \   00000144   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000146   0xEE02 0x2A90      VMOV     S5,R2
   \   0000014A   0xEEF8 0x2A62      VCVT.F32.U32 S5,S5
   \   0000014E   0xEE22 0x1A81      VMUL.F32 S2,S5,S2
   \   00000152   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000154   0xEE02 0x2A90      VMOV     S5,R2
   \   00000158   0xEEF8 0x2A62      VCVT.F32.U32 S5,S5
   \   0000015C   0xEE21 0x1A22      VMUL.F32 S2,S2,S5
   \   00000160   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000162   0xEE02 0x2A90      VMOV     S5,R2
   \   00000166   0xEEF8 0x2A62      VCVT.F32.U32 S5,S5
   \   0000016A   0xEE02 0x1AA1      VMLA.F32 S2,S5,S3
   \   0000016E   0xEE31 0x1A02      VADD.F32 S2,S2,S4
   2758                  pos_counter += (f_turning_para[loop] * m_Control.P_Curve) * ratio;
   \   00000172   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000174   0xA800             ADD      R0,SP,#+0
   \   00000176   0xEB10 0x0083      ADDS     R0,R0,R3, LSL #+2
   \   0000017A   0xEDD0 0x1A00      VLDR     S3,[R0, #0]
   \   0000017E   0x....             LDR.N    R0,??DataTable7_9
   \   00000180   0xED90 0x2A22      VLDR     S4,[R0, #+136]
   \   00000184   0xEE61 0x1A82      VMUL.F32 S3,S3,S4
   \   00000188   0xEE41 0x0A81      VMLA.F32 S1,S3,S2
   2759                  
   2760                  counter_pisCut += ratio;
   \   0000018C   0xEE30 0x0A01      VADD.F32 S0,S0,S2
   \   00000190   0x1C5B             ADDS     R3,R3,#+1
   \                     ??n_getSteerMiddleLine_UsedAverage_2: (+1)
   \   00000192   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000194   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000196   0x1E48             SUBS     R0,R1,#+1
   \   00000198   0x4283             CMP      R3,R0
   \   0000019A   0xDA17             BGE.N    ??n_getSteerMiddleLine_UsedAverage_5
   \   0000019C   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \   000001A0   0x....             LDR.N    R0,??DataTable7_11
   \   000001A2   0x7800             LDRB     R0,[R0, #+0]
   \   000001A4   0x2801             CMP      R0,#+1
   \   000001A6   0xD18E             BNE.N    ??n_getSteerMiddleLine_UsedAverage_3
   \   000001A8   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000001AA   0x....             LDR.N    R0,??DataTable7_9
   \   000001AC   0x1818             ADDS     R0,R3,R0
   \   000001AE   0xF890 0x00A0      LDRB     R0,[R0, #+160]
   \   000001B2   0x280A             CMP      R0,#+10
   \   000001B4   0xD007             BEQ.N    ??n_getSteerMiddleLine_UsedAverage_6
   \   000001B6   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000001B8   0x....             LDR.N    R0,??DataTable7_9
   \   000001BA   0x1818             ADDS     R0,R3,R0
   \   000001BC   0xF890 0x00A0      LDRB     R0,[R0, #+160]
   \   000001C0   0x2814             CMP      R0,#+20
   \   000001C2   0xF47F 0xAF80      BNE.W    ??n_getSteerMiddleLine_UsedAverage_3
   \                     ??n_getSteerMiddleLine_UsedAverage_6: (+1)
   \   000001C6   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \   000001CA   0xE77E             B.N      ??n_getSteerMiddleLine_UsedAverage_4
   2761                  //}
   2762              }
   2763              central_counter = 86 + (sint16)(pos_counter / /*timer_counter*/counter_pisCut);//获取
   \                     ??n_getSteerMiddleLine_UsedAverage_5: (+1)
   \   000001CC   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \   000001D0   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000001D4   0xEE10 0x0A10      VMOV     R0,S0
   \   000001D8   0x3056             ADDS     R0,R0,#+86
   2764              //central_counter += 0.2*(m_ImageAbstract.Central[m_ImageAbstract.Last_Y_Position-1] - m_ImageAbstract.Central[m_ImageAbstract.Start_Y_Position]);
   2765              if(central_counter < 0){central_counter = 0;}
   \   000001DA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000001DC   0x2800             CMP      R0,#+0
   \   000001DE   0xD500             BPL.N    ??n_getSteerMiddleLine_UsedAverage_7
   \   000001E0   0x2000             MOVS     R0,#+0
   2766              if(central_counter > 184){central_counter = 184;}
   \                     ??n_getSteerMiddleLine_UsedAverage_7: (+1)
   \   000001E2   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000001E4   0x28B9             CMP      R0,#+185
   \   000001E6   0xDB00             BLT.N    ??n_getSteerMiddleLine_UsedAverage_8
   \   000001E8   0x20B8             MOVS     R0,#+184
   2767              return central_counter;
   \                     ??n_getSteerMiddleLine_UsedAverage_8: (+1)
   \   000001EA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001EC   0xB03C             ADD      SP,SP,#+240
   \   000001EE   0x4770             BX       LR               ;; return
   2768          }
   2769          /*
   2770          uint16 n_getSteerMiddleLine()//舵机控制策略
   2771          {
   2772              sint16 central_counter = 0;//返回的输出量
   2773              
   2774              uint16 LastY_Position = (m_ImageAbstract.Last_Y_Position > m_Control.servo_imageYstopLine)?
   2775                                       m_Control.servo_imageYstopLine:m_ImageAbstract.Last_Y_Position;//选定最远距离
   2776              sint16 all_height = LastY_Position - m_ImageAbstract.Start_Y_Position;//高度全长
   2777              float f_turning_para[60];//转向参数
   2778              if(all_height <= 10)//设置参数为转向
   2779              {m_Control.need_Hold = 1;
   2780              central_counter = m_ImageAbstract.servo_gaiaInfor_image;return central_counter;}
   2781              float central_ratio = 1.f;
   2782              //绝对不变量 => 偏移引导中线的距离是绝对不变占两侧总长的距离是不变的
   2783              //单边变换后可能会转向过度
   2784              
   2785              do//这里就是一个很重要的条件
   2786              {
   2787                  //float a = m_Control.image_ratio[0];
   2788          	//float b = m_Control.image_ratio[1];
   2789          	//float c = m_Control.image_ratio[2];
   2790                  float d = m_Control.image_ratio[3];
   2791          	float e = m_Control.image_ratio[4];
   2792          	float f = m_Control.image_ratio[5];
   2793          	float g = m_Control.image_ratio[6];
   2794          	float h = m_Control.image_ratio[7];
   2795                  
   2796                  float y0 = (d*m_ImageAbstract.Central[0] + e*0.f + f)/(g*m_ImageAbstract.Central[0] + h*0.f + 1.f);
   2797                  y0 = y0 + (30*100/45);
   2798                  y0 = (f-y0)/(y0*h-e);//
   2799              }while(0);
   2800              
   2801              uint8 timer_counter = 0; float pos_counter = 0;
   2802              for(uint8 loop = m_ImageAbstract.Start_Y_Position + 1;
   2803                        loop < LastY_Position - 1;
   2804                        loop ++)
   2805              {//全部信息作为参考
   2806                  if(((255 == m_ImageAbstract.Left[loop])&&(255 == m_ImageAbstract.Right[loop]))
   2807                      &&
   2808                  ((255 != m_ImageAbstract.Left[loop])&&(255 != m_ImageAbstract.Right[loop])))
   2809                  {
   2810                      central_ratio = 1.f;
   2811                  }
   2812                  else
   2813                  {
   2814                      central_ratio = 1.414f;
   2815                  }//以上认定曲线
   2816                  f_turning_para[loop] = (30.f*(m_ImageAbstract.Central[loop] - 85)/(m_ImageAbstract.width[loop]/central_ratio));//还原// / 45.f
   2817                  pos_counter += f_turning_para[loop] * m_Control.P_Curve;
   2818                  timer_counter ++;
   2819              }
   2820              central_counter = 85 + (sint16)(pos_counter / timer_counter);//获取
   2821              if(central_counter < 0){central_counter = 0;}
   2822              if(central_counter > 184){central_counter = 184;}
   2823              return central_counter;
   2824          }
   2825          //加权平均不如改变有效行王道，相当于，有效行是大变动，而加权平均只是小变化
   2826          */

   \                                 In section .text, align 2, keep-with-next
   2827          uint16 n_getSteerByWire()
   2828          {
   2829              //构造卷积函数，其目标应满足
   2830              //首先有两个点可以考虑，一个是线的斜率分布，另一个就是前瞻的远
   2831              //y = a*x*x + b*x + c//这里作为一个函数
   2832              //y' = 2ax + b
   2833              //也就是2a决定斜率的变化
   2834              return 0;
   \                     n_getSteerByWire: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   2835          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0xC2C80000         DC32     0xc2c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x4003711C         DC32     0x4003711c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     m_Control

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     vPtr_CheckLightingChaser

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     m_system

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     m_ImageAbstract

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     `?<Constant {0, 1, 2, 3, 4, 5, 6, 7}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x3E55C209         DC32     0x3e55c209

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0xBE91E109         DC32     0xbe91e109

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x408FE0A0         DC32     0x408fe0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x32800016         DC32     0x32800016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x3F0C8ACE         DC32     0x3f0c8ace

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0xC100333E         DC32     0xc100333e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0xB0200007         DC32     0xb0200007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0xBC418EAB         DC32     0xbc418eab

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x3FB4FDF4         DC32     0x3fb4fdf4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     m_ImageAbstract

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40040000         DC32     0x40040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     m_ImageTesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x3FF19999         DC32     0x3ff19999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0xCCCCCCCD         DC32     0xcccccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x3FECCCCC         DC32     0x3feccccc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     m_Control

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     m_ModeMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     m_CarRunningMode

   \                                 In section .rodata, align 4
   \                     `?<Constant {0, 1, 2, 3, 4, 5, 6, 7}>`:
   \   00000000   0x00 0x01          DC8 0, 1, 2, 3, 4, 5, 6, 7
   \              0x02 0x03    
   \              0x04 0x05    
   \              0x06 0x07    
   2836          
   2837          
   2838          /*单线思路
   2839              NaN => Start => ShutDown
   2840                       ||
   2841               ^        V
   2842              ||   <=  Pend
   2843          */
   2844          /*            if(
   2845                         (mid_cut == min)
   2846                       &&(255 != m_ImageAbstract.Right[loop])
   2847                       &&(255 != m_ImageAbstract.Left[loop])    
   2848                       &&(m_ImageAbstract.Right[loop] - m_ImageAbstract.Left[loop] < 0.707*m_ImageAbstract.width[loop])
   2849                         )
   2850                      {//还有一种方法叫做检测两侧的丢线情况=>即搜到可能单点的地方，然后检索距离两侧线终止区的距离进行识别
   2851                          if((__ABS(m_ImageAbstract.Central[loop-1] - m_ImageAbstract.Right[loop]) < m_ImageAbstract.width[loop]/4.5)&&(left_cut > right_cut))
   2852                          {
   2853                              mark = 2;
   2854                          }
   2855                          if((__ABS(m_ImageAbstract.Central[loop-1] - m_ImageAbstract.Left[loop]) < m_ImageAbstract.width[loop]/4.5)&&(left_cut < right_cut))
   2856                          {
   2857                              mark = 1;
   2858                          }
   2859                      }*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   b_getCurve_Point
        40   -> SquareRootFloat
     312   b_solve8x8_Ax_b
      32   f_Get3pointsCurve
        32   -> SquareRootBedivFloat
       0   n_getSteerByWire
     240   n_getSteerMiddleLine_UsedAverage
       0   v_ImageAbstractEnhanced
     256   v_ImageCut
       256   -> __aeabi_cdrcmple
       256   -> __aeabi_d2f
       256   -> __aeabi_d2iz
       256   -> __aeabi_dadd
       256   -> __aeabi_dmul
       256   -> __aeabi_dsub
       256   -> __aeabi_f2d
       256   -> __aeabi_i2d
       256   -> __aeabi_ui2d
       256   -> v_BuzzerBeepSet
      32   v_ImageCutInformationShow
        32   -> v_ColorRev_PutPoint
       0   v_ImageMixis
       0   v_ImageOptimalization
       0   v_LoadingControlPara
       8   v_motor_doneFunc
         8   -- Indirect call
         8   -> b_GetLightChaserStatus
         8   -> n_GetMotor_speed
         8   -> n_GetServoAngle
         8   -> n_GetServoGraduated


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {0, 1, 2, 3, 4, 5, 6, 7}>
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable2
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
     242  b_getCurve_Point
    1102  b_solve8x8_Ax_b
     142  f_Get3pointsCurve
      16  m_CarRunningMode
     224  m_Control
     560  m_ImageAbstract
     140  m_ImageTesting
       4  n_getSteerByWire
     496  n_getSteerMiddleLine_UsedAverage
   11520  u16_RevePanel
       2  v_ImageAbstractEnhanced
   14274  v_ImageCut
     830  v_ImageCutInformationShow
       2  v_ImageMixis
     286  v_ImageOptimalization
      40  v_LoadingControlPara
     558  v_motor_doneFunc

 
 12 460 bytes in section .bss
      8 bytes in section .rodata
 18 106 bytes in section .text
 
 18 106 bytes of CODE  memory
      8 bytes of CONST memory
 12 460 bytes of DATA  memory

Errors: none
Warnings: 21
