###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      07/Oct/2014  21:15:50 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\创作室\飞思卡尔智能小车\智能固件\MK60FX512VLQ15\ShunA #
#                    n_Panel\60FX_RegAll.c                                    #
#    Command line =  D:\创作室\飞思卡尔智能小车\智能固件\MK60FX512VLQ15\ShunA #
#                    n_Panel\60FX_RegAll.c -D IAR -D TWR_K60F120M -lCN        #
#                    D:\创作室\飞思卡尔智能小车\智能固件\MK60FX512VLQ15\FLASH #
#                    _1MB\List\ -lB D:\创作室\飞思卡尔智能小车\智能固件\MK60F #
#                    X512VLQ15\FLASH_1MB\List\ -o                             #
#                    D:\创作室\飞思卡尔智能小车\智能固件\MK60FX512VLQ15\FLASH #
#                    _1MB\Obj\ --no_cse --no_unroll --no_inline               #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I D:\创作室\飞思卡尔智能小车\智能固件\MK60FX512V #
#                    LQ15\ -I D:\创作室\飞思卡尔智能小车\智能固件\MK60FX512VL #
#                    Q15\Library\ -I D:\创作室\飞思卡尔智能小车\智能固件\MK60 #
#                    FX512VLQ15\Library\BlessedAlien\ -I                      #
#                    D:\创作室\飞思卡尔智能小车\智能固件\MK60FX512VLQ15\ShunA #
#                    n_Panel\ -Ol --use_c++_inline                            #
#    List file    =  D:\创作室\飞思卡尔智能小车\智能固件\MK60FX512VLQ15\FLASH #
#                    _1MB\List\60FX_RegAll.lst                                #
#    Object file  =  D:\创作室\飞思卡尔智能小车\智能固件\MK60FX512VLQ15\FLASH #
#                    _1MB\Obj\60FX_RegAll.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\创作室\飞思卡尔智能小车\智能固件\MK60FX512VLQ15\ShunAn_Panel\60FX_RegAll.c
      1          #include "60FX_RegAll.h"
      2          #include "MK60F15.h" // 需要重构
      3          //#define uint8           (unsigned char)
      4          // 需求如下
      5          /******************************************************************************/
      6          /******************************************************************************/
      7          /******************************************************************************/
      8          /* 整体定义
      9          -> 以每个引脚为对象 -> 类
     10          ******************************************
     11          // 含有引脚的对象 PORT
     12          struct 引脚 and PIT
     13          引脚名
     14          开启功能 GPIO / FTM / ADC / IIC / UART / SPI
     15                  
     16          ******************************************
     17          // 错误信息对象
     18          GetLastError();
     19          ******************************************
     20          */
     21          /******************************************************************************/
     22          /*
     23          函数原型
     24          Init -> Wait -> -> Destroy
     25          */
     26          /******************************************************************************/
     27          // SA
     28          // _n _f _v _xa
     29          /******************************************************************************/
     30          /* Ver 1.0
     31          已完成：
     32          ********************************************************************
     33          更新内容：实现任意口的GPIO功能 实现任意口的FTM功能
     34                      实现不给定实际功能、按照set get自行更改
     35          ********************************************************************
     36          中断函数的定义
     37          PORT Create 引脚 ; 开启功能 ;
     38          Get     GPIO            读取数值
     39                  FTM             脉冲捕捉 / 正交脉冲捕捉
     40                  ADC             获取AD数值
     41          Set     GPIO            置高置低 
     42                  FTM             EPWM脉宽
     43                  ADC             无
     44          */
     45          
     46          /******************************************************************************/
     47          /******************************************************************************/
     48          /******************************************************************************/
     49          // 基础底层声明更改
     50          /******************************************************************************/
     51          #define uint8           unsigned char
     52          #define uint16          unsigned int
     53          #define uint32          unsigned long int
     54          /******************************************************************************/
     55          /******************************************************************************/
     56          // 基本函数声明如下：
     57          unsigned char u8_getPortNum(char * InPutStr ,unsigned int *);
     58          /******************************************************************************/
     59          /******************************************************************************/
     60          // SAcreate
     61          /*
     62          **
     63          **
     64          **/
     65          #define RE_ERROR                {return 1;}

   \                                 In section .text, align 2, keep-with-next
     66          BOOL SAcreate(CHAR_PTR port_name ,CHAR_PTR func_name)
     67          {
   \                     SAcreate: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     68              uint16 get_portpin_handle = 0;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x9100             STR      R1,[SP, #+0]
     69              if(0 == u8_getPortNum(port_name,&get_portpin_handle))RE_ERROR;
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x.... 0x....      BL       u8_getPortNum
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??SAcreate_0
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE000             B.N      ??SAcreate_1
     70              return 0;
   \                     ??SAcreate_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \                     ??SAcreate_1: (+1)
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
     71          }
     72          
     73          
     74          /******************************************************************************/
     75          // u8_getPortNum
     76          /*
     77          **
     78          **
     79          **/

   \                                 In section .text, align 2, keep-with-next
     80          BOOL u8_getPortNum(CHAR_PTR InPutStr ,uint16 * NumRe)
     81          {
   \                     u8_getPortNum: (+1)
   \   00000000   0xB410             PUSH     {R4}
     82              // 检测标志位
     83              if('P' != InPutStr[0]) RE_ERROR;
   \   00000002   0x7802             LDRB     R2,[R0, #+0]
   \   00000004   0x2A50             CMP      R2,#+80
   \   00000006   0xD001             BEQ.N    ??u8_getPortNum_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE024             B.N      ??u8_getPortNum_1
     84              uint8 str_Length = sizeof(InPutStr)/sizeof(InPutStr[0]);
   \                     ??u8_getPortNum_0: (+1)
   \   0000000C   0x2204             MOVS     R2,#+4
     85              if((3 == str_Length)||(4 == str_Length))
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0x2A03             CMP      R2,#+3
   \   00000012   0xD002             BEQ.N    ??u8_getPortNum_2
   \   00000014   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000016   0x2A04             CMP      R2,#+4
   \   00000018   0xD11C             BNE.N    ??u8_getPortNum_3
     86              {
     87                  // 以下公式基于ANSI
     88                  uint8 pin_num = 0;
   \                     ??u8_getPortNum_2: (+1)
   \   0000001A   0x2300             MOVS     R3,#+0
     89                  if(3 == str_Length){pin_num = (InPutStr[2] - '0');}
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x2A03             CMP      R2,#+3
   \   00000020   0xD101             BNE.N    ??u8_getPortNum_4
   \   00000022   0x7883             LDRB     R3,[R0, #+2]
   \   00000024   0x3B30             SUBS     R3,R3,#+48
     90                  if(4 == str_Length){pin_num = (InPutStr[2] - '0')*10 + (InPutStr[3] - '0');}
   \                     ??u8_getPortNum_4: (+1)
   \   00000026   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000028   0x2A04             CMP      R2,#+4
   \   0000002A   0xD106             BNE.N    ??u8_getPortNum_5
   \   0000002C   0x7882             LDRB     R2,[R0, #+2]
   \   0000002E   0x230A             MOVS     R3,#+10
   \   00000030   0x78C4             LDRB     R4,[R0, #+3]
   \   00000032   0xFB03 0x4202      MLA      R2,R3,R2,R4
   \   00000036   0xF1B2 0x0310      SUBS     R3,R2,#+16
     91                  if(pin_num >= 32)RE_ERROR;
   \                     ??u8_getPortNum_5: (+1)
   \   0000003A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000003C   0x2B20             CMP      R3,#+32
   \   0000003E   0xDB01             BLT.N    ??u8_getPortNum_6
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xE008             B.N      ??u8_getPortNum_1
     92                  (*NumRe) = (InPutStr[1] - 'A')*(32) + pin_num;
   \                     ??u8_getPortNum_6: (+1)
   \   00000044   0x7840             LDRB     R0,[R0, #+1]
   \   00000046   0x3841             SUBS     R0,R0,#+65
   \   00000048   0x0140             LSLS     R0,R0,#+5
   \   0000004A   0xFA50 0xF083      UXTAB    R0,R0,R3
   \   0000004E   0x6008             STR      R0,[R1, #+0]
     93                  return 0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xE000             B.N      ??u8_getPortNum_1
     94              }
     95              else RE_ERROR;
   \                     ??u8_getPortNum_3: (+1)
   \   00000054   0x2001             MOVS     R0,#+1
   \                     ??u8_getPortNum_1: (+1)
   \   00000056   0xBC10             POP      {R4}
   \   00000058   0x4770             BX       LR               ;; return
     96          }
     97          
     98          
     99          /******************************************************************************/
    100          // u8_FuncNum
    101          /*
    102          **
    103          **
    104          **/

   \                                 In section .text, align 2, keep-with-next
    105          BOOL u8_FuncNum(CHAR_PTR InPutStr ,uint32 * NumRe)
    106          {
    107              // NumRe 返回 alt 功能号
    108              // uint8 pin_alt[][8] /* 功能表返回数值为 */ = {;}
    109              if("GPIO" == InPutStr)
   \                     u8_FuncNum: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable1
   \   00000002   0x4281             CMP      R1,R0
    110              { // -> 进入GPIO专用函数块
    111              }
    112              else if("FTM" == InPutStr)
    113              { // -> 进入FTM专用函数块
    114              }
    115              RE_ERROR
   \                     ??u8_FuncNum_0: (+1)
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x4770             BX       LR               ;; return
    116          }
    117          
    118          
    119          
    120          /******************************************************************************/
    121          // v_simport_Init
    122          /*
    123          **
    124          **
    125          **/

   \                                 In section .text, align 2, keep-with-next
    126          void v_simport_Init(uint16 InNum ,CHAR_PTR func_name)
    127          {
    128              // 初始化SIM
    129              uint8 func_num = 0;
   \                     v_simport_Init: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
    130              uint8 pin_name = InNum - (InNum / 32)*32;
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0xEBB0 0x1141      SUBS     R1,R0,R1, LSL #+5
    131              switch(InNum / 32)
   \   00000008   0x0940             LSRS     R0,R0,#+5
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD006             BEQ.N    ??v_simport_Init_0
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD026             BEQ.N    ??v_simport_Init_1
   \   00000012   0xD314             BCC.N    ??v_simport_Init_2
   \   00000014   0x2804             CMP      R0,#+4
   \   00000016   0xD045             BEQ.N    ??v_simport_Init_3
   \   00000018   0xD333             BCC.N    ??v_simport_Init_4
   \   0000001A   0xE053             B.N      ??v_simport_Init_5
    132              {
    133              case 0: SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
   \                     ??v_simport_Init_0: (+1)
   \   0000001C   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40048038
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   00000024   0x....             LDR.N    R3,??DataTable1_1  ;; 0x40048038
   \   00000026   0x6018             STR      R0,[R3, #+0]
    134                      PORTA_BASE_PTR->PCR[pin_name] |= func_num;
   \   00000028   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40049000
   \   0000002C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000030   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000032   0x4310             ORRS     R0,R2,R0
   \   00000034   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000036   0x....             LDR.N    R2,??DataTable1_2  ;; 0x40049000
   \   00000038   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
    135              break;
   \   0000003C   0xE042             B.N      ??v_simport_Init_5
    136              case 1: SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   \                     ??v_simport_Init_2: (+1)
   \   0000003E   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40048038
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000046   0x....             LDR.N    R3,??DataTable1_1  ;; 0x40048038
   \   00000048   0x6018             STR      R0,[R3, #+0]
    137                      PORTB_BASE_PTR->PCR[pin_name] |= func_num;
   \   0000004A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004C   0x....             LDR.N    R0,??DataTable1_3  ;; 0x4004a000
   \   0000004E   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000052   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000054   0x4310             ORRS     R0,R2,R0
   \   00000056   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000058   0x....             LDR.N    R2,??DataTable1_3  ;; 0x4004a000
   \   0000005A   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
    138              break;
   \   0000005E   0xE031             B.N      ??v_simport_Init_5
    139              case 2: SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;
   \                     ??v_simport_Init_1: (+1)
   \   00000060   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40048038
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000068   0x....             LDR.N    R3,??DataTable1_1  ;; 0x40048038
   \   0000006A   0x6018             STR      R0,[R3, #+0]
    140                      PORTC_BASE_PTR->PCR[pin_name] |= func_num;
   \   0000006C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006E   0x....             LDR.N    R0,??DataTable1_4  ;; 0x4004b000
   \   00000070   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000074   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000076   0x4310             ORRS     R0,R2,R0
   \   00000078   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000007A   0x....             LDR.N    R2,??DataTable1_4  ;; 0x4004b000
   \   0000007C   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
    141              break;
   \   00000080   0xE020             B.N      ??v_simport_Init_5
    142              case 3: SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
   \                     ??v_simport_Init_4: (+1)
   \   00000082   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40048038
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000008A   0x....             LDR.N    R3,??DataTable1_1  ;; 0x40048038
   \   0000008C   0x6018             STR      R0,[R3, #+0]
    143                      PORTD_BASE_PTR->PCR[pin_name] |= func_num;
   \   0000008E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000090   0x....             LDR.N    R0,??DataTable1_5  ;; 0x4004c000
   \   00000092   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000096   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000098   0x4310             ORRS     R0,R2,R0
   \   0000009A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009C   0x....             LDR.N    R2,??DataTable1_5  ;; 0x4004c000
   \   0000009E   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
    144              break;
   \   000000A2   0xE00F             B.N      ??v_simport_Init_5
    145              case 4: SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK;
   \                     ??v_simport_Init_3: (+1)
   \   000000A4   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40048038
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   000000AC   0x....             LDR.N    R3,??DataTable1_1  ;; 0x40048038
   \   000000AE   0x6018             STR      R0,[R3, #+0]
    146                      PORTE_BASE_PTR->PCR[pin_name] |= func_num;
   \   000000B0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000B2   0x....             LDR.N    R0,??DataTable1_6  ;; 0x4004d000
   \   000000B4   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   000000B8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000BA   0x4310             ORRS     R0,R2,R0
   \   000000BC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000BE   0x....             LDR.N    R2,??DataTable1_6  ;; 0x4004d000
   \   000000C0   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
    147              break;
    148              }
    149          }
   \                     ??v_simport_Init_5: (+1)
   \   000000C4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     `?<Constant "GPIO">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x4004A000         DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x4004B000         DC32     0x4004b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x4004C000         DC32     0x4004c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x4004D000         DC32     0x4004d000

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPIO">`:
   \   00000000   0x47 0x50          DC8 "GPIO"
   \              0x49 0x4F    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SAcreate
         8   -> u8_getPortNum
       0   u8_FuncNum
       4   u8_getPortNum
       0   v_simport_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "GPIO">
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
      24  SAcreate
       8  u8_FuncNum
      90  u8_getPortNum
     198  v_simport_Init

 
   8 bytes in section .rodata
 348 bytes in section .text
 
 348 bytes of CODE  memory
   8 bytes of CONST memory

Errors: none
Warnings: none
