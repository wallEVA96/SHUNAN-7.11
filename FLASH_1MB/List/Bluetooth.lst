###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      26/Nov/2014  20:35:15 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\¥¥◊˜ “\∑…Àºø®∂˚÷«ƒ‹–°≥µ\À≥∞µ»˝∫≈\¥˙¬Î\MK60FX512VLQ15\ #
#                    ShunAn_Panel\Bluetooth.c                                 #
#    Command line =  D:\¥¥◊˜ “\∑…Àºø®∂˚÷«ƒ‹–°≥µ\À≥∞µ»˝∫≈\¥˙¬Î\MK60FX512VLQ15\ #
#                    ShunAn_Panel\Bluetooth.c -D IAR -D TWR_K60F120M -lCN     #
#                    D:\¥¥◊˜ “\∑…Àºø®∂˚÷«ƒ‹–°≥µ\À≥∞µ»˝∫≈\¥˙¬Î\MK60FX512VLQ15\ #
#                    FLASH_1MB\List\ -lB D:\¥¥◊˜ “\∑…Àºø®∂˚÷«ƒ‹–°≥µ\À≥∞µ»˝∫≈\ #
#                    ¥˙¬Î\MK60FX512VLQ15\FLASH_1MB\List\ -o                   #
#                    D:\¥¥◊˜ “\∑…Àºø®∂˚÷«ƒ‹–°≥µ\À≥∞µ»˝∫≈\¥˙¬Î\MK60FX512VLQ15\ #
#                    FLASH_1MB\Obj\ --no_cse --no_unroll --no_inline          #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I D:\¥¥◊˜ “\∑…Àºø®∂˚÷«ƒ‹–°≥µ\À≥∞µ»˝∫≈\¥˙¬Î\MK60F #
#                    X512VLQ15\ -I D:\¥¥◊˜ “\∑…Àºø®∂˚÷«ƒ‹–°≥µ\À≥∞µ»˝∫≈\¥˙¬Î\M #
#                    K60FX512VLQ15\Library\ -I D:\¥¥◊˜ “\∑…Àºø®∂˚÷«ƒ‹–°≥µ\À≥∞ #
#                    µ»˝∫≈\¥˙¬Î\MK60FX512VLQ15\Library\BlessedAlien\ -I       #
#                    D:\¥¥◊˜ “\∑…Àºø®∂˚÷«ƒ‹–°≥µ\À≥∞µ»˝∫≈\¥˙¬Î\MK60FX512VLQ15\ #
#                    ShunAn_Panel\ -Ol --use_c++_inline                       #
#    List file    =  D:\¥¥◊˜ “\∑…Àºø®∂˚÷«ƒ‹–°≥µ\À≥∞µ»˝∫≈\¥˙¬Î\MK60FX512VLQ15\ #
#                    FLASH_1MB\List\Bluetooth.lst                             #
#    Object file  =  D:\¥¥◊˜ “\∑…Àºø®∂˚÷«ƒ‹–°≥µ\À≥∞µ»˝∫≈\¥˙¬Î\MK60FX512VLQ15\ #
#                    FLASH_1MB\Obj\Bluetooth.o                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\¥¥◊˜ “\∑…Àºø®∂˚÷«ƒ‹–°≥µ\À≥∞µ»˝∫≈\¥˙¬Î\MK60FX512VLQ15\ShunAn_Panel\Bluetooth.c
      1          /**
      2          /. -----------------------//k60µ◊≤„ø‚//-------------------------
      3          
      4          /. ≤‚ ‘”≤º˛∆ΩÃ®£∫K60
      5           . ∞Ê»®À˘”–£∫÷Ï∏æ˛ 
      6           . ÷∆◊˜’ﬂ£∫÷Ï∏æ˛
      7           . Œƒº˛√˚£∫alienUART.c
      8           . ”√Õæ£∫
      9           . ◊Ó∫Û–ﬁ∏ƒ»’∆⁄: 20140117
     10          */
     11          #include "MK60F15.h"
     12          #include "ShunAn_Lib.h"
     13          #include "start_ShunAn.h"
     14          #include "BlessedAlien.h"
     15          
     16          #include "Bluetooth.h"
     17          /******************************************************************************/
     18          /******************************************************************************/
     19          /******************************************************************************/
     20          /******************************************************************************/
     21          /******************************************************************************/
     22          //BlueTooth_Buffer g_RecBuffer;
     23          //void*(*v_BlueTooth2Data)(BlueTooth_Buffer *);
     24          /******************************************************************************/
     25          /******************************************************************************/
     26          /******************************************************************************/
     27          /******************************************************************************/
     28          /******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     29          void __v_Uart_Init_(uint32 BaudRate)
     30          {   
   \                     __v_Uart_Init_: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     31              // ≥£≤Œ¡ø
     32              uint32 tempReg  = 0;
   \   00000002   0x2100             MOVS     R1,#+0
     33              uint32 BdRtBits = 0;
   \   00000004   0x2200             MOVS     R2,#+0
     34              uint32 BRFAdjst = 0;
   \   00000006   0x2300             MOVS     R3,#+0
     35              // …Ë÷√ ±÷”
     36              SIM_SCGC4 |= SIM_SCGC4_UART3_MASK;
   \   00000008   0x....             LDR.N    R4,??DataTable3  ;; 0x40048034
   \   0000000A   0x6824             LDR      R4,[R4, #+0]
   \   0000000C   0xF454 0x5400      ORRS     R4,R4,#0x2000
   \   00000010   0x....             LDR.N    R5,??DataTable3  ;; 0x40048034
   \   00000012   0x602C             STR      R4,[R5, #+0]
     37              SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK|SIM_SCGC5_PORTE_MASK|SIM_SCGC5_PORTB_MASK ;// πƒ‹PORTE ±÷”
   \   00000014   0x....             LDR.N    R4,??DataTable3_1  ;; 0x40048038
   \   00000016   0x6824             LDR      R4,[R4, #+0]
   \   00000018   0xF454 0x5430      ORRS     R4,R4,#0x2C00
   \   0000001C   0x....             LDR.N    R5,??DataTable3_1  ;; 0x40048038
   \   0000001E   0x602C             STR      R4,[R5, #+0]
     38              // …Ë÷√“˝Ω≈≤Œ ˝
     39              PORTC_PCR16 |= 0x00000300u;//“˝Ω≈∏¥”√—°‘ÒUART3_RX
   \   00000020   0x....             LDR.N    R4,??DataTable3_2  ;; 0x4004b040
   \   00000022   0x6824             LDR      R4,[R4, #+0]
   \   00000024   0xF454 0x7440      ORRS     R4,R4,#0x300
   \   00000028   0x....             LDR.N    R5,??DataTable3_2  ;; 0x4004b040
   \   0000002A   0x602C             STR      R4,[R5, #+0]
     40              PORTC_PCR17 |= 0x00000300u;//“˝Ω≈∏¥”√—°‘ÒUART3_RX
   \   0000002C   0x....             LDR.N    R4,??DataTable3_3  ;; 0x4004b044
   \   0000002E   0x6824             LDR      R4,[R4, #+0]
   \   00000030   0xF454 0x7440      ORRS     R4,R4,#0x300
   \   00000034   0x....             LDR.N    R5,??DataTable3_3  ;; 0x4004b044
   \   00000036   0x602C             STR      R4,[R5, #+0]
     41              PORTE_PCR4 |= 0x00000000u;//“˝Ω≈∏¥”√—°‘ÒUART3_RX
   \   00000038   0x....             LDR.N    R4,??DataTable3_4  ;; 0x4004d010
   \   0000003A   0x....             LDR.N    R5,??DataTable3_4  ;; 0x4004d010
   \   0000003C   0x682D             LDR      R5,[R5, #+0]
   \   0000003E   0x6025             STR      R5,[R4, #+0]
     42              PORTE_PCR5 |= 0x00000000u;//“˝Ω≈∏¥”√—°‘ÒUART3_RX
   \   00000040   0x....             LDR.N    R4,??DataTable3_5  ;; 0x4004d014
   \   00000042   0x....             LDR.N    R5,??DataTable3_5  ;; 0x4004d014
   \   00000044   0x682D             LDR      R5,[R5, #+0]
   \   00000046   0x6025             STR      R5,[R4, #+0]
     43              PORTB_PCR10 |= 0x00000000u;//“˝Ω≈∏¥”√—°‘ÒUART3_RX
   \   00000048   0x....             LDR.N    R4,??DataTable3_6  ;; 0x4004a028
   \   0000004A   0x....             LDR.N    R5,??DataTable3_6  ;; 0x4004a028
   \   0000004C   0x682D             LDR      R5,[R5, #+0]
   \   0000004E   0x6025             STR      R5,[R4, #+0]
     44              PORTB_PCR11 |= 0x00000000u;//“˝Ω≈∏¥”√—°‘ÒUART3_RX
   \   00000050   0x....             LDR.N    R4,??DataTable3_7  ;; 0x4004a02c
   \   00000052   0x....             LDR.N    R5,??DataTable3_7  ;; 0x4004a02c
   \   00000054   0x682D             LDR      R5,[R5, #+0]
   \   00000056   0x6025             STR      R5,[R4, #+0]
     45              // πÿ±’Ω” ’º∞∑¢ÀÕ∆˜£¨µ»¥˝¥•∑¢ ±≤®Ãÿ¬ …˙≥…
     46              (UART3_BASE_PTR)->C2 &= ~( UART_C2_TE_MASK | UART_C2_RE_MASK );
   \   00000058   0x....             LDR.N    R4,??DataTable3_8  ;; 0x4006d003
   \   0000005A   0x7824             LDRB     R4,[R4, #+0]
   \   0000005C   0xF014 0x04F3      ANDS     R4,R4,#0xF3
   \   00000060   0x....             LDR.N    R5,??DataTable3_8  ;; 0x4006d003
   \   00000062   0x702C             STRB     R4,[R5, #+0]
     47              // C1…Ë÷√ƒ¨»œ
     48              (UART3_BASE_PTR)->C1  = 0;
   \   00000064   0x....             LDR.N    R4,??DataTable3_9  ;; 0x4006d002
   \   00000066   0x2500             MOVS     R5,#+0
   \   00000068   0x7025             STRB     R5,[R4, #+0]
     49              // …Ë÷√≤®Ãÿ¬ 
     50              BdRtBits = (uint16)((bus_clk_khz * 1000)/(BaudRate << 4));
   \   0000006A   0x....             LDR.N    R4,??DataTable3_10
   \   0000006C   0x6824             LDR      R4,[R4, #+0]
   \   0000006E   0xF44F 0x757A      MOV      R5,#+1000
   \   00000072   0x436C             MULS     R4,R5,R4
   \   00000074   0x0105             LSLS     R5,R0,#+4
   \   00000076   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   0000007A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000007C   0x0022             MOVS     R2,R4
     51              tempReg = UART_BDH_REG(UART3_BASE_PTR) & ~(UART_BDH_SBR(0x1F));
   \   0000007E   0x....             LDR.N    R4,??DataTable3_11  ;; 0x4006d000
   \   00000080   0x7824             LDRB     R4,[R4, #+0]
   \   00000082   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000084   0x0964             LSRS     R4,R4,#+5
   \   00000086   0x0164             LSLS     R4,R4,#+5
   \   00000088   0x0021             MOVS     R1,R4
     52              (UART3_BASE_PTR)->BDH = tempReg |  UART_BDH_SBR(((BdRtBits & 0x1F00) >> 8));
   \   0000008A   0x0A14             LSRS     R4,R2,#+8
   \   0000008C   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   00000090   0x4321             ORRS     R1,R4,R1
   \   00000092   0x....             LDR.N    R4,??DataTable3_11  ;; 0x4006d000
   \   00000094   0x7021             STRB     R1,[R4, #+0]
     53              (UART3_BASE_PTR)->BDL = (uint8)(BdRtBits & UART_BDL_SBR_MASK);
   \   00000096   0x....             LDR.N    R1,??DataTable3_12  ;; 0x4006d001
   \   00000098   0x700A             STRB     R2,[R1, #+0]
     54              BRFAdjst = ((((bus_clk_khz*1000)<<5)/(BaudRate <<4)) - (BdRtBits <<5));
   \   0000009A   0x....             LDR.N    R1,??DataTable3_10
   \   0000009C   0x6809             LDR      R1,[R1, #+0]
   \   0000009E   0xF44F 0x747A      MOV      R4,#+1000
   \   000000A2   0x4361             MULS     R1,R4,R1
   \   000000A4   0x0149             LSLS     R1,R1,#+5
   \   000000A6   0x0100             LSLS     R0,R0,#+4
   \   000000A8   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   000000AC   0xEBB0 0x1042      SUBS     R0,R0,R2, LSL #+5
   \   000000B0   0x0003             MOVS     R3,R0
     55              tempReg = UART_C4_REG(UART3_BASE_PTR) & ~(UART_C4_BRFA(0x1F));
   \   000000B2   0x....             LDR.N    R0,??DataTable3_13  ;; 0x4006d00a
   \   000000B4   0x7800             LDRB     R0,[R0, #+0]
   \   000000B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B8   0x0941             LSRS     R1,R0,#+5
   \   000000BA   0x0149             LSLS     R1,R1,#+5
     56              (UART3_BASE_PTR)->C4 = tempReg |  UART_C4_BRFA(BRFAdjst);
   \   000000BC   0xF013 0x001F      ANDS     R0,R3,#0x1F
   \   000000C0   0x4308             ORRS     R0,R0,R1
   \   000000C2   0x....             LDR.N    R1,??DataTable3_13  ;; 0x4006d00a
   \   000000C4   0x7008             STRB     R0,[R1, #+0]
     57              // …Ë÷√Ω” ’FIFO
     58             // (UART3_BASE_PTR)->RWFIFO = 0;
     59            //  (UART3_BASE_PTR)->PFIFO = UART_PFIFO_RXFE_MASK | UART_PFIFO_RXFIFOSIZE(4); //
     60            //  (UART3_BASE_PTR)->RWFIFO = 1;
     61            //  (UART3_BASE_PTR)->CFIFO = UART_CFIFO_RXUFE_MASK; //
     62              // ¥•∑¢Ω” ’∆˜º∞∑¢ÀÕ∆˜ πƒ‹£¨¥•∑¢…˙≥…≤®Ãÿ¬ 
     63              UART_C2_REG(UART3_BASE_PTR) |= (UART_C2_TE_MASK | UART_C2_RE_MASK );
   \   000000C6   0x....             LDR.N    R0,??DataTable3_8  ;; 0x4006d003
   \   000000C8   0x7800             LDRB     R0,[R0, #+0]
   \   000000CA   0xF050 0x000C      ORRS     R0,R0,#0xC
   \   000000CE   0x....             LDR.N    R1,??DataTable3_8  ;; 0x4006d003
   \   000000D0   0x7008             STRB     R0,[R1, #+0]
     64              //
     65              (UART3_BASE_PTR)->C5 = 0x00u;
   \   000000D2   0x....             LDR.N    R0,??DataTable3_14  ;; 0x4006d00b
   \   000000D4   0x2100             MOVS     R1,#+0
   \   000000D6   0x7001             STRB     R1,[R0, #+0]
     66              return;
   \   000000D8   0xBC30             POP      {R4,R5}
   \   000000DA   0x4770             BX       LR               ;; return
     67          }
     68          /*************************************************************************
     69          //
     70          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     71          void v_Uart_TxOne(unsigned char sendInfor)
     72          {
     73              // µ»¥˝∑¢ÀÕª∫≥Â«¯ø’ Transmit Data Register Empty Flag == 1  ±ÕÀ≥ˆ—≠ª∑
     74              while(!( (UART3_BASE_PTR->S1) & UART_S1_TDRE_MASK));
   \                     v_Uart_TxOne: (+1)
   \                     ??v_Uart_TxOne_0: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable3_15  ;; 0x4006d004
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x0609             LSLS     R1,R1,#+24
   \   00000006   0xD5FB             BPL.N    ??v_Uart_TxOne_0
     75              
     76              // µ±TDREŒ™1 ±£¨÷¥––∑¢ÀÕ ˝æ›÷∏¡Ó°£
     77              // ∑¢ÀÕ ˝æ›
     78              (UART3_BASE_PTR)->D = (uint8)sendInfor;
   \   00000008   0x....             LDR.N    R1,??DataTable3_16  ;; 0x4006d007
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
     79          }
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     80          void v_Uart_TxInt16(unsigned short int sendUint)
     81          {
   \                     v_Uart_TxInt16: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     82              // œ»∏ﬂ∫ÛµÕ
     83              v_Uart_TxOne((uint8)((sendUint>>8)&(0x00FFu)));
   \   00000004   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000006   0x0A20             LSRS     R0,R4,#+8
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       v_Uart_TxOne
     84              v_Uart_TxOne((uint8)((sendUint)&(0x00FFu)));
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       v_Uart_TxOne
     85          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     86          void v_Uart_TxInt16_LowHigh(unsigned short int sendUint)
     87          {
   \                     v_Uart_TxInt16_LowHigh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     88              // œ»µÕ∫Û∏ﬂ
     89              v_Uart_TxOne((uint8)((sendUint)&(0x00FFu)));
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       v_Uart_TxOne
     90              v_Uart_TxOne((uint8)((sendUint>>8)&(0x00FFu)));
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0x0A20             LSRS     R0,R4,#+8
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       v_Uart_TxOne
     91              
     92          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     93          void v_Uart_TxInt32(unsigned long int sendUint)
     94          {
   \                     v_Uart_TxInt32: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     95              v_Uart_TxInt16((uint16)((sendUint>>16)&(0x0000FFFFu)));
   \   00000004   0x0C20             LSRS     R0,R4,#+16
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0x.... 0x....      BL       v_Uart_TxInt16
     96              //vDelayMuchMs(100);
     97              v_Uart_TxInt16((uint16)((sendUint)&(0x0000FFFFu)));
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x.... 0x....      BL       v_Uart_TxInt16
     98          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
     99          
    100          /*
    101           * »˝÷÷Ω” ’∏Ò Ω
    102           */

   \                                 In section .text, align 2, keep-with-next
    103          void __v_uart_getchar (char *ch)
    104          {
    105              while (!(UART_S1_REG(UART3_BASE_PTR) & UART_S1_RDRF_MASK));       //µ»¥˝Ω” ’¬˙¡À
   \                     __v_uart_getchar: (+1)
   \                     ??__v_uart_getchar_0: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable3_15  ;; 0x4006d004
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x0689             LSLS     R1,R1,#+26
   \   00000006   0xD5FB             BPL.N    ??__v_uart_getchar_0
    106              *ch =  UART_D_REG(UART3_BASE_PTR);
   \   00000008   0x....             LDR.N    R1,??DataTable3_16  ;; 0x4006d007
   \   0000000A   0x7809             LDRB     R1,[R1, #+0]
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    107          }
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    108          uint8 __v_uart_getOnce (char *ch)
    109          {
    110              uint32 timer_Delay = 1000000; // ”≤º˛—”≥Ÿ
   \                     __v_uart_getOnce: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable3_17  ;; 0xf4240
    111              while(timer_Delay--)
   \                     ??__v_uart_getOnce_0: (+1)
   \   00000002   0x000A             MOVS     R2,R1
   \   00000004   0x1E51             SUBS     R1,R2,#+1
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD008             BEQ.N    ??__v_uart_getOnce_1
    112              {
    113                  if (UART_S1_REG(UART3_BASE_PTR) & UART_S1_RDRF_MASK)
   \   0000000A   0x....             LDR.N    R2,??DataTable3_15  ;; 0x4006d004
   \   0000000C   0x7812             LDRB     R2,[R2, #+0]
   \   0000000E   0x0692             LSLS     R2,R2,#+26
   \   00000010   0xD5F7             BPL.N    ??__v_uart_getOnce_0
    114                  {
    115                      *ch =  UART_D_REG(UART3_BASE_PTR);return 0;
   \   00000012   0x....             LDR.N    R1,??DataTable3_16  ;; 0x4006d007
   \   00000014   0x7809             LDRB     R1,[R1, #+0]
   \   00000016   0x7001             STRB     R1,[R0, #+0]
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE000             B.N      ??__v_uart_getOnce_2
    116                  }
    117              }
    118              return 1;
   \                     ??__v_uart_getOnce_1: (+1)
   \   0000001C   0x2001             MOVS     R0,#+1
   \                     ??__v_uart_getOnce_2: (+1)
   \   0000001E   0x4770             BX       LR               ;; return
    119          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x4004B040         DC32     0x4004b040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x4004B044         DC32     0x4004b044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x4004D010         DC32     0x4004d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x4004D014         DC32     0x4004d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x4004A028         DC32     0x4004a028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x4004A02C         DC32     0x4004a02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4006D003         DC32     0x4006d003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x4006D002         DC32     0x4006d002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     bus_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x4006D000         DC32     0x4006d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x4006D001         DC32     0x4006d001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x4006D00A         DC32     0x4006d00a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x4006D00B         DC32     0x4006d00b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x4006D004         DC32     0x4006d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x4006D007         DC32     0x4006d007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x000F4240         DC32     0xf4240
    120          
    121          /*
    122          uint8 u8_uart_getAll ( BlueTooth_Buffer * _RecBuffer )
    123          {
    124              char ch = 0;
    125              uint8 isGetData = 0;
    126              while( !__v_uart_getOnce(&ch) )
    127              {
    128                  _RecBuffer->Buffer[g_RecBuffer.BufferSize] = ch;
    129                  if( 0xFF == ch ){_RecBuffer->MaySign_Buffer[_RecBuffer->MaySign_BufferSize] = g_RecBuffer.BufferSize;_RecBuffer->MaySign_BufferSize++;} // º«¬ºπÿº¸–≈œ¢
    130                  if( _RecBuffer->BufferSize < DE_MAX_bufferSize ){_RecBuffer->BufferSize++;}
    131                  else{_RecBuffer->flags_single.flags_OverRun = 1;return 1;} // œﬁ∑˘
    132                  if(_RecBuffer->BufferSize > (DE_MAX_bufferSize>>1)){_RecBuffer->flags_single.flags_Half = 1;}
    133                                                                 else{_RecBuffer->flags_single.flags_Half = 0;} // ∞Îæ≈ Æº«¬º
    134                  isGetData = 1;
    135              }
    136              if( 0 == _RecBuffer->BufferSize ){_RecBuffer->flags_single.flags_Full = 1;}
    137                                               else{_RecBuffer->flags_single.flags_Full = 0;} // ø’º«¬º
    138              if(1 == isGetData){return 0;}
    139                            else{return 1;}
    140          }
    141          */
    142          
    143          /******************************************************************************/
    144          //s_Data_GyroAccel Data_UART_rec;
    145          /******************************************************************************/
    146          /* 
    147           * ∆ ºŒª∂®“Â£∫1*16 2
    148           * Ω” ’–≠“È“ª£∫Õ”¬›“«º”ÀŸ∂»º∆ / 6*16 = 12*8 = 12Bytes => 16Bytes 
    149           */
    150          /*
    151          void v_Tooth_GyroAccel (BlueTooth_Buffer * Rec) // 16Bytes 
    152          {
    153              /
    154                ∑¢ÀÕ–≠“È£∫0xFFEA + xÕ”¬›“«(2) + yÕ”¬›“«(2) + zÕ”¬›“«(2) + xº”ÀŸ∂»(2) + yº”ÀŸ∂»(2) + zº”ÀŸ∂»(2)
    155               /
    156              uint32 max_RecNum = Rec->BufferSize; // ◊Ó¥Û ˝÷µ
    157              uint32 max_FF_RecNum = Rec->MaySign_BufferSize; // FF¥Ê‘⁄ ˝¡ø
    158              // À——∞£∫
    159              for(uint8 loop = 0;loop < max_FF_RecNum;loop++)
    160              {
    161                  if(Rec->MaySign_Buffer[loop] < (max_RecNum - 1)) // 0xFFΩˆŒ™ø…ƒ‹£¨œ¬“ªŒª≤≈ «÷ÿµ„
    162                  { // «ÈøˆŒ™’Ê
    163                      if(0xEA == Rec->Buffer[(Rec->MaySign_Buffer[loop]+1)]) // »∑»œ «∑Òø…ƒ‹
    164                      {
    165                          uint8 vaild_bit = 0;
    166                          uint32 next = Rec->MaySign_Buffer[loop] + 16;
    167                          if( next < (max_RecNum - 1)) //Ω¯––ºÏ≤‚
    168                          {
    169                              vaild_bit = 1;
    170                              if(( 0xFF == Rec->Buffer[next] ) && ( 0xEA == Rec->Buffer[next+1] ))
    171                              {
    172                                  vaild_bit = 0;
    173                              }
    174                          }
    175                          if(0 == vaild_bit)
    176                          {
    177                              // µ√≥ˆ◊Ó÷’ ˝æ›
    178                              register uint16 num = Data_UART_rec.Rec_num;
    179                              Data_UART_rec.Gyro_x[num] = ((Rec->Buffer[ Rec->MaySign_Buffer[loop] +  2 ])<<8)
    180                                                          |((Rec->Buffer[ Rec->MaySign_Buffer[loop] + 3 ]));
    181                              Data_UART_rec.Gyro_y[num] = ((Rec->Buffer[ Rec->MaySign_Buffer[loop] +  4 ])<<8)
    182                                                          |((Rec->Buffer[ Rec->MaySign_Buffer[loop] + 5 ]));
    183                              Data_UART_rec.Gyro_z[num] = ((Rec->Buffer[ Rec->MaySign_Buffer[loop] +  6 ])<<8)
    184                                                          |((Rec->Buffer[ Rec->MaySign_Buffer[loop] + 7 ]));
    185                              Data_UART_rec.Accel_x[num] =((Rec->Buffer[ Rec->MaySign_Buffer[loop] +  8 ])<<8)
    186                                                          |((Rec->Buffer[ Rec->MaySign_Buffer[loop] + 9 ]));
    187                              Data_UART_rec.Accel_y[num] =((Rec->Buffer[ Rec->MaySign_Buffer[loop] +  10 ])<<8)
    188                                                          |((Rec->Buffer[ Rec->MaySign_Buffer[loop] + 11 ]));
    189                              Data_UART_rec.Accel_z[num] =((Rec->Buffer[ Rec->MaySign_Buffer[loop] +  12 ])<<8)
    190                                                          |((Rec->Buffer[ Rec->MaySign_Buffer[loop] + 13 ]));
    191                              Data_UART_rec.Rec_num ++;
    192                              // «Âø’‘≠ º ˝æ›
    193                              Rec->BufferSize = 0;
    194                              Rec->MaySign_BufferSize = 0;
    195                          }
    196                      }
    197                  }
    198              }
    199          }
    200          */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   __v_Uart_Init_
       0   __v_uart_getOnce
       0   __v_uart_getchar
       8   v_Uart_TxInt16
         8   -> v_Uart_TxOne
       8   v_Uart_TxInt16_LowHigh
         8   -> v_Uart_TxOne
       8   v_Uart_TxInt32
         8   -> v_Uart_TxInt16
       0   v_Uart_TxOne


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
     220  __v_Uart_Init_
      32  __v_uart_getOnce
      16  __v_uart_getchar
      24  v_Uart_TxInt16
      24  v_Uart_TxInt16_LowHigh
      22  v_Uart_TxInt32
      14  v_Uart_TxOne

 
 424 bytes in section .text
 
 424 bytes of CODE memory

Errors: none
Warnings: none
