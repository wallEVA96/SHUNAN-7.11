###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.60.1.5097/W32 for ARM      20/Jul/2015  05:44:49 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ShunAn_Panel\Poet_Servo.c                  #
#    Command line =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ShunAn_Panel\Poet_Servo.c -D IAR -D        #
#                    TWR_K60F120M -lCN D:\创作室\飞思卡尔智能小车\顺暗三号\代 #
#                    码\顺暗三号-华南赛最后七天-7.11\FLASH_1MB\List\ -lB      #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\List\ -o                         #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\Obj\ --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ -I D:\创作室\飞思卡尔智能小车\顺暗三号\代 #
#                    码\顺暗三号-华南赛最后七天-7.11\Library\ -I              #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\Library\BlessedAlien\ -I                   #
#                    D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\ShunAn_Panel\ -Ol --use_c++_inline         #
#    List file    =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\List\Poet_Servo.lst              #
#    Object file  =  D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛 #
#                    最后七天-7.11\FLASH_1MB\Obj\Poet_Servo.o                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\创作室\飞思卡尔智能小车\顺暗三号\代码\顺暗三号-华南赛最后七天-7.11\ShunAn_Panel\Poet_Servo.c
      1          #include "arm_cm4.h"
      2          #include "MK60F15.h"
      3          #include "ShunAn_Lib.h"
      4          #include "start_ShunAn.h"
      5          
      6          #include "Poet_Servo.h"
      7          #include "Poet_Buzzer.h"
      8          #include "Poet_InputInterface.h"
      9          
     10          
     11          #include "Pendulum_EndlessFormsMostBeautiful.h"
     12          //==============================================================
     13          // 函数名：void v_Servo_Init()
     14          // 0.5/10 * 46875 =  2343.75 =  2344
     15          // 1.5/10 * 46875 =  7031.25 =  7031
     16          // 2.5/10 * 46875 = 11718.75 = 11718
     17          //==============================================================
     18          #define DE_Servo_Central                1755//3516//3516//7031//=>1.5ms
     19          #define DE_Servo_offset                 1169//2343//2343//3000//4687
     20          #define DE_Servo_Left                   582//(DE_Servo_Central - DE_Servo_offset)
     21          #define DE_Servo_Right                  (DE_Servo_Central + DE_Servo_offset)
     22          
     23          #define DE_Servo_Start_DeadTime         20
     24          #define DE_Servo_End_0_5ms              586
     25          #define DE_Servo_End_2_5ms              2924
     26          

   \                                 In section .text, align 2, keep-with-next
     27          void v_Servo_Init()
     28          {
     29              /**************************************************************************/
     30              // 定位器初始化 // E12 // ADC3_SE17
     31              SIM_SCGC3 |= SIM_SCGC3_ADC3_MASK;//使能ADC1模块时钟 
   \                     v_Servo_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_3  ;; 0x40048030
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000008   0x....             LDR.N    R1,??DataTable4_3  ;; 0x40048030
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     32              SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;//使能PORTE时钟 
   \   0000000C   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40048038
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000014   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40048038
   \   00000016   0x6008             STR      R0,[R1, #+0]
     33              PORTB_PCR7 |= PORT_PCR_MUX(0);//引脚复用选择模拟输入
   \   00000018   0x....             LDR.N    R0,??DataTable4_5  ;; 0x4004a01c
   \   0000001A   0x....             LDR.N    R1,??DataTable4_5  ;; 0x4004a01c
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0x6001             STR      R1,[R0, #+0]
     34              /**************************************************************************/
     35              // PWM开启 // PTA6？
     36              SIM_SCGC6 |= SIM_SCGC6_FTM0_MASK;//使能FTM3时钟
   \   00000020   0x....             LDR.N    R0,??DataTable4_6  ;; 0x4004803c
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   00000028   0x....             LDR.N    R1,??DataTable4_6  ;; 0x4004803c
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     37              SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;//使能PORTE时钟
   \   0000002C   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40048038
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   00000034   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40048038
   \   00000036   0x6008             STR      R0,[R1, #+0]
     38              //PORTA_PCR5 = PORT_PCR_MUX(3);//引脚复用选择ALT3(FTM CH3)
     39              PORTA_PCR6 = PORT_PCR_MUX(3);//引脚复用选择ALT3(FTM CH3)
   \   00000038   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40049018
   \   0000003A   0xF44F 0x7140      MOV      R1,#+768
   \   0000003E   0x6001             STR      R1,[R0, #+0]
     40              // 特性设定
     41              /**************************************************************************/
     42              FTM0_MODE = FTM_MODE_FTMEN_MASK | FTM_MODE_PWMSYNC_MASK;//开启PWM异步模式 FTM_MODE_PWMSYNC_MASK
   \   00000040   0x....             LDR.N    R0,??DataTable4_8  ;; 0x40038054
   \   00000042   0x2109             MOVS     R1,#+9
   \   00000044   0x6001             STR      R1,[R0, #+0]
     43              
     44              FTM0_COMBINE = FTM_COMBINE_COMBINE1_MASK | FTM_COMBINE_SYNCEN1_MASK;//FTM_COMBINE_SYNCEN0_MASK
   \   00000046   0x....             LDR.N    R0,??DataTable4_9  ;; 0x40038064
   \   00000048   0xF44F 0x5104      MOV      R1,#+8448
   \   0000004C   0x6001             STR      R1,[R0, #+0]
     45              
     46              FTM0_SYNCONF = 0x1F1FB5;
   \   0000004E   0x....             LDR.N    R0,??DataTable4_10  ;; 0x4003808c
   \   00000050   0x....             LDR.N    R1,??DataTable4_11  ;; 0x1f1fb5
   \   00000052   0x6001             STR      R1,[R0, #+0]
     47              
     48              FTM0_C3SC &= ~FTM_CnSC_ELSA_MASK;// MSnB:MSnA = 1x       边沿对齐PWM
   \   00000054   0x....             LDR.N    R0,??DataTable4_12  ;; 0x40038024
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF030 0x0004      BICS     R0,R0,#0x4
   \   0000005C   0x....             LDR.N    R1,??DataTable4_12  ;; 0x40038024
   \   0000005E   0x6008             STR      R0,[R1, #+0]
     49              FTM0_C3SC |=  FTM_CnSC_ELSB_MASK;// ELSnB:ELSnA = 10     先高后低
   \   00000060   0x....             LDR.N    R0,??DataTable4_12  ;; 0x40038024
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000068   0x....             LDR.N    R1,??DataTable4_12  ;; 0x40038024
   \   0000006A   0x6008             STR      R0,[R1, #+0]
     50              FTM0_C2SC &= ~FTM_CnSC_ELSA_MASK;// MSnB:MSnA = 1x       边沿对齐PWM
   \   0000006C   0x....             LDR.N    R0,??DataTable4_13  ;; 0x4003801c
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0xF030 0x0004      BICS     R0,R0,#0x4
   \   00000074   0x....             LDR.N    R1,??DataTable4_13  ;; 0x4003801c
   \   00000076   0x6008             STR      R0,[R1, #+0]
     51              FTM0_C2SC |=  FTM_CnSC_ELSB_MASK;// ELSnB:ELSnA = 10     先高后低
   \   00000078   0x....             LDR.N    R0,??DataTable4_13  ;; 0x4003801c
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000080   0x....             LDR.N    R1,??DataTable4_13  ;; 0x4003801c
   \   00000082   0x6008             STR      R0,[R1, #+0]
     52              
     53              
     54          //    FTM0_PWMLOAD = FTM_PWMLOAD_LDOK_MASK | FTM_PWMLOAD_CH2SEL_MASK | FTM_PWMLOAD_CH3SEL_MASK;
     55              
     56              //FTM0_MOD = 46875;//模数, EPWM的周期为 ：MOD - CNTIN + 0x0001 // 46875 => 35.76333 >> 2 Hz//56ms 20Hz
     57              FTM0_CNTIN = 0;//脉冲宽度：(CnV - CNTIN)
   \   00000084   0x....             LDR.N    R0,??DataTable4_14  ;; 0x4003804c
   \   00000086   0x2100             MOVS     R1,#+0
   \   00000088   0x6001             STR      R1,[R0, #+0]
     58              FTM0_MOD = 46875;//25Hz => 40ms
   \   0000008A   0x....             LDR.N    R0,??DataTable4_15  ;; 0x40038008
   \   0000008C   0xF24B 0x711B      MOVW     R1,#+46875
   \   00000090   0x6001             STR      R1,[R0, #+0]
     59              // 0.5 / 40 = x / 46875 => 586 1755 2924
     60              FTM0_C2V = 0;//脉冲宽度：(CnV - CNTIN)
   \   00000092   0x....             LDR.N    R0,??DataTable4_16  ;; 0x40038020
   \   00000094   0x2100             MOVS     R1,#+0
   \   00000096   0x6001             STR      R1,[R0, #+0]
     61              FTM0_C3V = 1294 + DE_Servo_End_0_5ms;//2408;//脉冲宽度：(CnV - CNTIN)
   \   00000098   0x....             LDR.N    R0,??DataTable4_17  ;; 0x40038028
   \   0000009A   0xF44F 0x61EB      MOV      R1,#+1880
   \   0000009E   0x6001             STR      R1,[R0, #+0]
     62              
     63              FTM0_CNT = 0;//计数器。只有低16位可用（写任何值到此寄存器，都会加载 CNTIN 的值）
   \   000000A0   0x....             LDR.N    R0,??DataTable4_18  ;; 0x40038004
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x6001             STR      R1,[R0, #+0]
     64              
     65              FTM0_SC = 0 | FTM_SC_PS(6) | FTM_SC_CLKS(1);//75MHz / 32 // 1.171875 MHz
   \   000000A6   0x....             LDR.N    R0,??DataTable4_19  ;; 0x40038000
   \   000000A8   0x210E             MOVS     R1,#+14
   \   000000AA   0x6001             STR      R1,[R0, #+0]
     66              
     67              
     68              
     69              //FTM0_SYNC &=~ FTM_SYNC_SWSYNC_MASK;
     70              //FTM0_C3V = 40000;
     71          }
   \   000000AC   0x4770             BX       LR               ;; return
     72          
     73          //==============================================================
     74          // 函数名：v_Servo_Out
     75          // 功能描述：转向舵机PWM输出
     76          // 参数：占空比(0-200)，100为正中间，0为最左边，200为最右边
     77          // 返回：无
     78          //==============================================================
     79          //输入舵机参考量 => 输出PWM

   \                                 In section .text, align 2, keep-with-next
     80          void v_Servo_Out(signed short int dutyNumber)//因子为 DE_Servo_offset * 2
     81          {
   \                     v_Servo_Out: (+1)
   \   00000000   0xB410             PUSH     {R4}
     82              signed short int PWMtemp;
     83              const unsigned short int div_ratio = 200;
   \   00000002   0x21C8             MOVS     R1,#+200
     84                
     85              //1173              3516            5859 <=总量程
     86              //          2113       3063     =>相差950
     87              //20ms*2113 / 46875 => 0.9ms
     88              //20ms*3063 / 46875 => 1.3ms
     89              // 0.9 / 40 = x / 46875
     90              //153100+211400
     91              const unsigned short int const_ServoLeftPWM = 1055;//46875*((20*2113 / 46875)/40);//1055;//46875*((3063 / 46875)/40);
   \   00000004   0xF240 0x421F      MOVW     R2,#+1055
     92              const unsigned short int const_offset = 1531 - const_ServoLeftPWM;//46875*((20*3063 / 46875)/40) - const_ServoLeftPWM;
   \   00000008   0xF240 0x53FB      MOVW     R3,#+1531
   \   0000000C   0x1A9B             SUBS     R3,R3,R2
     93              if(dutyNumber > div_ratio) {dutyNumber = div_ratio;}//限制幅度
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000012   0x4281             CMP      R1,R0
   \   00000014   0xDA00             BGE.N    ??v_Servo_Out_0
   \   00000016   0x0008             MOVS     R0,R1
     94              if(dutyNumber < 0) {dutyNumber = 0;}//限制幅度
   \                     ??v_Servo_Out_0: (+1)
   \   00000018   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD500             BPL.N    ??v_Servo_Out_1
   \   0000001E   0x2000             MOVS     R0,#+0
     95              PWMtemp = (dutyNumber*const_offset + const_ServoLeftPWM*div_ratio)/div_ratio
     96                        + DE_Servo_Left;//给定输出 2603 + DE_Servo_Left
   \                     ??v_Servo_Out_1: (+1)
   \   00000020   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000022   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000024   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000026   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000028   0xFB01 0xF402      MUL      R4,R1,R2
   \   0000002C   0xFB03 0x4000      MLA      R0,R3,R0,R4
   \   00000030   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000032   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000036   0xF200 0x2046      ADDW     R0,R0,#+582
     97                                                      //2113 3063
     98              if(PWMtemp > const_offset + const_ServoLeftPWM + DE_Servo_Left)
   \   0000003A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003C   0xFA12 0xF183      UXTAH    R1,R2,R3
   \   00000040   0xF201 0x2146      ADDW     R1,R1,#+582
   \   00000044   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000046   0x4281             CMP      R1,R0
   \   00000048   0xDA03             BGE.N    ??v_Servo_Out_2
     99              {PWMtemp = const_offset + const_ServoLeftPWM + DE_Servo_Left;}//幅度限制
   \   0000004A   0x18D0             ADDS     R0,R2,R3
   \   0000004C   0xF200 0x2046      ADDW     R0,R0,#+582
   \   00000050   0xE007             B.N      ??v_Servo_Out_3
    100              else if(PWMtemp < const_ServoLeftPWM + DE_Servo_Left){PWMtemp = const_ServoLeftPWM + DE_Servo_Left;}//同上
   \                     ??v_Servo_Out_2: (+1)
   \   00000052   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000054   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000056   0xF202 0x2146      ADDW     R1,R2,#+582
   \   0000005A   0x4288             CMP      R0,R1
   \   0000005C   0xDA01             BGE.N    ??v_Servo_Out_3
   \   0000005E   0xF202 0x2046      ADDW     R0,R2,#+582
    101              
    102              FTM0_C2V = 0;
   \                     ??v_Servo_Out_3: (+1)
   \   00000062   0x....             LDR.N    R1,??DataTable4_16  ;; 0x40038020
   \   00000064   0x2200             MOVS     R2,#+0
   \   00000066   0x600A             STR      R2,[R1, #+0]
    103              FTM0_C3V = PWMtemp;//输出
   \   00000068   0x....             LDR.N    R1,??DataTable4_17  ;; 0x40038028
   \   0000006A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000006C   0x6008             STR      R0,[R1, #+0]
    104              FTM0_SYNC |= FTM_SYNC_SWSYNC_MASK;
   \   0000006E   0x....             LDR.N    R0,??DataTable4_20  ;; 0x40038058
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000076   0x....             LDR.N    R1,??DataTable4_20  ;; 0x40038058
   \   00000078   0x6008             STR      R0,[R1, #+0]
    105          }
   \   0000007A   0xBC10             POP      {R4}
   \   0000007C   0x4770             BX       LR               ;; return
    106          
    107          //==============================================================
    108          // 函数名：n_GetServoAngle
    109          // 功能描述：获取当前舵机的角度值
    110          //==============================================================
    111          #define DE_ServoADC_BASE_PTR            ADC3_BASE_PTR

   \                                 In section .text, align 2, keep-with-next
    112          uint16 n_GetServoAngle()
    113          {
    114              uint16 result = 0;
   \                     n_GetServoAngle: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    115              DE_ServoADC_BASE_PTR->CFG1 = ADC_CFG1_ADIV(0)      //ADC1设置为总线时钟频率/8
    116                                  | ADC_CFG1_MODE(1)      //8位采样//8 12 10 16
    117                                  | ADC_CFG1_ADLSMP_MASK;  //长采样时间
   \   00000002   0x....             LDR.N    R1,??DataTable4_21  ;; 0x400bc008
   \   00000004   0x2214             MOVS     R2,#+20
   \   00000006   0x600A             STR      R2,[R1, #+0]
    118              DE_ServoADC_BASE_PTR->CFG2 = ADC_CFG2_ADHSC_MASK;//ADC1设置为a通道，禁止异步时钟，高速序列转换，最长采样时间
   \   00000008   0x....             LDR.N    R1,??DataTable4_22  ;; 0x400bc00c
   \   0000000A   0x2204             MOVS     R2,#+4
   \   0000000C   0x600A             STR      R2,[R1, #+0]
    119              DE_ServoADC_BASE_PTR->SC1[0] = 17;//ADC1设置为禁止中断，单端采样，通道4a采样，这个寄存器写入后就会开始转换
   \   0000000E   0x....             LDR.N    R1,??DataTable4_23  ;; 0x400bc000
   \   00000010   0x2211             MOVS     R2,#+17
   \   00000012   0x600A             STR      R2,[R1, #+0]
    120              while (ADC_SC1_COCO_MASK != (DE_ServoADC_BASE_PTR->SC1[0] & ADC_SC1_COCO_MASK ));//等待单次转换完成   
   \                     ??n_GetServoAngle_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable4_23  ;; 0x400bc000
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x0600             LSLS     R0,R0,#+24
   \   0000001A   0xD5FB             BPL.N    ??n_GetServoAngle_0
    121              result = DE_ServoADC_BASE_PTR->R[0];
   \   0000001C   0x....             LDR.N    R0,??DataTable4_24  ;; 0x400bc010
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
    122              return result;
   \   00000020   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000022   0x4770             BX       LR               ;; return
    123          }
    124          
    125          

   \                                 In section .text, align 4, keep-with-next
    126          uint16 n_GetServoGraduated(uint16 Angle)
    127          {
   \                     n_GetServoGraduated: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
    128              const uint16 nLeftVar = 2182;//
   \   00000006   0xF640 0x0186      MOVW     R1,#+2182
    129              const uint16 nRightVar = 3912;//
   \   0000000A   0xF640 0x7248      MOVW     R2,#+3912
    130              float ratio = ((float)(Angle - nLeftVar)/(float)(nRightVar - nLeftVar));
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x1A40             SUBS     R0,R0,R1
   \   00000014   0xEE00 0x0A10      VMOV     S0,R0
   \   00000018   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000001C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000020   0x1A50             SUBS     R0,R2,R1
   \   00000022   0xEE00 0x0A90      VMOV     S1,R0
   \   00000026   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   0000002A   0xEE80 0x8A20      VDIV.F32 S16,S0,S1
    131              if(ratio < 0.f){ratio = 0.f;v_BuzzerBeepSet(1000);}
   \   0000002E   0xEEB5 0x8A40      VCMP.F32 S16,#0.0
   \   00000032   0xEEF1 0xFA10      FMSTAT   
   \   00000036   0xD505             BPL.N    ??n_GetServoGraduated_0
   \   00000038   0xED9F 0x....      VLDR.W   S16,??DataTable4  ;; 0x0
   \   0000003C   0xF44F 0x707A      MOV      R0,#+1000
   \   00000040   0x.... 0x....      BL       v_BuzzerBeepSet
    132              if(ratio > 1.f){ratio = 1.f;v_BuzzerBeepSet(1000);}
   \                     ??n_GetServoGraduated_0: (+1)
   \   00000044   0xED9F 0x....      VLDR.W   S0,??DataTable4_1  ;; 0x3f800001
   \   00000048   0xEEB4 0x8A40      VCMP.F32 S16,S0
   \   0000004C   0xEEF1 0xFA10      FMSTAT   
   \   00000050   0xDB05             BLT.N    ??n_GetServoGraduated_1
   \   00000052   0xEEB7 0x8A00      VMOV.F32 S16,#1.0
   \   00000056   0xF44F 0x707A      MOV      R0,#+1000
   \   0000005A   0x.... 0x....      BL       v_BuzzerBeepSet
    133              uint16 ServoGraduated = (uint16)(ratio*number_ServoGraduated);
   \                     ??n_GetServoGraduated_1: (+1)
   \   0000005E   0x....             LDR.N    R0,??DataTable4_25
   \   00000060   0x8800             LDRH     R0,[R0, #+0]
   \   00000062   0xEE00 0x0A10      VMOV     S0,R0
   \   00000066   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   0000006A   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   0000006E   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000072   0xEE10 0x0A10      VMOV     R0,S0
    134              return ServoGraduated;
   \   00000076   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000078   0xECBD 0x8B02      VPOP     {D8}
   \   0000007C   0xBD02             POP      {R1,PC}          ;; return
    135          }
    136          
    137          

   \                                 In section .text, align 4, keep-with-next
    138          void v_steer_set2pwm()
    139          {
   \                     v_steer_set2pwm: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    140              const sint16 middle_Line_Turn_Average = 86;//83;
   \   00000002   0x2456             MOVS     R4,#+86
    141              uint16 servo_middline = n_getSteerMiddleLine_UsedAverage();//m_Control.u16_SteerControlSevro();//得取中线                
   \   00000004   0x.... 0x....      BL       n_getSteerMiddleLine_UsedAverage
    142              
    143              m_ImageAbstract.servo_gaiaInfor_image = servo_middline;//将中线给定
   \   00000008   0x....             LDR.N    R1,??DataTable4_26
   \   0000000A   0xF881 0x01E3      STRB     R0,[R1, #+483]
    144              
    145              m_Control.image_control_n_cut_one = m_Control.image_control_n;//信息反馈
   \   0000000E   0x....             LDR.N    R1,??DataTable4_27
   \   00000010   0x....             LDR.N    R2,??DataTable4_27
   \   00000012   0x6E52             LDR      R2,[R2, #+100]
   \   00000014   0x668A             STR      R2,[R1, #+104]
    146              m_Control.image_control_n = servo_middline;//给定本次信息
   \   00000016   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000018   0xEE00 0x0A10      VMOV     S0,R0
   \   0000001C   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000020   0x....             LDR.N    R1,??DataTable4_27
   \   00000022   0xED81 0x0A19      VSTR     S0,[R1, #+100]
    147                              
    148              //P
    149              servo_middline = servo_middline;
    150              //m_Control.ServoBeforeDiff = servo_middline;//观测用
    151              //D
    152              servo_middline += m_Control.ServoDiff*(m_Control.image_control_n - m_Control.image_control_n_cut_one);
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   0xEE00 0x0A10      VMOV     S0,R0
   \   0000002C   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000030   0x....             LDR.N    R0,??DataTable4_27
   \   00000032   0xEDD0 0x0A19      VLDR     S1,[R0, #+100]
   \   00000036   0x....             LDR.N    R0,??DataTable4_27
   \   00000038   0xED90 0x1A1A      VLDR     S2,[R0, #+104]
   \   0000003C   0xEE70 0x0AC1      VSUB.F32 S1,S1,S2
   \   00000040   0x....             LDR.N    R0,??DataTable4_27
   \   00000042   0xED90 0x1A09      VLDR     S2,[R0, #+36]
   \   00000046   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000004A   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000004E   0xEE10 0x0A10      VMOV     R0,S0
    153              //m_Control.ServoDiff = servo_middline;//观测用
    154              //servo_middline = servo_middline + 1.f*(m_Control.image_control_n - m_Control.image_control_n_cut_one);
    155                              
    156              //m_Control.ServoBeforeDiff = (sint16)(1.2f*(middle_Line_Turn_Average - m_Control.ServoBeforeDiff));//观测用
    157              
    158              sint16 servo_middline_set = (sint16)(1.28f*(middle_Line_Turn_Average - servo_middline));//舵机PD
   \   00000052   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000054   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000056   0x1A20             SUBS     R0,R4,R0
   \   00000058   0xEE00 0x0A10      VMOV     S0,R0
   \   0000005C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000060   0xEDDF 0x....      VLDR.W   S1,??DataTable4_2  ;; 0x3fa3d70a
   \   00000064   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000068   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000006C   0xEE10 0x0A10      VMOV     R0,S0
    159              //1.2f或许有问题，改为1.28试试
    160              /*
    161              if((1 == m_CarRunningMode.isUsedDoubleServoPID)
    162               &&(0 == m_ImageAbstract.RtAngle_isLasting)
    163               &&(0 == m_ImageTesting.isMeetingHazard))
    164              {
    165                  if(__ABS(servo_middline_set) > 50)
    166                  {
    167                      servo_middline_set = servo_middline_set * m_CarRunningMode.DoubleServoPIDRatio;
    168                  }//以上这句用于变PID路径
    169              }
    170              */
    171              if(servo_middline_set > 98){servo_middline_set = 98;}
   \   00000070   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000072   0x2863             CMP      R0,#+99
   \   00000074   0xDB00             BLT.N    ??v_steer_set2pwm_0
   \   00000076   0x2062             MOVS     R0,#+98
    172              if(servo_middline_set < -98){servo_middline_set = -98;}
   \                     ??v_steer_set2pwm_0: (+1)
   \   00000078   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000007A   0xF110 0x0F62      CMN      R0,#+98
   \   0000007E   0xDA01             BGE.N    ??v_steer_set2pwm_1
   \   00000080   0xF07F 0x0061      MVNS     R0,#+97
    173              servo_middline_set += 100;//前馈
   \                     ??v_steer_set2pwm_1: (+1)
   \   00000084   0x3064             ADDS     R0,R0,#+100
    174              //m_Control.ServoBeforeDiff += 100;            
    175              
    176              
    177              //servo_middline_set = (uint16)((float)servo_middline_set);//
    178              //m_Control.ServoDiff = servo_middline_set;//观测用   
    179              
    180              if(0 == m_Control.need_Hold)
   \   00000086   0x....             LDR.N    R1,??DataTable4_27
   \   00000088   0x7C49             LDRB     R1,[R1, #+17]
   \   0000008A   0x2900             CMP      R1,#+0
   \   0000008C   0xD117             BNE.N    ??v_steer_set2pwm_2
    181              {
    182                  if((1 == m_Control.need_TurnLeft)&&((198 == servo_middline_set)||(servo_middline_set < 160)))
   \   0000008E   0x....             LDR.N    R1,??DataTable4_27
   \   00000090   0x7BC9             LDRB     R1,[R1, #+15]
   \   00000092   0x2901             CMP      R1,#+1
   \   00000094   0xD106             BNE.N    ??v_steer_set2pwm_3
   \   00000096   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000098   0x28C6             CMP      R0,#+198
   \   0000009A   0xD002             BEQ.N    ??v_steer_set2pwm_4
   \   0000009C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000009E   0x28A0             CMP      R0,#+160
   \   000000A0   0xDA00             BGE.N    ??v_steer_set2pwm_3
    183                  {
    184                      servo_middline_set = 198;
   \                     ??v_steer_set2pwm_4: (+1)
   \   000000A2   0x20C6             MOVS     R0,#+198
    185                  }
    186                  if((1 == m_Control.need_TurnRight)&&((2 == servo_middline_set)||(servo_middline_set > 40)))
   \                     ??v_steer_set2pwm_3: (+1)
   \   000000A4   0x....             LDR.N    R1,??DataTable4_27
   \   000000A6   0x7C09             LDRB     R1,[R1, #+16]
   \   000000A8   0x2901             CMP      R1,#+1
   \   000000AA   0xD106             BNE.N    ??v_steer_set2pwm_5
   \   000000AC   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000AE   0x2802             CMP      R0,#+2
   \   000000B0   0xD002             BEQ.N    ??v_steer_set2pwm_6
   \   000000B2   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000B4   0x2829             CMP      R0,#+41
   \   000000B6   0xDB00             BLT.N    ??v_steer_set2pwm_5
    187                  {
    188                      servo_middline_set = 2;
   \                     ??v_steer_set2pwm_6: (+1)
   \   000000B8   0x2002             MOVS     R0,#+2
    189                  }
    190                  m_Control.ServoDeg = servo_middline_set;//赋值最新舵机数值
   \                     ??v_steer_set2pwm_5: (+1)
   \   000000BA   0x....             LDR.N    R1,??DataTable4_27
   \   000000BC   0x8408             STRH     R0,[R1, #+32]
    191              }
    192              if(1 == m_Control.need_turnRobustly_flag)
   \                     ??v_steer_set2pwm_2: (+1)
   \   000000BE   0x....             LDR.N    R0,??DataTable4_27
   \   000000C0   0x7D00             LDRB     R0,[R0, #+20]
   \   000000C2   0x2801             CMP      R0,#+1
   \   000000C4   0xD103             BNE.N    ??v_steer_set2pwm_7
    193              {
    194                  m_Control.ServoDeg = m_Control.servo_turn_Robustly;
   \   000000C6   0x....             LDR.N    R0,??DataTable4_27
   \   000000C8   0x....             LDR.N    R1,??DataTable4_27
   \   000000CA   0x7CC9             LDRB     R1,[R1, #+19]
   \   000000CC   0x8401             STRH     R1,[R0, #+32]
    195              }
    196                             
    197              if(1 == switch_3)
   \                     ??v_steer_set2pwm_7: (+1)
   \   000000CE   0x.... 0x....      BL       u8_ExInterface8_get
   \   000000D2   0x2801             CMP      R0,#+1
   \   000000D4   0xD104             BNE.N    ??v_steer_set2pwm_8
    198              {
    199                  v_Servo_Out(m_Control.ServoDeg);
   \   000000D6   0x....             LDR.N    R0,??DataTable4_27
   \   000000D8   0xF9B0 0x0020      LDRSH    R0,[R0, #+32]
   \   000000DC   0x.... 0x....      BL       v_Servo_Out
    200              }
    201              else
    202              {//不输出即保证上次角度
    203              }
    204                
    205              /*
    206              if((1 == m_CarRunningMode.isUsedDoubleServoPID)
    207               &&(0 == m_ImageAbstract.RtAngle_isLasting)
    208               &&(0 == m_ImageTesting.isMeetingHazard))
    209              {
    210                  if(__ABS(m_Control.ServoDeg) > 30)
    211                  {
    212                      m_Control.ServoDeg = m_Control.ServoDeg * m_CarRunningMode.DoubleServoPIDRatio;
    213                  }//以上这句用于变PID路径
    214              }
    215              */
    216              m_Control.servo_turn_Robustly = 0;
   \                     ??v_steer_set2pwm_8: (+1)
   \   000000E0   0x....             LDR.N    R0,??DataTable4_27
   \   000000E2   0x2100             MOVS     R1,#+0
   \   000000E4   0x74C1             STRB     R1,[R0, #+19]
    217              m_Control.need_Hold = 0;
   \   000000E6   0x....             LDR.N    R0,??DataTable4_27
   \   000000E8   0x2100             MOVS     R1,#+0
   \   000000EA   0x7441             STRB     R1,[R0, #+17]
    218          }
   \   000000EC   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x3F800001         DC32     0x3f800001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x3FA3D70A         DC32     0x3fa3d70a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x4004A01C         DC32     0x4004a01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x40049018         DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x40038054         DC32     0x40038054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x40038064         DC32     0x40038064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x4003808C         DC32     0x4003808c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x001F1FB5         DC32     0x1f1fb5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x40038024         DC32     0x40038024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x4003801C         DC32     0x4003801c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x4003804C         DC32     0x4003804c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x40038008         DC32     0x40038008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x40038020         DC32     0x40038020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x40038028         DC32     0x40038028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x40038004         DC32     0x40038004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x40038058         DC32     0x40038058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x400BC008         DC32     0x400bc008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x400BC00C         DC32     0x400bc00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x400BC000         DC32     0x400bc000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x400BC010         DC32     0x400bc010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x........         DC32     number_ServoGraduated

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   0x........         DC32     m_ImageAbstract

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0x........         DC32     m_Control

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   n_GetServoAngle
      16   n_GetServoGraduated
        16   -> v_BuzzerBeepSet
       0   v_Servo_Init
       4   v_Servo_Out
       8   v_steer_set2pwm
         8   -> n_getSteerMiddleLine_UsedAverage
         8   -> u8_ExInterface8_get
         8   -> v_Servo_Out


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_26
       4  ??DataTable4_27
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      36  n_GetServoAngle
     126  n_GetServoGraduated
     174  v_Servo_Init
     126  v_Servo_Out
     238  v_steer_set2pwm

 
 812 bytes in section .text
 
 812 bytes of CODE memory

Errors: none
Warnings: none
